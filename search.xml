<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>三大核心计算-定积分</title>
      <link href="/2025/07/16/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2025/07/16/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="定积分的性质"><a href="#定积分的性质" class="headerlink" title="定积分的性质"></a>定积分的性质</h1><h2 id="线性性质"><a href="#线性性质" class="headerlink" title="线性性质"></a>线性性质</h2><p><img src="/../images/image-20250716212421178.png" alt="image-20250716212421178"></p><h2 id="不等式性质"><a href="#不等式性质" class="headerlink" title="不等式性质"></a>不等式性质</h2><p><img src="/../images/image-20250716212534174.png" alt="image-20250716212534174"></p><h2 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h2><h1 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h1><h2 id="牛顿莱布尼兹公式"><a href="#牛顿莱布尼兹公式" class="headerlink" title="牛顿莱布尼兹公式"></a>牛顿莱布尼兹公式</h2><h2 id="定积分换元"><a href="#定积分换元" class="headerlink" title="定积分换元"></a>定积分换元</h2><h2 id="定积分分部积分"><a href="#定积分分部积分" class="headerlink" title="定积分分部积分"></a>定积分分部积分</h2><p><img src="/../images/image-20250716212749666.png" alt="image-20250716212749666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抽象函数积分 用分部积分</span><br></pre></td></tr></table></figure><h2 id="区间在线"><a href="#区间在线" class="headerlink" title="区间在线"></a>区间在线</h2><p><img src="/../images/image-20250716212855891.png" alt="image-20250716212855891"></p><p><img src="/../images/image-20250716212910907.png" alt="image-20250716213004624"></p><p><img src="/../images/image-20250716213028100.png" alt="image-20250716213028100"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后能用 x = t + 二分之派 换元 得到对称区间积分 利用奇偶性化简</span><br></pre></td></tr></table></figure><h2 id="华里式公式"><a href="#华里式公式" class="headerlink" title="华里式公式"></a>华里式公式</h2><p><img src="/../images/image-20250716213350159.png" alt="image-20250716213350159"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日任务</title>
      <link href="/2025/07/16/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>/2025/07/16/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>每天鞭策必须完成！！！一旦懈怠就会习以为常，自甘堕落…</p><span id="more"></span><p>1.一道leetcode</p><p>2.学java</p><p>3.背100个英语单词</p><p>4.学考研数学(包括两道极限，两道积分)</p><p>5.睡前学一个小时政治</p>]]></content>
      
      
      <categories>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署自己的博客(hexo)</title>
      <link href="/2025/07/16/%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-hexo/"/>
      <url>/2025/07/16/%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-hexo/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="搭建自己的博客"><a href="#搭建自己的博客" class="headerlink" title="搭建自己的博客"></a>搭建自己的博客</h1><h2 id="生成自己的-github-io-仓库"><a href="#生成自己的-github-io-仓库" class="headerlink" title="生成自己的.github.io 仓库"></a>生成自己的.github.io 仓库</h2><h2 id="在本地部署-Hexo-环境"><a href="#在本地部署-Hexo-环境" class="headerlink" title="在本地部署 Hexo 环境"></a>在本地部署 Hexo 环境</h2><ul><li>安装 Hexo： <code>npm install -g hexo-cli</code></li><li>初始化 Hexo 框架：<code>hexo init blog</code></li><li>进入上条命令所创建的 blog 文件夹中：<code>cd blog</code></li><li>安装相关依赖：<code>npm install</code></li><li>启动 Hexo 服务：<code>hexo server</code></li><li>访问默认界面，测试是否安装成功：浏览器访问<code>localhost:4000</code></li></ul><h2 id="配置-Butterfly-主题"><a href="#配置-Butterfly-主题" class="headerlink" title="配置 Butterfly 主题"></a>配置 Butterfly 主题</h2><ul><li>进入上一步创建的 blog 文件夹中，将 Next 主题相关文件从 github 克隆到 themes 文件夹中<ul><li>命令：git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</li></ul></li><li>配置 Hexo 的主题参数（在根目录的 <code>_config.yml</code> 文件中），选择使用 Next 主题<ul><li>修改参数为：<code>theme: butterfly</code></li></ul></li><li>启动 Hexo 服务，验证 Next 主题是否启用<ul><li>命令行执行：<code>hexo server</code></li><li>浏览器访问：<code>localhost:4000</code></li></ul></li></ul><h2 id="添加博客内容"><a href="#添加博客内容" class="headerlink" title="添加博客内容"></a>添加博客内容</h2><ul><li><p>将写好的 Markdown 放到 <code>source\_posts</code> 目录</p></li><li><p>将相应的图片放到 <code>source\images</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;我的文章标题&quot;</span></span><br><span class="line">会自动生成文件：</span><br><span class="line"><span class="built_in">source</span>/_posts/我的文章标题.md</span><br></pre></td></tr></table></figure></li></ul><h2 id="将生成的静态页面部署到-github-上"><a href="#将生成的静态页面部署到-github-上" class="headerlink" title="将生成的静态页面部署到 github 上"></a>将生成的静态页面部署到 github 上</h2><p>修改站点配置文件<code>_config.yml</code>的最后部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>要先安装deploy-git，才能用命令部署到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除之前生成的东西</span><br><span class="line">hexo generate  #生成静态文章，缩写hexo g</span><br><span class="line">hexo deploy  #部署文章，缩写hexo d</span><br></pre></td></tr></table></figure><h2 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>打开生成的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source/categories/index.md</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250716132942561.png" alt="image-20250716132942561">把“分类”加到导航栏打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes/butterfly/_config.yml</span><br></pre></td></tr></table></figure><p>找到 <code>menu:</code> 这一段，取消注释（或加上）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>要被添加到分类的文章头部加上</p><p>categories:</p><p>  -java(like) (两个空格！！！)</p><h2 id="创建tags"><a href="#创建tags" class="headerlink" title="创建tags"></a>创建tags</h2><p>hexo new page tags</p><p>修改source\categories文件夹下index.md文件为下面的代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-03-04 17:18:32</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">tags</span>   <span class="comment">#注意此行不添加则点击不会显示标签</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><p>被添加文件 </p><p>tags:  [….]</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/07/14/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/07/14/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<p><strong>这是我的第一个java项目，加油！！！</strong></p><span id="more"></span><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><p>苍穹外卖的前后端分离了吗？前端使用什么服务器，后端采用什么结构设计？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">苍穹外卖确实采用了 前后端分离 的架构：</span><br><span class="line"></span><br><span class="line">前端服务器：使用 Nginx 部署静态资源，前端管理端基于 Vue.js + ElementUI 开发，用户端使用微信小程序 。</span><br><span class="line">后端结构：基于 Spring Boot 构建，采用 分层架构，包括：</span><br><span class="line">网关层：由 Nginx 提供反向代理和负载均衡；</span><br><span class="line">应用层：使用 Spring Boot + Spring MVC + Spring Task + JWT + Swagger 等；</span><br><span class="line">数据层：MySQL 存储核心业务数据，Redis 做缓存，MyBatis 作为 ORM 框架 。</span><br><span class="line"></span><br><span class="line">后端工程最终打包为 jar 包（Spring Boot 内嵌 Tomcat 启动），前端静态资源部署在 Nginx 中 </span><br></pre></td></tr></table></figure><p>Maven父工程和聚合工程的打包方式是什么？ 父工程主要由什么组成？每个模块含有什么内容？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一、父工程和聚合工程的打包方式</span><br><span class="line">父工程（Parent POM）</span><br><span class="line">打包方式：&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">只做依赖管理和版本控制，不生成可执行文件（如 jar/war）。</span><br><span class="line">聚合工程（Aggregator）</span><br><span class="line">打包方式：&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">通过 &lt;modules&gt; 聚合子模块（如 common、pojo、server），统一执行构建命令（如 mvn clean package）。</span><br><span class="line"></span><br><span class="line">二、父工程组成</span><br><span class="line">父工程 sky-take-out 的核心作用：</span><br><span class="line">依赖版本管理（&lt;dependencyManagement&gt;）：</span><br><span class="line">统一 SpringBoot、MyBatis、MySQL、JWT 等依赖的版本，避免子模块版本冲突。</span><br><span class="line">插件管理（&lt;pluginManagement&gt;）：</span><br><span class="line">如 SpringBoot Maven 插件、Lombok 插件等。</span><br><span class="line">公共配置：</span><br><span class="line">如 Maven 仓库地址、编码格式（UTF-8）、Java 版本（JDK 1.8）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三、子模块内容与作用</span><br><span class="line">模块名打包方式内容说明</span><br><span class="line">sky-commonjar公共工具类（如 JwtUtils、BaseContext）、常量类（如 StatusConstant）、异常处理类等。</span><br><span class="line">sky-pojojar实体类（如 Employee、Order）、DTO（如 EmployeeLoginDTO）、VO（如 OrderStatisticsVO）。</span><br><span class="line">sky-serverjar核心业务代码：Controller、Service、Mapper、配置文件（application.yml）、启动类（SkyApplication.java）。</span><br></pre></td></tr></table></figure><h3 id="git版本控制"><a href="#git版本控制" class="headerlink" title="git版本控制"></a>git版本控制</h3><p>为什么要创建git仓库？ </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">版本控制：像“时光机”一样，随时回退到任意历史版本。</span><br><span class="line">多人协作：团队成员可并行开发，避免文件冲突。</span><br><span class="line">备份：代码托管到 GitHub/GitLab，防止本地磁盘损坏导致代码丢失。</span><br><span class="line">持续集成：配合 GitHub Actions、Jenkins 实现自动测试、打包、部署。</span><br></pre></td></tr></table></figure><p>每完成一个接口，要提交git吗？要写message信息吗？ 为什么要写？ </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">要不要提交？</span><br><span class="line">✅ 建议提交——每个完整功能（如“新增菜品分页接口”）作为一次提交，粒度适中，方便回滚。</span><br><span class="line">要不要写 message？</span><br><span class="line">✅ 必须写！message 是“代码日记”，让队友（或未来的你）一眼看懂这次提交做了什么。</span><br><span class="line">为什么写？</span><br><span class="line">快速定位问题（如“哪次提交导致支付失败”）。</span><br><span class="line">生成 ChangeLog（Release 时自动汇总更新内容）。</span><br><span class="line">代码评审（PR）时，reviewer 通过 message 了解上下文。</span><br></pre></td></tr></table></figure><p>项目总的文件，所有都要提交吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❌ 不是全部！</span><br><span class="line">要提交：</span><br><span class="line">源码（src/）、配置文件（application.yml）、静态资源（static/）。</span><br><span class="line">不要提交：</span><br><span class="line">敏感信息（数据库密码、私钥）。</span><br><span class="line">构建产物（target/、*.jar、*.war）。</span><br><span class="line">IDE 配置（.idea/、.vscode/）。</span><br><span class="line">依赖库（node_modules/、maven 的本地仓库）。</span><br><span class="line">怎么忽略？</span><br><span class="line">用 .gitignore 文件声明（如 Java 项目模板见 gitignore.io）。</span><br></pre></td></tr></table></figure><h3 id="数据库搭建"><a href="#数据库搭建" class="headerlink" title="数据库搭建"></a>数据库搭建</h3><h3 id="管理员登录功能"><a href="#管理员登录功能" class="headerlink" title="管理员登录功能"></a>管理员登录功能</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EmployeeController:</span><br><span class="line">1.根据employeeDTO通过数据库查询拿到employee的信息</span><br><span class="line">2.登录成功后，生成jwt令牌    需要用到的claims包含empid:id</span><br><span class="line">3.利用JwtUtil工具类生成jwt令牌</span><br><span class="line">4.构造EmployeeLoginVO对象返回</span><br><span class="line">EmployeeService:</span><br><span class="line">1.拿到username and password</span><br><span class="line">2.根据username查询数据库返回employee对象</span><br><span class="line">3.如果employee为null 抛出自定义异常</span><br><span class="line">4.password md5加密 密码对比 如果不正确 抛出自定义异常</span><br><span class="line">5.查看账户是否被锁定即status是否为0 锁定抛出自定义异常</span><br><span class="line">6.以上都正确 返回employee</span><br><span class="line">EmployeeMapper:</span><br><span class="line">1.根据username查询返回employee对象</span><br></pre></td></tr></table></figure><p>后续登录，前端会携带JWT令牌，通过JWT令牌可以解析出当前员工id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JwtTokenAdminInterceptor.java</span><br><span class="line"><span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">     <span class="comment">//2、校验令牌</span></span><br><span class="line">    <span class="comment">//3、通过，放行</span></span><br><span class="line">     <span class="comment">//4、不通过，响应401状态码</span></span><br></pre></td></tr></table></figure><p>前后端联调这项工作时什么时候进行的？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口 ready、页面 ready → 立即联调；上线前必须再统一跑一次全链路。</span><br></pre></td></tr></table></figure><p>前后端联调工作的主要内容是什么？或者说为什么要进行前后端联调 ?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把各自跑得好好的代码，放到一起跑一次全链路验收”，确保用户真正用起来不会崩、不会错、不会慢。</span><br></pre></td></tr></table></figure><h3 id="nginx反向代理和负载均衡"><a href="#nginx反向代理和负载均衡" class="headerlink" title="nginx反向代理和负载均衡"></a>nginx反向代理和负载均衡</h3><p>为什么不直接通过浏览器直接请求后台服务端，需要通过Nginx反向代理呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nginx 反向代理可以提高访问速度、进行负载均衡、保证后端服务安全</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提高访问速度</span><br><span class="line"></span><br><span class="line">因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</span><br><span class="line"></span><br><span class="line">进行负载均衡</span><br><span class="line"></span><br><span class="line">所谓负载均衡,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</span><br><span class="line"></span><br><span class="line">保证后端服务安全</span><br><span class="line"></span><br><span class="line">因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把nginx作为请求访问的入口，请求到达nginx后转发到具体的服务中，从而保证后端服务的安全。</span><br></pre></td></tr></table></figure><p>反向代理的配置方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    </span><br><span class="line">    location /api/&#123;</span><br><span class="line">        proxy_pass http://localhost:8080/admin/; #反向代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass： 该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</span><br><span class="line"></span><br><span class="line">如上代码的含义是：监听80端口号， 然后当我们访问 http://localhost:80/api/../..这样的接口的时候，它会通过 location /api/ &#123;&#125; 这样的反向代理到 http://localhost:8080/admin/上来。</span><br><span class="line">当在访问http://localhost/api/employee/login，nginx接收到请求后转到http://localhost:8080/admin/，故最终的请求地址为http://localhost:8080/admin/employee/login，和后台服务的访问地址一致。</span><br></pre></td></tr></table></figure><p>nginx 负载均衡默认是什么策略？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">轮询（Round Robin）</span><br><span class="line">即：把请求 按顺序轮流 分发给后端服务器，不附加任何权重或状态判断。</span><br></pre></td></tr></table></figure><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.导入 knife4j 的maven坐标</span><br><span class="line">2.在配置类中加入 knife4j 相关配置</span><br><span class="line">WebMvcConfiguration.java</span><br><span class="line">@Bean</span><br><span class="line">    public Docket docket() &#123;</span><br><span class="line">        ApiInfo apiInfo = new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;苍穹外卖项目接口文档&quot;)</span><br><span class="line">                .version(&quot;2.0&quot;)</span><br><span class="line">                .description(&quot;苍穹外卖项目接口文档&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        Docket docket = new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.sky.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        return docket;</span><br><span class="line">    &#125;</span><br><span class="line"> 3.设置静态资源映射，否则接口文档页面无法访问</span><br><span class="line"> protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/doc.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pojo</span><br><span class="line">@ApiModel(description = &quot; &quot;)</span><br><span class="line">@ApiModelProperty(&quot; &quot;)</span><br><span class="line">controller</span><br><span class="line">@Api(tags = &quot; &quot;)</span><br><span class="line">@ApiOperation(value = &quot; &quot;)</span><br></pre></td></tr></table></figure><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><h3 id="新增员工功能"><a href="#新增员工功能" class="headerlink" title="新增员工功能"></a>新增员工功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line"><span class="number">1.</span>创建一个employee实体 用来拷贝数据</span><br><span class="line"><span class="number">2.</span>补充dto没有的属性 状态 密码 创建时间 修改时间 创建人id 更改人id</span><br><span class="line"><span class="number">3.</span>调用mapper插入</span><br><span class="line">mapper:</span><br><span class="line"><span class="keyword">insert into</span> employee (username, name, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user) &quot; +</span><br><span class="line">            &quot;<span class="keyword">values</span> &quot; +</span><br><span class="line">            &quot;(#&#123;username&#125;, #&#123;name&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br></pre></td></tr></table></figure><p>在application.yml中已开启驼峰命名，故id_number和idNumber可对应。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DTO实体类数据怎么传递到Entity实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>手动转换</span><br><span class="line"><span class="comment">// UserDTO -&gt; UserEntity</span></span><br><span class="line"><span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">userEntity.setUsername(userDTO.getUsername());</span><br><span class="line">userEntity.setEmail(userDTO.getEmail());</span><br><span class="line"><span class="comment">// 设置其他字段...</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用工具类</span><br><span class="line"><span class="comment">// 使用Spring的BeanUtils</span></span><br><span class="line"><span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">BeanUtils.copyProperties(userDTO, userEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用MapStruct</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    UserEntity <span class="title function_">dtoToEntity</span><span class="params">(UserDTO dto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 使用Builder模式</span><br><span class="line"> <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> UserEntity.builder()</span><br><span class="line">    .username(userDTO.getUsername())</span><br><span class="line">    .email(userDTO.getEmail())</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>前端传递的实体类数据，还需要补充什么信息才能存到数据库表中？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>主键ID：通常由数据库自动生成（如自增ID或UUID）</span><br><span class="line"><span class="number">2.</span>审计字段：</span><br><span class="line">创建时间</span><br><span class="line">更新时间</span><br><span class="line">创建人</span><br><span class="line">更新人</span><br><span class="line"><span class="number">3.</span>业务状态字段：</span><br><span class="line">状态枚举</span><br><span class="line">审核状态等</span><br><span class="line"><span class="number">4.</span>关联关系：</span><br><span class="line">外键关联的其他实体ID</span><br><span class="line">一对多、多对多关系的集合</span><br></pre></td></tr></table></figure><p>用户名存在问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLIntegrityConstraintViolationException: Duplicate entry <span class="string">&#x27;zfl&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;employee.idx_username&#x27;</span></span><br><span class="line">发现，username已经添加了唯一约束，不能重复。</span><br><span class="line">通过全局异常处理器来处理。</span><br><span class="line">进入到sky-server模块，com.sky.handler包下，GlobalExceptionHandler.java添加方法</span><br><span class="line"><span class="number">1.</span><span class="comment">//获取异常的具体信息</span></span><br><span class="line">    <span class="number">2.</span><span class="comment">//判断是否包含”Duplicate entry”</span></span><br><span class="line">    <span class="number">3.</span><span class="comment">//将信息分割成数组</span></span><br><span class="line">    <span class="number">4.</span><span class="comment">//获得第三个字段即用户名信息</span></span><br><span class="line">    <span class="number">5.</span><span class="comment">//构造具体的提示信息，如：zfl + “已存在”</span></span><br><span class="line">    <span class="number">6.</span><span class="comment">//返回带有具体提示信息的错误结果</span></span><br><span class="line">    <span class="number">7.</span><span class="comment">//如果不是重复条目异常，则返回通用的未知错误提示</span></span><br><span class="line">进入到sky-common模块，在MessageConstant.java添加</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALREADY_EXISTS</span> <span class="operator">=</span> <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建id固定问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用BaseContext工具类操作ThreadLocal</span><br></pre></td></tr></table></figure><h3 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">设计DTO类</span><br><span class="line">    包含name page pageSize</span><br><span class="line">封装pageResult</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>  total<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> List records<span class="comment">//当前页数据集合</span></span><br><span class="line">controller</span><br><span class="line">    返回的是PageResult</span><br><span class="line">service</span><br><span class="line">    使用pageHelper分页插件 设置当前页码和每页显示条数</span><br><span class="line">    调用mapper分页查询 返回Page&lt;Employee&gt;对象</span><br><span class="line">    获取page的结果</span><br><span class="line">mapper</span><br><span class="line">    select * from employee</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    order by create_time desc</span><br></pre></td></tr></table></figure><p>分页查询中前端应该传递什么参数给后端，后端应该返回什么数据给前端？</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td><code>page</code></td><td>int</td><td>是</td><td>当前页码（从1开始，避免从0开始导致用户困惑）。</td></tr><tr><td><code>size</code>&#x2F;<code>limit</code></td><td>int</td><td>是</td><td>每页条数（需限制最大值，如<code>size &lt;= 100</code>，防止恶意请求）。</td></tr><tr><td><code>sort</code></td><td>string</td><td>否</td><td>排序字段（如<code>sort=createTime</code>）。</td></tr><tr><td><code>order</code></td><td>string</td><td>否</td><td>排序方式（如<code>order=desc</code>或<code>asc</code>，需后端校验合法性）。</td></tr><tr><td>其他过滤条件</td><td>-</td><td>否</td><td>根据业务需求传递（如<code>status=active</code>、<code>keyword=搜索词</code>等）。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [ <span class="comment">/* 当前页的数据数组 */</span> ],</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">95</span>,          <span class="comment">// 总记录数（用于前端计算总页数）</span></span><br><span class="line">    <span class="string">&quot;page&quot;</span>: <span class="number">2</span>,            <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span>,           <span class="comment">// 每页条数</span></span><br><span class="line">    <span class="string">&quot;pages&quot;</span>: <span class="number">10</span>           <span class="comment">// 总页数（后端计算后返回，避免前端重复计算）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作时间字段显示有问题 完善</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.在属性上加上注解，对日期进行格式化</span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">b.在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对日期类型进行格式处理</span><br><span class="line">    <span class="comment">//创建消息转换器对象 MappingJackson2HttpMessageConverter</span></span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json       setObjectMapper(new JacksonObjectMapper)</span></span><br><span class="line">    <span class="comment">//将消息转换器对象追加到converters中   converters.add(0,converter);</span></span><br></pre></td></tr></table></figure><p><strong>Spring MVC 的消息转换器（HttpMessageConverter）的作用是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把 HTTP 请求体 ↔ Java 对象，以及 Java 对象 ↔ HTTP 响应体 做自动转换。</span><br></pre></td></tr></table></figure><h3 id="启用禁用账号功能"><a href="#启用禁用账号功能" class="headerlink" title="启用禁用账号功能"></a>启用禁用账号功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">controller:  public <span class="keyword">Result</span> startOrStop(<span class="variable">@PathVariable</span> <span class="type">Integer</span> status,Long id)&#123;&#125;</span><br><span class="line"></span><br><span class="line">mapper:  <span class="keyword">update</span> employee</span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;name != null&quot;<span class="operator">&gt;</span>name <span class="operator">=</span> #&#123;name&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;username != null&quot;<span class="operator">&gt;</span>username <span class="operator">=</span> #&#123;username&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;password != null&quot;<span class="operator">&gt;</span>password <span class="operator">=</span> #&#123;password&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;phone != null&quot;<span class="operator">&gt;</span>phone <span class="operator">=</span> #&#123;phone&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;sex != null&quot;<span class="operator">&gt;</span>sex <span class="operator">=</span> #&#123;sex&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;idNumber != null&quot;<span class="operator">&gt;</span>id_Number <span class="operator">=</span> #&#123;idNumber&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;updateTime != null&quot;<span class="operator">&gt;</span>update_Time <span class="operator">=</span> #&#123;updateTime&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;updateUser != null&quot;<span class="operator">&gt;</span>update_User <span class="operator">=</span> #&#123;updateUser&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;status != null&quot;<span class="operator">&gt;</span>status <span class="operator">=</span> #&#123;status&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;           <span class="operator">/</span><span class="operator">/</span><span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span>自动可以去掉,</span><br></pre></td></tr></table></figure><h3 id="编辑员工信息and根据id查询员工信息"><a href="#编辑员工信息and根据id查询员工信息" class="headerlink" title="编辑员工信息and根据id查询员工信息"></a>编辑员工信息and根据id查询员工信息</h3><h3 id="员工修改密码功能"><a href="#员工修改密码功能" class="headerlink" title="员工修改密码功能"></a>员工修改密码功能</h3><h3 id="导入分类模块功能代码"><a href="#导入分类模块功能代码" class="headerlink" title="导入分类模块功能代码"></a>导入分类模块功能代码</h3><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-3"></a>Day-3</h2><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><p>统一处理方式</p><p>使用AOP切面编程，实现功能增强，来完成公共字段自动填充功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</span><br><span class="line">自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill注解的方法，通过反射为公共字段赋值</span><br><span class="line">在 Mapper的方法 上加入 AutoFill 注解,并注释业务层赋值时间和用户Id的代码</span><br><span class="line"></span><br><span class="line">AutoFill: </span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>  <span class="comment">//用于标注方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//运行时保留</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  AutoFill &#123;</span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>; <span class="comment">//包含一个参数 value()，类型为 OperationType，用于指定操作类型。</span></span><br><span class="line">&#125;</span><br><span class="line">AutoFillAspect:</span><br><span class="line"><span class="meta">@Pointcut</span>：定义一个切面的切入点表达式，表示切面关注的连接点。</span><br><span class="line">    <span class="string">&quot;execution(* com.sky.mapper.*.*(..))&quot;</span>：匹配 com.sky.mapper 包中所有类的所有方法。</span><br><span class="line">    <span class="string">&quot;@annotation(com.sky.annotation.AutoFill)&quot;</span>：要求被拦截的方法上必须有 <span class="meta">@AutoFill</span> 注解。</span><br><span class="line">    autoFillPointCut()：是一个命名切入点的方法，后续可以在 <span class="meta">@Before</span>、<span class="meta">@Around</span> 等通知中引用该方法名，作为切入点。</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span>    </span><br><span class="line">    joinPoint.getSignature()：获取被拦截方法的签名。</span><br><span class="line">    (MethodSignature)：强制转换为 MethodSignature 类型，以便获取具体方法对象。</span><br><span class="line">    methodSignature.getMethod()：获得被拦截的 Method 对象。</span><br><span class="line">    getAnnotation(AutoFill.class)：检查该方法是否标注了 <span class="meta">@AutoFill</span> 注解。</span><br><span class="line">    autoFill.value()：获取注解中指定的操作类型（OperationType），用于后续自动填充逻辑判断 <span class="comment">//上述操作就是为了这个</span></span><br><span class="line">        </span><br><span class="line">    获取到当前被拦截的方法的参数--实体对象 joinPoint.getArgs();</span><br><span class="line">    准备赋值的数据</span><br><span class="line">        </span><br><span class="line">   <span class="comment">//根据当前不同的操作类型，为对应的属性通过反射赋值</span></span><br><span class="line">    object.getClass()：获取当前实体对象的 Class 类型；</span><br><span class="line">    .getDeclaredMethod(...)：查找该类中声明的、名为 AutoFillConstant.SET_CREATE_TIME 的方法（如 <span class="string">&quot;setCreateTime&quot;</span>）；</span><br><span class="line">    LocalDateTime.class：指定要查找的方法参数类型为 LocalDateTime；</span><br><span class="line">    Method setCreateTime：得到一个 Method 对象，后续可以通过 invoke() 调用该 setter 方法进行字段赋值。 <span class="comment">//上述操作就是为了这个</span></span><br></pre></td></tr></table></figure><h3 id="文件上传实现"><a href="#文件上传实现" class="headerlink" title="文件上传实现"></a>文件上传实现</h3><p>实现步骤：</p><ol><li><p>定义OSS相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application-dev.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">环境变量</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">环境变量</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">sky-take-out</span></span><br><span class="line"><span class="string">application.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>    <span class="comment">#设置环境</span></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">$&#123;sky.alioss.endpoint&#125;</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">$&#123;sky.alioss.access-key-id&#125;</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">$&#123;sky.alioss.access-key-secret&#125;</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">$&#123;sky.alioss.bucket-name&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取OSS配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在sky-common模块中，已定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sky.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sky.alioss&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String endpoint;</span><br><span class="line"><span class="keyword">private</span> String accessKeyId;</span><br><span class="line"><span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"><span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成OSS工具类对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用已有的ossutill工具类 生成对象</span><br></pre></td></tr></table></figure></li><li><p>定义文件上传接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件原始名称: file.getOriginalFilename();</span></span><br><span class="line"><span class="comment"> * 截取原始文件名后缀名 : String extension = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span></span><br><span class="line"><span class="comment"> * 构造新文件名称：随机数 + 文件后缀名 : UUID.randomUUID().toString()+extention;</span></span><br><span class="line"><span class="comment"> * 构造文件请求路径并返回:  String upload = aliOssUtil.upload(file.getBytes(), name);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line">由DTO得到dish 调用mapper</span><br><span class="line">由DTO得到flavors 并赋值dishId</span><br><span class="line">List<span class="tag">&lt;<span class="name">DishFlavor</span>&gt;</span> flavors = dishDTO.getFlavors();</span><br><span class="line">        if(flavors != null &amp;&amp; flavors.size() &gt; 0)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                dishFlavor.setDishId(dishId);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">mapper:</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.sky.entity.Dish&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span> 后两个注意 生成id赋值给原来的dish</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> &gt;</span></span><br><span class="line">        insert into dish_flavor (dish_id,name, value) values</span><br><span class="line">                                                          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;flavors&quot;</span> <span class="attr">item</span>=<span class="string">&quot;df&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                                                              (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">                                                          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="菜品分页查询"><a href="#菜品分页查询" class="headerlink" title="菜品分页查询"></a>菜品分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">controller: 返回Result&lt;PageResult&gt;</span><br><span class="line">service: PageHelper.startPage(...)</span><br><span class="line">     Page&lt;Dish&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">返回的是<span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page,getResult())</span><br><span class="line">mapper:</span><br><span class="line"> select * from dish</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                and name like <span class="string">&#x27;%$&#123;name&#125;%&#x27;</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">category_id</span> <span class="operator">=</span> #&#123;categoryId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        order by update_time desc</span><br></pre></td></tr></table></figure><p>删除菜品</p><ul><li>可以<code>一次删除</code>一个菜品，也可以<code>批量删除</code>菜品</li><li><code>起售中</code>的菜品<code>不能删除</code></li><li><code>被套餐关联</code>的菜品<code>不能删除</code></li><li>删除菜品后，关联的<code>口味数据</code>也需要<code>删除</code>掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">controller:  <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;&#125;</span><br><span class="line">service :<span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断是否菜品是否能删除 1.查询当前菜品是否在售 2.查询当前菜品是否关联了套餐</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">     <span class="comment">//删除菜品数据 和 口味表数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么要在项目中使用自定义异常？</p><table><thead><tr><th>痛点</th><th>自定义异常带来的好处</th></tr></thead><tbody><tr><td>① JDK 自带异常语义太泛</td><td><code>IllegalArgumentException</code>、<code>RuntimeException</code> 看不出“用户名已存在”“库存不足”等业务含义。</td></tr><tr><td>② 差异化处理困难</td><td>捕获到自定义异常后，可直接 <code>instanceof BizException</code> 做分支处理，不必解析 message。</td></tr><tr><td>③ 统一响应&#x2F;监控</td><td>可在自定义异常里携带 <strong>错误码</strong>、<strong>i18n 文案</strong>、<strong>日志级别</strong>，方便前端统一弹窗、运维监控报警。</td></tr><tr><td>④ 框架集成友好</td><td>Spring Security、Spring Validation、Spring Cloud Gateway 等都支持按异常类型做 <strong>全局异常映射</strong> 和 <strong>重试&#x2F;熔断</strong>策略。</td></tr></tbody></table><p>如何捕获这些异常？</p><table><thead><tr><th>场景</th><th>捕获方式</th></tr></thead><tbody><tr><td>普通 Java 代码</td><td><code>try &#123; ... &#125; catch (MyBizException e) &#123; ... &#125;</code></td></tr><tr><td>Spring Web</td><td><code>@RestControllerAdvice</code> + <code>@ExceptionHandler(MyBizException.class)</code> 统一返回 JSON。</td></tr><tr><td>Spring WebFlux &#x2F; Gateway</td><td><code>ErrorWebExceptionHandler</code> 或 <code>@ControllerAdvice</code>。</td></tr><tr><td>定时任务 &#x2F; 异步线程</td><td>在 <code>Runnable</code> 里显式 catch，或配合线程池的 <code>afterExecute</code> 钩子。</td></tr></tbody></table><h3 id="根据id查询菜品"><a href="#根据id查询菜品" class="headerlink" title="根据id查询菜品"></a>根据id查询菜品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service: <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);</span><br><span class="line">再封装进dishVO</span><br></pre></td></tr></table></figure><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">serevice: 获得dish从dishDTO 调用mapper</span><br><span class="line">删除原有的口味数据</span><br><span class="line">从dishDTO获得 List&lt;DishFlavors&gt; flavors</span><br><span class="line">为flavors插入dishId</span><br><span class="line">调用mapper批量插入  if (flavors != null &amp;&amp; !flavors.isEmpty()) &#123;</span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;  注意条件否则会出错</span><br></pre></td></tr></table></figure><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day-4"></a>Day-4</h2><h3 id="套餐管理模块所有业务功能"><a href="#套餐管理模块所有业务功能" class="headerlink" title="套餐管理模块所有业务功能"></a>套餐管理模块所有业务功能</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意批量删除 delete from setmeal where id in</span><br><span class="line">                                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                                   #&#123;id&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            //delete from setmeal where id in ( , , )</span><br></pre></td></tr></table></figure><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day-5"></a>Day-5</h2><h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><h4 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h4><p><strong>主要特点：</strong> 🍐</p><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品、资讯、新闻）</li><li>企业应用广泛</li></ul><p><strong>关系型数据库(RDBMS)：</strong></p><ul><li>Mysql 企业常用</li><li>Oracle 企业常用</li><li>DB2</li><li>SQLServer</li></ul><p><strong>非关系型数据库(NoSql)：</strong></p><ul><li>Redis 企业常用</li><li>Mongo db 企业常用</li><li>MemCached</li></ul><p>ai查询装docker redis   docker-compose up -d</p><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><p><strong>5种常用的数据类型</strong></p><ul><li>字符串(string)：普通字符串，Redis中最简单的数据类型</li><li>哈希(hash)：也叫散列，类似于Java中的HashMap结构</li><li>列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li><li>集合(set)：无序集合，没有重复元素，类似于Java中的HashSet</li><li>有序集合(sorted set&#x2F;zset)：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li></ul><p><img src="/../images/image-20250716151454167.png" alt="image-20250716151454167"></p><p>&#x3D;&#x3D;<strong>String</strong>&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 存入一个字符串</span><br><span class="line"><span class="keyword">set</span> name xiaoming</span><br><span class="line"># 获取name</span><br><span class="line"><span class="keyword">get</span> name</span><br><span class="line"></span><br><span class="line"># 存入一个age </span><br><span class="line"><span class="keyword">set</span> age <span class="number">20</span> </span><br><span class="line"><span class="keyword">set</span> age <span class="number">30</span></span><br><span class="line"># 获得age  </span><br><span class="line"><span class="keyword">get</span> age  #<span class="number">30</span> 覆盖了</span><br><span class="line"></span><br><span class="line"># 练习 SETEX key seconds <span class="keyword">value</span> 设置指定 key 的值，并将 key 的过期时间设为 seconds 秒</span><br><span class="line"># 设置存<span class="number">10</span>s </span><br><span class="line">setex city <span class="number">10</span> beijing</span><br><span class="line"></span><br><span class="line"># 等待<span class="number">10</span>秒</span><br><span class="line"><span class="keyword">get</span> city #返回nil <span class="comment">---&gt;空</span></span><br><span class="line"></span><br><span class="line"># 练习SETNX key <span class="keyword">value</span> 只有在 key 不存在时设置 key 的值</span><br><span class="line">setnx bookname zhuxian </span><br><span class="line"></span><br><span class="line">setnx bookname fanrenxiuxianzhuan</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> bookname # 返回zhuxian</span><br><span class="line"></span><br><span class="line">## 注意不要传中文，返回类似这种</span><br><span class="line">&quot;\xe5\x87\xa1\xe4\xba\xba\xe4\xbf\xae\xe4\xbb\x99\xe8\xae\xb0&quot;</span><br><span class="line"># 在redis 中存储中文，默认读取不到中文，而是以十六进制的方式储存</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>Hash</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 往key 为001 存入 hash键值对 2对</span><br><span class="line">hset 001 name zhangsan</span><br><span class="line">hset 001 age  23</span><br><span class="line">hset 002 name lisi</span><br><span class="line">hset 002 age  16</span><br><span class="line"></span><br><span class="line"># 练习 HGET key field 获取存储在哈希表中指定字段的值</span><br><span class="line"># 获取002中的 name的值</span><br><span class="line">hget 002 name</span><br><span class="line"></span><br><span class="line"># 练习 HDEL key field 删除存储在哈希表中的指定字段</span><br><span class="line"># 删除 002 中的name</span><br><span class="line">hdel 002 name</span><br><span class="line"></span><br><span class="line"># 练习HKEYS key 获取哈希表中所有字段</span><br><span class="line">hkeys 002</span><br><span class="line"></span><br><span class="line"># 练习HVALS key 获取哈希表中所有值</span><br><span class="line">HVALS 002</span><br><span class="line"></span><br><span class="line"># 练习 HGETALL key 获取在哈希表中指定 key 的所有字段和值</span><br><span class="line"></span><br><span class="line">HGETALL 001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;List&#x3D;&#x3D;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># LPUSH key value1 [value2] 将一个或多个值插入到列表头部</span><br><span class="line">LPUSH list1 a b c d</span><br><span class="line">LPUSH list2 1 2 3 4</span><br><span class="line">LPUSH list3 9 8 7 6</span><br><span class="line"></span><br><span class="line"># LRANGE key start stop 获取列表指定范围内的元素</span><br><span class="line">LRANGE list1 0 -1 # 查所有</span><br><span class="line"># a最先插入，所以在尾部</span><br><span class="line"></span><br><span class="line"># RPOP key 移除并获取列表最后一个元素</span><br><span class="line">RPOP list1 # 返回a   当然a没有了</span><br><span class="line"></span><br><span class="line"># LLEN key 获取列表长度</span><br><span class="line">LLEN list1  # 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超 时或发现可弹出元素为止</span><br><span class="line"></span><br><span class="line">BRPOP list1  10  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>set</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># SADD key member1 [member2] 向集合添加一个或多个成员</span><br><span class="line">SADD set1 a b c</span><br><span class="line">SADD set2 1 2 3</span><br><span class="line"></span><br><span class="line"># SMEMBERS key 返回集合中的所有成员</span><br><span class="line">SMEMBERS set1</span><br><span class="line"></span><br><span class="line"># SCARD key 获取集合的成员数</span><br><span class="line">SCARD  set1</span><br><span class="line"></span><br><span class="line"># SINTER key1 [key2] 返回给定所有集合的交集</span><br><span class="line"></span><br><span class="line">SINTER set1 set2 # a 交集是a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SUNION key1 [key2] 返回所有给定集合的并集</span><br><span class="line"></span><br><span class="line">SUNION set1 set2  # a b c 2 3</span><br><span class="line"></span><br><span class="line"># SDIFF key1 [key2] 返回给定所有集合的差集</span><br><span class="line"></span><br><span class="line">SDIFF set1 set2  #注意顺序 2者相减</span><br><span class="line"></span><br><span class="line"># SREM key member1 [member2] 移除集合中一个或多个成员</span><br><span class="line">SREM set1 a b # 删除元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;sorted set&#x3D;&#x3D;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的 分数</span><br><span class="line">zadd sset1  0.1 a  3.0 b 2.5 c</span><br><span class="line">zadd sset2  9.9 p  8.8 w 2.0 q</span><br><span class="line"></span><br><span class="line"># ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合中指定区间内的成员</span><br><span class="line">ZRANGE sset1 0 -1 # 获得全部</span><br><span class="line">ZRANGE sset1 0 -1  WITHSCORES # 分数也会显示</span><br><span class="line"></span><br><span class="line"># ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment</span><br><span class="line">ZINCRBY  sset1 20 b #意味着b的分值改变了</span><br><span class="line"># 可以查询下</span><br><span class="line">ZRANGE sset1 0 -1  WITHSCORES</span><br><span class="line"></span><br><span class="line"># ZREM key member [member ...] 移除有序集合中的一个或多个成员</span><br><span class="line">ZREM sset1 b #将b这个元素移除</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h4><p>1.导入<strong>Spring Data Redis的maven坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong>配置Redis数据源</strong></p><p>在application-dev.yml中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.144</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">10</span>  <span class="string">//Redis服务启动后默认有16个数据库，编号分别是从0到15。</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;sky.redis.password&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.<strong>编写配置类，创建RedisTemplate对象</strong></p><p>当前配置类不是必须的，因为 Spring Boot 框架会自动装配 RedisTemplate 对象，但是默认的key序列化器为</p><p>JdkSerializationRedisSerializer，导致我们存到Redis中后的数据和原始数据有差别，故设置为</p><p>StringRedisSerializer序列化器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板对象...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置redis的连接工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置redis key的序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作string</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作字符串类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// set get setex setnx</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(city);</span><br><span class="line">       <span class="comment">// 过期时间</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">// 存入前判断</span></span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作哈希类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作哈希类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//hset hget hdel hkeys hvals</span></span><br><span class="line">       <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(name);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(values);</span><br><span class="line"></span><br><span class="line">       hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作列表类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//lpush lrange rpop llen</span></span><br><span class="line">       <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">       listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">       listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">       listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//sadd smembers scard sinter sunion srem</span></span><br><span class="line">       <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">       setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">       setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(members);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(intersect);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(union);</span><br><span class="line"></span><br><span class="line">       setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作有序集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作有序集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//zadd zrange zincrby zrem</span></span><br><span class="line">       <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">       zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">       zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通用命令操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通用命令操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//keys exists type del</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">           <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">           System.out.println(type.name());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Boot 为我们自动配置了 RedisTemplate，而 RedisTemplate 使用的是 JdkSerializationRedisSerializer，这个对我们用 redis 图形化客户端很不直观，因为 JdkSerializationRedisSerializer 使用二进制形式储存数据，在此我们将自己配置 RedisTemplate 并定义 Serializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在config包中配置</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheConfig</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置redisTemplate bean，⾃定义数据的序列化的⽅式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisConnectionFactory 连接redis的⼯⼚，底层有</span></span><br><span class="line"><span class="comment">场景依赖启动时，⾃动加载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Bean(&quot;secondRedisTemplate&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(<span class="meta">@Autowired</span> RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">    <span class="comment">//1.构建RedisTemplate模板对象</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template = newRedisTemplate&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="comment">//2.为不同的数据结构设置不同的序列化⽅案</span></span><br><span class="line">    <span class="comment">//设置key序列化⽅式</span></span><br><span class="line">    template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">    <span class="comment">//设置value序列化⽅式</span></span><br><span class="line">    template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class="line">    <span class="comment">//设置hash中field字段序列化⽅式</span></span><br><span class="line">    template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">    <span class="comment">//设置hash中value的序列化⽅式</span></span><br><span class="line">    template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class="line">    <span class="comment">//5.初始化参数设置</span></span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="店铺营业状态设置"><a href="#店铺营业状态设置" class="headerlink" title="店铺营业状态设置"></a>店铺营业状态设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;secondRedisTemplate&quot;)</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">读取容器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
