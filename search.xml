<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>黑马点评</title>
      <link href="/2025/07/23/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/"/>
      <url>/2025/07/23/%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<p>四方保险学了快一半心累 先搞会儿黑马点评</p><span id="more"></span><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a><strong>项目搭建</strong></h1><p>下载和启动Redis</p><p>导入数据库</p><p>初始化项目</p><ul><li>导入项目</li><li>配置IDEA环境：检查 JDK、Maven、编码三个方面</li><li>加载Maven依赖：直接刷新Maven（建议配置阿里云镜像，网上教程很多）</li><li>更改配置：将application.yml文件中的账号密码换成自己的，比如MySQL的账号密码，Redis的地址和密码</li></ul><p>1）JDK保障是1.8</p><p><img src="/../images/image-20250723153504062.png" alt="image-20250723153504062"></p><p><img src="/../images/image-20250723153516842.png" alt="image-20250723153516842"></p><p>2）项目编码保障是UTF-8</p><p><img src="/../images/image-20250723153526896.png" alt="image-20250723153526896"></p><p>3）Maven版本不低于3.4</p><p><img src="/../images/image-20250723153536263.png" alt="image-20250723153536263"></p><p>4）项目路径不要出现中文</p><p>启动项目</p><p>启动前端项目</p><p>解压前端项目，然后进入Dos命令窗口</p><p>输入<code>start nginx.exe</code>启动Nginx</p><p>Nginx是后台启动，我们直接打开浏览器访问<code>http://localhost:8080/</code>，如果看到以下页面则代表前端项目启动成功</p><p>启动后端项目</p><p>使用IDEA运行后端项目后</p><p>打开浏览器访问 <a href="http://localhost:8081/shop/1%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%83%BD%E5%A4%9F%E7%9C%8B%E5%88%B0%E4%BB%A5%E4%B8%8B%E9%A1%B5%E9%9D%A2%E5%B0%B1%E8%AF%B4%E6%98%8E%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F">http://localhost:8081/shop/1，如果能够看到以下页面就说明后端项目启动成功</a></p><p>注意：首先要保障数据库中的 shop 表中存在 id 为1的这条数据</p><h1 id="登录与会话保持"><a href="#登录与会话保持" class="headerlink" title="登录与会话保持"></a><strong>登录与会话保持</strong></h1><h2 id="基于-Session-实现短信验证码登录和会话保持"><a href="#基于-Session-实现短信验证码登录和会话保持" class="headerlink" title="基于 Session 实现短信验证码登录和会话保持"></a>基于 Session 实现短信验证码登录和会话保持</h2><p><strong>用 Session 的用途有二</strong></p><ol><li>在 <strong>&lt;发送短信验证码&gt;</strong> 步骤中 在Session中保存短信验证码，当**&lt;登录&#x2F;注册&gt;**时 从Session取出短信验证码与用户提交的参数进行比对</li><li>Session 含义为会话，而会话保持 即保存登录状态，同一个客户端发送多条请求时，服务器能够识别出这些请求来自同一用户。因此在**&lt;登录&#x2F;注册&gt;**时，将用户信息存储到Session中</li></ol><ul><li>Cookie 是保存在用户的浏览器中的，而 Session 是保存在后端服务器中的</li><li>Cookie 中携带着 SessionId，SessionId 对应着后端服务器中的 Session</li><li>而在&lt;**校验登录状态&gt;**的步骤中，当前端发起请求，请求中携带了 Cookie ，而 Cookie 中携带了SessionId，那么后端才能根据 SessionId 找到对应的 Session，并且取出其中的用户信息，才能得知用户已登录</li></ul><h3 id="短信验证码登录"><a href="#短信验证码登录" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h3><p><img src="/../images/1746670232090-3fa032bc-878d-4f52-be66-5afe742bec32.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、判断手机号是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、手机号合法，生成验证码，并保存到Session中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    session.setAttribute(SystemConstants.VERIFY_CODE, code);</span><br><span class="line">    <span class="comment">// 3、发送验证码</span></span><br><span class="line">    log.info(<span class="string">&quot;验证码:&#123;&#125;&quot;</span>, code);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">// 1、判断手机号是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、判断验证码是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionCode</span> <span class="operator">=</span> (String) session.getAttribute(LOGIN_CODE);</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="literal">null</span> || !code.equals(sessionCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、判断手机号是否是已存在的用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                            .eq(User::getPassword, phone));</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="comment">// 用户不存在，需要注册</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4、保存用户信息到Session中，便于后面逻辑的判断（比如登录判断、随时取用户信息，减少对数据库的查询）</span></span><br><span class="line">    session.setAttribute(LOGIN_USER, user);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据手机号创建用户</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setPhone(phone);</span><br><span class="line">    user.setNickName(SystemConstants.USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">    <span class="built_in">this</span>.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpSession</code> 不是你自己 new 出来的，而是由 <strong>Tomcat（或 Spring Boot 内嵌的 Servlet 容器）</strong> 在调用你的接口时<strong>自动创建并注入</strong>的。</p><p>✅ 具体流程（简图）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器第一次请求 → Tomcat 检查 Cookie 里有没有 JSESSIONID</span><br><span class="line">    ├─ 没有 → 新建 HttpSession，生成 JSESSIONID，通过 Set-Cookie 返回给浏览器</span><br><span class="line">    └─ 有 → 根据 JSESSIONID 找到对应的 HttpSession，注入到方法参数里</span><br></pre></td></tr></table></figure><h3 id="校验登录状态-会话保持"><a href="#校验登录状态-会话保持" class="headerlink" title="校验登录状态 &amp; 会话保持"></a>校验登录状态 &amp; 会话保持</h3><p><strong>配置登录拦截器</strong></p><p><img src="/../images/1746670232534-82adbb34-90d1-401e-b269-94fa269b2227.png" alt="img"></p><p>登录拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截器，用于判断用户是否登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 1、判断用户是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(LOGIN_USER);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user))&#123;</span><br><span class="line">            <span class="comment">// 用户不存在，直接拦截</span></span><br><span class="line">            response.setStatus(HttpStatus.HTTP_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、用户存在，则将用户信息保存到ThreadLocal中，方便后续逻辑处理</span></span><br><span class="line">        <span class="comment">// 比如：方便获取和使用用户信息，session获取用户信息是具有侵入性的</span></span><br><span class="line">        ThreadLocalUtls.saveUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完拦截器后，还需要将我们自定义的拦截器添加到SpringMVC的拦截器列表中，才能生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加登录拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        <span class="comment">// 设置放行请求</span></span><br><span class="line">        .excludePathPatterns(</span><br><span class="line">            <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h3><ol><li>封装UserDTO，返回给前端的<code>Entity</code>数据使用<code>BeanUtil</code>工具类转成DTO</li><li>存储到ThreadLocal中的数据也进行数据托名</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器集群共享Session问题"><a href="#服务器集群共享Session问题" class="headerlink" title="服务器集群共享Session问题"></a>服务器集群共享Session问题</h2><p>在分布式集群环境中，会话（Session）共享是一个常见的挑战。默认情况下，Session是存在于服务器内部的，各个服务器都有各自的Session，服务器之间各自的Session是不可见的、不可共享的</p><ul><li><p><strong>服务器集群不能共享Session信息会造成哪些问题</strong>？</p></li><li><p>服务器集群之间无法实现会话状态的共享。比如：在用户已经完成了登录，A服务器中的Session中存储了用户的信息，能够判断用户已登录，但是在B服务器的Session中没有用户信息，当请求到达B服务器，将会误判用户未登录</p></li><li><p><strong>如何解决</strong>？</p></li><li><p><strong>方案一</strong>：<strong>Session拷贝</strong>（不推荐）：Tomcat提供了Session拷贝功能，通过配置Tomcat可以实现Session的拷贝，但是这会增加服务器的额外内存开销，同时存在着数据拷贝延迟，存在数据不一致的情况，依然可能会有请求被误判为用户未登录</p></li><li><p><strong>方案二</strong>：<strong>Redis代替Session</strong>（推荐）：**原因：**Redis是独立于各服务器之外的，因此Redis里的数据是所有服务器都可见的，所以使用Redis可以代替Session，以解决分布式集群环境的会话保持的问题</p></li></ul><h3 id="基于-Redis-实现短信验证码登录和会话保持"><a href="#基于-Redis-实现短信验证码登录和会话保持" class="headerlink" title="基于 Redis 实现短信验证码登录和会话保持"></a>基于 Redis 实现短信验证码登录和会话保持</h3><h3 id="短信验证码登录-1"><a href="#短信验证码登录-1" class="headerlink" title="短信验证码登录"></a>短信验证码登录</h3><p><img src="/../images/1746675084606-79fe463d-1efa-415d-9493-ef8be0f58ff7.png" alt="img"></p><p><strong>用 Redis 的用途有二</strong></p><ol><li>在 <strong>&lt;发送短信验证码&gt;</strong> 步骤中 在Redis中保存短信验证码，当**&lt;登录&#x2F;注册&gt;**时 从Redis取出短信验证码与用户提交的参数进行比对</li><li>会话保持 即保存登录状态，同一个客户端发送多条请求时，服务器能够识别出这些请求来自同一用户。在**&lt;登录&#x2F;注册&gt;**时，将用户信息存储到Redis中</li></ol><p><strong>用 Redis 需要考虑三点：1、用什么数据类型      2、key怎么设计   3、是否设置TTL及时间</strong></p><p><strong>短信验证码</strong></p><ul><li>存短信验证码明显用String数据类型</li><li>key的设计要求每个用户都有唯一的key不能冲突，可以使用 “phone:手机号” 作为key</li><li>对于验证码这类数据，一般设置TTL为3min即可，避免大量数据占用内存</li></ul><p><strong>用户信息</strong></p><ul><li><p>存用户信息对象可以选择String或Hash数据类型，存对象时String与Hash的比较：</p></li><li><p>String：以 JSON 字符串的形式保存对象，优点是直观、操作简单，但是 JSON 结构会有一些非必须的内存开销，比如双引号、大括号，内存占用比 Hash 更高，不支持单独对属性字段的修改</p></li><li><p>Hash：以 key—value（field、value）形式保存对象，可以对单个字段进行CRUD，更加灵活</p></li><li><p>选型：如果对内存占用不在乎，且想要直观简单，可以使用String；如果从优化的角度，可以选Hash</p></li><li><p>key的设计可以使用随机token，例如UUID</p></li><li><p>在这里保存用户信息是为了会话保持，所以可以稍微设置长一点，比如1h-6h</p></li></ul><p>**ps：**key 的设计需要根据业务的情况来设置，注意唯一性，需要避免数据覆盖；另外一般都会设置一个业务前缀，方便区分和分组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、判断手机号是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、手机号合法，生成验证码，并保存到Redis中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code,</span><br><span class="line">                                          RedisConstants.LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">// 3、发送验证码</span></span><br><span class="line">    log.info(<span class="string">&quot;验证码:&#123;&#125;&quot;</span>, code);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">// 1、判断手机号是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、判断验证码是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="literal">null</span> || !code.equals(redisCode)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3、判断手机号是否是已存在的用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                            .eq(User::getPhone, phone));</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="comment">// 用户不存在，需要注册</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4、保存用户信息到Redis中,会话保持</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">    <span class="comment">// 将对象中字段全部转成string类型，StringRedisTemplate只能存字符串类型的数据</span></span><br><span class="line">    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">                                                     CopyOptions.create().setIgnoreNullValue(<span class="literal">true</span>).</span><br><span class="line">                                                     setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">    stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">    stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据手机号创建用户并保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setPhone(phone);</span><br><span class="line">    user.setNickName(SystemConstants.USER_NICK_NAME_PREFIX + RandomUtil.randomString(<span class="number">10</span>));</span><br><span class="line">    <span class="built_in">this</span>.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验登录状态-会话保持-1"><a href="#校验登录状态-会话保持-1" class="headerlink" title="校验登录状态 &amp; 会话保持"></a>校验登录状态 &amp; 会话保持</h3><p><img src="/../images/1746675170616-7e80ca85-f3c3-4aa6-bda1-8911f6c85cf5.png" alt="img"></p><p><strong>配置拦截器</strong></p><p>配置拦截器有两个目的：</p><ul><li>一是为了校验用户的登录状态</li><li>二是若用户始终活跃，则保持用户的登录状态，即重置Redis中用户信息(可理解为登录凭证)的TTL</li></ul><p>如果在同一个拦截器中去完成这两个目的是否可行？</p><p>因为并不是所有的请求都需要”校验用户登录状态”，存在一些请求例如首页浏览是不需要校验登录态(不需要用户已登录)的，因此是会存在白名单的，在白名单内的路径是不需要拦截的。假设有一个用户已登录，同时他一直在做一些不需要校验登录态的操作，此时他是活跃的，我们应当保持它的登录状态，但是这些操作是不会被拦截的，所以导致我们没有保持到用户的登录态(即没有重置Redis中用户信息的TTL)。这里就不符合我们的初衷和要求了。所以我们可以设计两个拦截器</p><ul><li>第一个为<strong>拦截一切路径</strong>的<strong>保持用户登录态</strong>的拦截器，拦截一切路径，表示用户在活跃状态，那么重置Redis中的用户信息的TTL，保持用户登录状态。若查询Redis时发现用户信息不存在，那么放行请求。</li><li>第二个为<strong>拦截需要登录态操作</strong>的<strong>校验用户登录态</strong>的拦截器，设置有白名单，使得不需要登录态的操作不会被拦截，而需要登录态的操作，则会校验当前用户是否已登录</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35797418/1746670232899-abb90829-a686-43f3-8ef8-f416efb3f1f5.png" alt="img"></p><p><strong>保持用户的登录状态的拦截器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new出来的对象是无法直接注入IOC容器的（LoginInterceptor是直接new出来的）</span></span><br><span class="line">    <span class="comment">// 所以这里需要再配置类中注入，然后通过构造器传入到当前类中</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、获取token，并判断token是否存在</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// token不存在，说明当前用户未登录，不需要刷新直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、判断用户是否存在</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(tokenKey);</span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在，说明当前用户未登录，不需要刷新直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、用户存在，则将用户信息保存到ThreadLocal中，方便后续逻辑处理，比如：方便获取和使用用户信息，Redis获取用户信息是具有侵入性的</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">// 4、刷新token有效期</span></span><br><span class="line">        stringRedisTemplate.expire(token, LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>登录拦截器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置拦截器，用于判断用户是否登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 判断当前用户是否已登录</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser() == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 当前用户未登录，直接拦截</span></span><br><span class="line">            response.setStatus(HttpStatus.HTTP_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用户存在，直接放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义的拦截器添加到SpringMVC的拦截器表中，使其生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new出来的对象是无法直接注入IOC容器的（LoginInterceptor是直接new出来的）</span></span><br><span class="line">    <span class="comment">// 所以这里需要再配置类中注入，然后通过构造器传入到当前类中</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加登录拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        <span class="comment">// 设置放行请求</span></span><br><span class="line">        .excludePathPatterns(</span><br><span class="line">            <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        ).order(<span class="number">1</span>); <span class="comment">// 优先级默认都是0，值越大优先级越低</span></span><br><span class="line">        <span class="comment">// 添加刷新token的拦截器</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="string">&quot;/**&quot;</span>).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过程-缓存运用-店铺数据查询"><a href="#过程-缓存运用-店铺数据查询" class="headerlink" title="过程 - 缓存运用-店铺数据查询"></a><strong>过程 - 缓存运用</strong>-店铺数据查询</h1><ul><li><strong>什么是缓存？</strong></li></ul><p>缓存就是数据交换的缓冲区（称作Cache），是存贮数据的临时地方，一般读写性能较高。</p><p><strong>缓存的作用</strong></p><ul><li>降低数据库负载</li><li>提高读写效率，降低响应时间</li></ul><p><strong>缓存的成本</strong></p><ul><li>数据一致性成本：数据库与缓存的数据一致性</li><li>代码维护成本：为解决缓存击穿、雪崩、穿透等等问题</li><li>运维成本：保证缓存的高可用，集群模式</li></ul><p><img src="/../images/1746670232878-c7a86cac-1b50-47b0-b60f-3e6fef260ced.png" alt="img"></p><h2 id="根据-id-查询商铺缓存"><a href="#根据-id-查询商铺缓存" class="headerlink" title="根据 id 查询商铺缓存"></a>根据 id 查询商铺缓存</h2><p><img src="/../images/1746670233471-cecf9d2a-8429-499c-84c9-ee4759b71658.png" alt="img"></p><p>为什么要缓存店铺的详细信息？</p><ul><li>店铺的详细信息的变动频率低，使用缓存非常合适，读多写少的场景</li><li>虽然店家可能会修改店铺的详细信息，这就涉及到Redis和MySQL的<strong>数据一致性</strong></li><li>以及解决<strong>缓存常见的三大问题</strong></li><li>这些在后面再详细讲述</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    根据id查询商铺数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1、从Redis中查询店铺数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 2、判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">// 2.1 缓存命中，直接返回店铺数据</span></span><br><span class="line">        shop = JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.2 缓存未命中，从数据库中查询店铺数据</span></span><br><span class="line">    shop = <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、判断数据库是否存在店铺数据</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(shop)) &#123;</span><br><span class="line">        <span class="comment">// 4.1 数据库中不存在，返回失败信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.2 数据库中存在，写入Redis，并返回店铺数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop));</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/1746670233386-779c4eba-a1d3-4166-bd49-bf4c9a8c8401.png" alt="img"></p><h2 id="查询店铺类型"><a href="#查询店铺类型" class="headerlink" title="查询店铺类型"></a>查询店铺类型</h2><p>“店铺类型信息”的变动频率低，使用缓存非常合适，读多写少的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询店铺的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1、从Redis中查询店铺类型</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_TYPE_KEY + UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">shopTypeJSON</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    List&lt;ShopType&gt; typeList = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 2、判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopTypeJSON)) &#123;</span><br><span class="line">        <span class="comment">// 2.1 缓存命中，直接返回缓存数据</span></span><br><span class="line">        typeList = JSONUtil.toList(shopTypeJSON, ShopType.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.1 缓存未命中，查询数据库</span></span><br><span class="line">    typeList = <span class="built_in">this</span>.list(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;ShopType&gt;()</span><br><span class="line">                         .orderByAsc(ShopType::getSort));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、判断数据库中是否存在该数据</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(typeList)) &#123;</span><br><span class="line">        <span class="comment">// 3.1 数据库中不存在该数据，返回失败信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.2 店铺数据存在，写入Redis，并返回查询的数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(typeList),</span><br><span class="line">                                          CACHE_SHOP_TYPE_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(typeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/1746670233558-ebb97a71-0307-4f2a-b218-cd3ad8cdf6d7.png" alt="img"></p><h2 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h2><ul><li><strong>常见的缓存更新策略</strong>：</li></ul><p><img src="/../images/1746670233776-46ed35cf-7326-4950-969f-83001f59706d.png" alt="img"></p><ol><li><strong>超时剔除(TTL)</strong>：给缓存数据添加TTL，到期后 Redis 自动删除缓存。这是一个保证数据一致性的兜底策略。</li><li><strong>主动更新&#x2F;删除</strong>：手动编码实现缓存更新&#x2F;删除，在修改数据库的同时更新&#x2F;删除缓存</li></ol><h2 id="数据一致性的处理"><a href="#数据一致性的处理" class="headerlink" title="数据一致性的处理"></a>数据一致性的处理</h2><p>上一节，我们了解了数据一致性问题，并了解了如何解决数据一致性问题的几种常见策略，最终经过我们的讨论得出采用使用删除缓存模式来降低线程安全问题发生的概率，采用TTL过期作为兜底方案，同时将缓存和数据库的操作放到同一个事务来保障操作的原子性 (单体项目)</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35797418/1746670233768-e9772f23-262d-48c2-ad5f-eb09c0d68837.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商铺数据（查询时，重建缓存）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1、从Redis中查询店铺数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 2、判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">// 2.1 缓存命中，直接返回店铺数据</span></span><br><span class="line">        shop = JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.2 缓存未命中，从数据库中查询店铺数据</span></span><br><span class="line">    shop = <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、判断数据库是否存在店铺数据</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(shop)) &#123;</span><br><span class="line">        <span class="comment">// 4.1 数据库中不存在，返回失败信息</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.2 数据库中存在，重建缓存，并返回店铺数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新商铺数据（更新时，更新数据库，删除缓存）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="comment">// 1、更新数据库中的店铺数据</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">// 2、删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存穿透的解决方案"><a href="#缓存穿透的解决方案" class="headerlink" title="缓存穿透的解决方案"></a>缓存穿透的解决方案</h2><p>缓存穿透关键在一个透字，透过去了，即客户端请求的<strong>数据在 Redis 缓存和数据库中都不存在</strong></p><p>这样缓存永远不会生效，请求都会打到数据库。</p><p><img src="/../images/1746670233977-8a60870c-8a04-4b9a-85a2-243895ebc0ce.png" alt="img"></p><ul><li><p><strong>常见解决缓存穿透的解决方案</strong>：</p></li><li><p><strong>缓存空值</strong></p></li><li><p>优点：实现简单；维护方便</p></li><li><p>缺点：额外的内存消耗；可能造成短期的不一致</p></li><li><p><strong>布隆过滤器</strong></p></li><li><p>优点：内存占用较少，没有多余key</p></li><li><p>缺点：实现复杂；存在误判可能；无法删除数据</p></li><li><p><strong>预防</strong>：增强id的复杂度，避免被猜测id规律。做好入参数据的格式校验</p></li></ul><p><img src="/../images/1746670234079-bc68e439-3882-4d00-a015-a95b5b11f1b6.png" alt="img"></p><p><strong>视频中使用 “缓存空值” 解决缓存穿透问题</strong></p><p><img src="/../images/1746670234370-3f5bd7ec-1032-450d-8f8e-1a44001b53dd.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商铺数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1、从Redis中查询店铺数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 2、判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">// 2.1 缓存命中，直接返回店铺数据</span></span><br><span class="line">        shop = JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 判断缓存中查询的数据是否是空字符串</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 此时缓存数据为空值</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    shop = <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、判断数据库是否存在店铺数据</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(shop)) &#123;</span><br><span class="line">        <span class="comment">// 4.1 数据库中不存在，缓存空值（解决缓存穿透）</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.2 数据库中存在，重建缓存，并返回店铺数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), </span><br><span class="line">                                      CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次查询数据库中和缓存中不存在的数据，请求经过了数据库，但是缓存了空字符串：</p><p><img src="/../images/1746670234662-9c32ee86-6a52-452a-aa9b-33b01c426207.png" alt="img"></p><p>第二次查询（短期内），发先请求未经过数据库，通过Debug的方式可以发现请求直接再 <strong>2.2.1</strong> 处返回了</p><p><img src="/../images/1746670234853-4f14f036-eebf-44fe-a0ee-40ba32bd6f5e.png" alt="img"></p><h2 id="缓存雪崩的解决方案"><a href="#缓存雪崩的解决方案" class="headerlink" title="缓存雪崩的解决方案"></a>缓存雪崩的解决方案</h2><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p><img src="/../images/1746670234886-789ad188-e0d8-4f53-af06-06b515b83136.png" alt="img"></p><ul><li><p><strong>缓存雪崩的常见解决方案</strong>：</p></li><li><p><strong>给不同的Key的TTL添加随机值</strong></p></li><li><p><strong>利用Redis集群提高服务的可用性</strong></p></li><li><p><strong>给缓存业务添加降级限流策略</strong>，让请求尽可能打不到数据库上</p></li><li><p><strong>给业务添加多级缓存</strong></p></li></ul><h2 id="缓存击穿的解决方案"><a href="#缓存击穿的解决方案" class="headerlink" title="缓存击穿的解决方案"></a>缓存击穿的解决方案</h2><p><strong>缓存击穿问题也叫热点Key问题</strong>，就是一个<strong>被高并发访问</strong>并且<strong>缓存重建业务较复杂</strong>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p><img src="/../images/1746670234948-611b9303-4cd8-4f0f-af67-6f75d2eaf0a0.png" alt="img"></p><ul><li><strong>缓存击穿的常见解决方案</strong>：</li></ul><p><img src="/../images/1746670235221-bb14ec59-d45a-455d-93fb-839cd42de32f.png" alt="img"></p><h3 id="基于互斥锁解决缓存击穿"><a href="#基于互斥锁解决缓存击穿" class="headerlink" title="基于互斥锁解决缓存击穿"></a>基于互斥锁解决缓存击穿</h3><p>因为这是一个热点key，所以会有高并发的请求一直访问，如果失效了，在重建时不加锁，再加上重建耗时较长，那么大量请求都会去重建缓存，就会查数据库，给数据库带来压力，所以要重建缓存，必须加互斥锁。(互斥锁是指多个线程并行的情况下  只能有一个线程加锁成功，其他线程均失败)</p><p>只需要一个线程去重建缓存。其他的线程获取锁失败，则重试直到缓存重建完成。</p><p><img src="/../images/1746670235341-5acddc91-85e3-4282-a961-746b30ad06bf.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1.从Redis中查询店铺数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 2.判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="comment">// 3.缓存命中，直接返回店铺数据</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断缓存中查询的数据是否是空字符串</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.实现缓存重建</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="comment">// 获取锁失败，已有线程在重建缓存，则休眠重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取锁成功，根据id查询数据库</span></span><br><span class="line">        shop = <span class="built_in">this</span>.getById(id);</span><br><span class="line">        <span class="comment">// 模拟重建的延时</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 5. 判断数据库是否存在店铺数据</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(shop)) &#123;</span><br><span class="line">            <span class="comment">// 数据库中不存在，缓存空值（解决缓存穿透）</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 数据库中存在，重建缓存，并返回店铺数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop),</span><br><span class="line">                CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 7. 释放互斥锁</span></span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">// 拆箱要判空，防止NPE</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备注</strong>：</p><ol><li>这里使用Redis中的<code>setnx</code>指令实现互斥锁，只有当值不存在时才能进行<code>set</code>操作</li><li>锁的有效期更具体业务有关，需要灵活变动，一般锁的有效期是业务处理时长10~20倍</li><li>线程获取锁后，最好再次查询缓存（双重检查）</li></ol><p><strong>测试</strong></p><p>通过 Jmeter 进行压测，在<strong>5</strong>秒内发送<strong>2000</strong>个请求（<strong>qps</strong>高达400，也就是每秒钟发送400个请求），异常率0%，<strong>重建缓存时查询数据库只有一次</strong>，证明在高并发的场景下，没有让所有的请求打到数据库</p><p><img src="/../images/1746670235526-894d9fcb-e90f-4da2-a4c2-cb73fe004f03.png" alt="img"></p><h3 id="基于逻辑过期解决缓存击穿"><a href="#基于逻辑过期解决缓存击穿" class="headerlink" title="基于逻辑过期解决缓存击穿"></a>基于逻辑过期解决缓存击穿</h3><p>缓存击穿的原因是Redis的热点key的TTL，如果不给key设置TTL，就可以避免出现缓存击穿，但实际上缓存还是应该有TTL的，所以可以用逻辑过期，在Value中加一个过期时间字段，在获取key时检查过期时间字段是否过期，发现过期则加互斥锁，开启独立线程去重建缓存，本线程暂时返回旧数据。其他线程获取key-&gt;发现过期-&gt;获取互斥锁失败-&gt;暂时返回旧数据</p><p>一般搞活动时，比如抢优惠券，秒杀等场景，请求量比较大就可以使用逻辑过期，等活动一过就手动删除逻辑过期的数据</p><p><img src="/../images/1746670235541-22c6b68f-b198-4fea-94d8-aa9615b484f7.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 逻辑过期解决缓存击穿</span></span><br><span class="line">    <span class="keyword">public</span> Shop <span class="title function_">queryWithLogicExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">// 1、从Redis中查询店铺数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2、判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">// 3.未命中,直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.命中, 判断过期时间, 反序列化</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 5.1.未过期,直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.2.已过期,需要缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1. 获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2. 获取锁成功,开启独立线程，实现缓存重建</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.saveShop2Redis(id, <span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.3. 返回过期的店铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预热：将数据保存到缓存中</span></span><br><span class="line"><span class="comment">     * 重建缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 从数据库中查询店铺数据</span></span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 封装逻辑过期数据</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(shop);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">        <span class="comment">// 将逻辑过期数据存入Redis中</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意：逻辑过期一定要先进行数据预热，将我们热点数据加载到缓存中</p><p>数据预热可以编写一个<code>CommandLineRunner</code>继承类，然后SpringBoot程序启动时就执行启动的<code>run</code>方法，实现数据预热，或者像下面一样编写一个测试累，实现数据预热</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 预热店铺数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveShop</span><span class="params">()</span>&#123;</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">1L</span>, <span class="number">10L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><p>先数据预热，由于预热数据的逻辑过期的时间设置是 10s 钟，所以等待10s 后，Redis中店铺的数据已经是逻辑上过期了，在数据库中修改id为1的店铺数据，使得数据库数据和Redis数据不一致，使用 Jmeter 进行压力测试（可以延迟一下重建缓存的子线程，比如延迟200ms，让效果更加明显），使用1s内100个线程并发请求，可以发现前面的请求获取到的都是旧数据，直到缓存重建完毕 (<strong>查看日志可以发现只有一次重建过程，证明在高并发的场景下，没有让所有的请求打到数据库</strong>)，后面的请求获取到的是新数据。因此会有小段时间的不一致。</p><p><strong>互斥锁</strong>：</p><ul><li>优点：保证一致性；</li><li>缺点：线程需要等待，性能受影响；可能有死锁风险</li></ul><p><strong>逻辑过期</strong>：</p><ul><li>优点：线程无需等待(返回旧数据)，性能较好</li><li>缺点：不保证一致性；</li></ul><p><strong>可用性和一致性的抉择(CAP定理)</strong>：</p><ul><li>互斥锁保证了一致性，牺牲了可用性；</li><li>逻辑过期保证了可用性，而牺牲了一致性。</li></ul><h2 id="缓存工具类的封装"><a href="#缓存工具类的封装" class="headerlink" title="缓存工具类的封装"></a>缓存工具类的封装</h2><p>这一节如果时间紧，可以不用看。</p><p>这里就是 利用泛型 抽取出一个工具类，编写几个通用的方法，解决缓存穿透、缓存击穿</p><p>最终只需要调用工具类的方法来解决这些问题</p><p><img src="/../images/1746670235805-80797d43-e6e3-42e5-9e5c-5fa97a4f9b75.png" alt="img"></p><p><strong>工具类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据加入Redis，并设置有效期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据加入Redis，并设置逻辑过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        <span class="comment">// unit.toSeconds()是为了确保计时单位是秒</span></span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(timeout)));</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), timeout, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存空值解决缓存穿透</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix  key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id         查询id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       查询的数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFallback 根据id查询数据的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout    有效期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit       有效期的时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;ID&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, ID&gt; T <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;T&gt; type,</span></span><br><span class="line"><span class="params">                                            Function&lt;ID, T&gt; dbFallback, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1. 从Redis中查询店铺数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3. 缓存命中，直接返回店铺数据</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 直接返回失败信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 缓存未命中, 根据id查数据库</span></span><br><span class="line">        t = dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断数据库是否存在店铺数据</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(t)) &#123;</span><br><span class="line">            <span class="comment">// 5. 数据库中不存在，缓存空值（解决缓存穿透），返回失败信息</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6. 数据库中存在，重建缓存，并返回店铺数据</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, t, timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存重建线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑过期解决缓存击穿</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPrefix  key前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id         查询id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       查询的数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbFallback 根据id查询数据的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout    有效期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit       有效期的时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;ID&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, ID&gt; T <span class="title function_">queryWithLogicExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;T&gt; type,</span></span><br><span class="line"><span class="params">                                          Function&lt;ID, T&gt; dbFallback, Long timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1、从Redis中查询店铺数据，并判断缓存是否命中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(jsonStr)) &#123;</span><br><span class="line">            <span class="comment">// 1.1 缓存未命中，直接返回失败信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1.2 缓存命中，将JSON字符串反序列化未对象，并判断缓存数据是否逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(jsonStr, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> JSONUtil.toBean(data, type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 当前缓存数据未过期，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、缓存数据已过期，获取互斥锁，并且重建缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            <span class="comment">// 获取锁成功，开启一个子线程去重建缓存</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">T</span> <span class="variable">t1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 将查询到的数据保存到Redis</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, t1, timeout, unit);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、返回过期数据</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 拆箱要判空，防止NPE</span></span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用工具类后，ShopServiceImpl的代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询商铺数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用解决缓存穿透的方法</span></span><br><span class="line">    <span class="comment">// Shop shop = cacheClient.queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class,</span></span><br><span class="line">    <span class="comment">//            this::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span></span><br><span class="line">    <span class="comment">// if (Objects.isNull(shop))&#123;</span></span><br><span class="line">    <span class="comment">//     return Result.fail(&quot;店铺不存在&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 调用解决缓存击穿的方法</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient.queryWithLogicExpire(CACHE_SHOP_KEY, id, Shop.class,</span><br><span class="line">                                             <span class="built_in">this</span>::getById, CACHE_SHOP_TTL, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(shop)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大核心计算-求导数</title>
      <link href="/2025/07/22/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E6%B1%82%E5%AF%BC/"/>
      <url>/2025/07/22/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E6%B1%82%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="导数定义"><a href="#导数定义" class="headerlink" title="导数定义"></a>导数定义</h1><p><img src="/../images/image-20250722213224840.png" alt="image-20250722213224840"></p><blockquote><p>求某一点的导数用定义</p></blockquote><p><img src="/../images/image-20250722213331411.png" alt="image-20250722213331411"></p><p><img src="/../images/image-20250722213358336.png" alt="image-20250722213358336"></p><p><img src="/../images/image-20250722213412990.png" alt="image-20250722213412990"></p><h1 id="各类函数求导"><a href="#各类函数求导" class="headerlink" title="各类函数求导"></a>各类函数求导</h1><p><img src="/../images/image-20250722213442791.png" alt="image-20250722213442791"></p><p><img src="/../images/image-20250722213454847.png" alt="image-20250722213454847"></p><p><img src="/../images/image-20250722213537074.png" alt="image-20250722213537074"></p><p><img src="/../images/image-20250722213546674.png" alt="image-20250722213546674"></p><p><img src="/../images/image-20250722213604773.png" alt="image-20250722213604773"></p><p><img src="/../images/image-20250722213622585.png" alt="image-20250722213622585"></p><p><img src="/../images/image-20250722213637342.png" alt="image-20250722213637342"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大核心计算-不定积分</title>
      <link href="/2025/07/20/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2025/07/20/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="不定积分的概念与基本积分公式"><a href="#不定积分的概念与基本积分公式" class="headerlink" title="不定积分的概念与基本积分公式"></a>不定积分的概念与基本积分公式</h1><p><img src="/../images/image-20250720204948827.png" alt="image-20250720204948827"></p><p><img src="/../images/image-20250720205021016.png" alt="image-20250720205021016"></p><p><img src="/../images/image-20250720205041346.png" alt="image-20250720205041346"></p><blockquote><p>注意1&#x2F;x 积分的绝对值</p></blockquote><p><img src="/../images/image-20250720205238197.png" alt="image-20250720205238197"></p><p><img src="/../images/image-20250720205532032.png" alt="image-20250720205532032"></p><p><img src="/../images/image-20250720205550832.png" alt="image-20250720205550832"></p><p><img src="/../images/image-20250720205602431.png" alt="image-20250720205602431"></p><h1 id="四大积分法"><a href="#四大积分法" class="headerlink" title="四大积分法"></a>四大积分法</h1><p><img src="/../images/image-20250720205742852.png" alt="image-20250720205742852"></p><p><img src="/../images/image-20250720205822345.png" alt="image-20250720205822345"></p><p><img src="/../images/image-20250720205903934.png" alt="image-20250720205903934"></p><p><img src="/../images/image-20250720205939863.png" alt="image-20250720205939863"></p><p><img src="/../images/image-20250720210018880.png" alt="image-20250720210018880"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大核心计算-求极限</title>
      <link href="/2025/07/19/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E6%B1%82%E6%9E%81%E9%99%90/"/>
      <url>/2025/07/19/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E6%B1%82%E6%9E%81%E9%99%90/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="无穷小的比较"><a href="#无穷小的比较" class="headerlink" title="无穷小的比较"></a>无穷小的比较</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><img src="/../images/image-20250719211532642.png" alt="image-20250719211532642"></p><h2 id="常见等价无穷小"><a href="#常见等价无穷小" class="headerlink" title="常见等价无穷小"></a>常见等价无穷小</h2><p><img src="/../images/image-20250719211702428.png" alt="image-20250719211702428"></p><h2 id="等价替换原理"><a href="#等价替换原理" class="headerlink" title="等价替换原理"></a>等价替换原理</h2><p><img src="/../images/image-20250719211807503.png" alt="image-20250719211807503"></p><h2 id="等价无穷小的充要条件"><a href="#等价无穷小的充要条件" class="headerlink" title="等价无穷小的充要条件"></a>等价无穷小的充要条件</h2><p><img src="/../images/image-20250719211855635.png" alt="image-20250719211855635"></p><h1 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h1><h2 id="麦克劳林公式"><a href="#麦克劳林公式" class="headerlink" title="麦克劳林公式"></a>麦克劳林公式</h2><p><img src="/../images/image-20250719212000268.png" alt="image-20250719212000268"></p><h2 id="九个常见的泰勒公式"><a href="#九个常见的泰勒公式" class="headerlink" title="九个常见的泰勒公式"></a>九个常见的泰勒公式</h2><p><img src="/../images/image-20250719212051345.png" alt="image-20250719212051345"></p><h1 id="极限运算法则"><a href="#极限运算法则" class="headerlink" title="极限运算法则"></a>极限运算法则</h1><p><img src="/../images/image-20250719212245777.png" alt="image-20250719212245777"></p><p><img src="/../images/image-20250719212312482.png" alt="image-20250719212312482"></p><p><img src="/../images/image-20250719212921033.png" alt="image-20250719212921033"></p><blockquote><p>注意第三点</p><p>​    <em>x</em>sin(1&#x2F;<em>x</em>)→0，但 <strong>问题在于</strong>：</p><ul><li>当 <em>x</em>→0，<em>x</em>sin(1&#x2F;<em>x</em>) 会<strong>无限次等于 0</strong>（因为 sin(1&#x2F;<em>x</em>)&#x3D;0 时，即 1&#x2F;<em>x</em>&#x3D;<em>kπ</em>⇒<em>x</em>&#x3D;<em>kπ</em>1）。</li><li>当 <em>x</em>&#x3D;<em>kπ</em>1 时，分母 <em>x</em>sin(1&#x2F;<em>x</em>)&#x3D;0，导致整个表达式 <strong>无定义</strong>（分母为 0）。</li><li>因此，函数在 <em>x</em>→0 的过程中 <strong>无限次“断点”</strong>，无法连续趋近于某个值。</li><li>即使 <em>x</em>sin(1&#x2F;<em>x</em>)→0，但 <strong>由于分母在趋近过程中反复为 0</strong>，导致极限不存在（类似于震荡间断点）。</li></ul></blockquote><h1 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h1><p><img src="/../images/image-20250719213137526.png" alt="image-20250719213137526"></p><blockquote><p>注意第二点      仍是分母为0</p></blockquote><h1 id="函数极限通法"><a href="#函数极限通法" class="headerlink" title="函数极限通法"></a>函数极限通法</h1><h2 id="带入x的值，分析类型"><a href="#带入x的值，分析类型" class="headerlink" title="带入x的值，分析类型"></a>带入x的值，分析类型</h2><p><img src="/../images/image-20250719213333063.png" alt="image-20250719213333063"></p><p><img src="/../images/image-20250719213349426.png" alt="image-20250719213349426"></p><h2 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/image-20250719213443759.png" alt="image-20250719213443759"></h2><h2 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h2><p><img src="/../images/image-20250719213512179.png" alt="image-20250719213512179"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数基础1</title>
      <link href="/2025/07/19/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%801/"/>
      <url>/2025/07/19/%E9%AB%98%E6%95%B0%E5%9F%BA%E7%A1%801/</url>
      
        <content type="html"><![CDATA[<p>第一章</p><span id="more"></span><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数概念及常见函数"><a href="#函数概念及常见函数" class="headerlink" title="函数概念及常见函数"></a>函数概念及常见函数</h2><p><img src="/../images/image-20250719210836646.png" alt="image-20250719210836646"></p><p><img src="/../images/image-20250719210917202.png" alt="image-20250719210917202"></p><p><img src="/../images/image-20250719210949388.png" alt="image-20250719210949388"></p><blockquote><p>注意有反函数的充要条件</p></blockquote><p><img src="/../images/image-20250719211041237.png" alt="image-20250719211041237"></p><blockquote><p>注意（4）</p></blockquote><p><img src="/../images/image-20250719211112154.png" alt="image-20250719211112154"></p><h2 id="函数的性质"><a href="#函数的性质" class="headerlink" title="函数的性质"></a>函数的性质</h2><p>1.单调性</p><p>2.奇偶性</p><p><img src="/../images/image-20250720195354621.png" alt="image-20250720195354621"></p><p><img src="/../images/image-20250720195410910.png" alt="image-20250720195410910"></p><blockquote><p>注意有理化算法</p></blockquote><p>3.周期性</p><p><img src="/../images/image-20250720195457544.png" alt="image-20250720195457544"></p><blockquote><p>注意（1）（2）</p></blockquote><p>4.有界性</p><p><img src="/../images/image-20250720195551199.png" alt="image-20250720195551199"></p><p>复合函数</p><p><img src="/../images/image-20250720195638747.png" alt="image-20250720195638747"></p><h1 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h1><h2 id="极限的概念（重点）"><a href="#极限的概念（重点）" class="headerlink" title="极限的概念（重点）"></a>极限的概念（重点）</h2><h3 id="数列的极限"><a href="#数列的极限" class="headerlink" title="数列的极限"></a>数列的极限</h3><p><img src="/../images/image-20250721205544573.png" alt="image-20250721205544573"></p><blockquote><p>积累（-1）^n 这类震荡函数极限</p></blockquote><p><img src="/../images/image-20250721205830464.png" alt="image-20250721205830464"></p><p><img src="/../images/image-20250721205836696.png" alt="image-20250721205836696"></p><blockquote><p>积累四个解法</p></blockquote><p><img src="/../images/image-20250721205932298.png" alt="image-20250721205932298"></p><h3 id="函数的极限"><a href="#函数的极限" class="headerlink" title="函数的极限"></a>函数的极限</h3><p><img src="/../images/image-20250721210230134.png" alt="image-20250721210230134"></p><p><img src="/../images/image-20250721210346357.png" alt="image-20250721210346357"></p><blockquote><p>x  !&#x3D; x0</p></blockquote><p><img src="/../images/image-20250721210508622.png" alt="image-20250721210508622"></p><p><img src="/../images/image-20250721210525662.png" alt="image-20250721210525662"></p><p><img src="/../images/image-20250721210606185.png" alt="image-20250721210606185"></p><h2 id="极限性质"><a href="#极限性质" class="headerlink" title="极限性质"></a>极限性质</h2><h3 id="有界性"><a href="#有界性" class="headerlink" title="有界性"></a>有界性</h3><h3 id="保号性（重点理解）"><a href="#保号性（重点理解）" class="headerlink" title="保号性（重点理解）"></a>保号性（重点理解）</h3><p><img src="/../images/image-20250722203536967.png" alt="image-20250722203536967"></p><p><img src="/../images/image-20250722203548975.png" alt="image-20250722203548975"></p><blockquote><p>注意各个（2）的等号必须带</p></blockquote><p><img src="/../images/image-20250722204224332.png" alt="image-20250722204224332"></p><blockquote><p>分母趋近于0 要使得极限存在 分子是趋近0 不是等于0</p></blockquote><p><img src="/../images/image-20250722204345983.png" alt="image-20250722204345983"></p><blockquote><p>注意排除法的应用 一般函数就是没有具体说明函数     通过找一个具体函数运用排除法</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/image-20250722204517902.png" alt="image-20250722204517902"></h2><h2 id="极限存在准则（重点）"><a href="#极限存在准则（重点）" class="headerlink" title="极限存在准则（重点）"></a>极限存在准则（重点）</h2><p><img src="/../images/image-20250722204550901.png" alt="image-20250722204550901"></p><p><img src="/../images/image-20250722204605036.png" alt="image-20250722204605036"></p><blockquote><p>学会怎么取边界函数</p></blockquote><p><img src="/../images/image-20250722204810562.png" alt="image-20250722204810562"></p><blockquote><p>记住取整函数这个不等式</p></blockquote><p><img src="/../images/image-20250722204908079.png" alt="image-20250722204908079"></p><blockquote><p>学习这个取夹逼的方法</p></blockquote><p><img src="/../images/image-20250722205006472.png" alt="image-20250722205006472"></p><blockquote><p>数列求得相邻两项关系  根据单调性 有界 证明这个函数有极限  设原式极限 根据等式取极限 算出来  </p></blockquote><h2 id="无穷小量"><a href="#无穷小量" class="headerlink" title="无穷小量"></a>无穷小量</h2><p><img src="/../images/image-20250723212653890.png" alt="image-20250723212653890"></p><p><img src="/../images/image-20250723212724166.png" alt="image-20250723212724166"></p><h2 id="无穷大量"><a href="#无穷大量" class="headerlink" title="无穷大量"></a>无穷大量</h2><p><img src="/../images/image-20250723212740687.png" alt="image-20250723212740687"></p><p><img src="/../images/image-20250723212749222.png" alt="image-20250723212749222"></p><blockquote><p>注意</p></blockquote><p><img src="/../images/image-20250723212802702.png" alt="image-20250723212802702"></p><p><img src="/../images/image-20250723212811380.png" alt="image-20250723212811380"></p><blockquote><p>学会区分无穷大量 无界变量</p></blockquote><p><img src="/../images/image-20250723212856629.png" alt="image-20250723212856629"></p><blockquote><p>注意1&#x2F;0 没有意义</p></blockquote><h2 id="典型例题"><a href="#典型例题" class="headerlink" title="典型例题"></a>典型例题</h2><p><img src="/../images/image-20250723212952639.png" alt="image-20250723212952639"></p><p><img src="/../images/image-20250723213007445.png" alt="image-20250723213007445"></p><p><img src="/../images/image-20250723213015502.png" alt="image-20250723213015502"></p><blockquote><p>注意这道题</p></blockquote><h1 id="求极限"><a href="#求极限" class="headerlink" title="求极限"></a>求极限</h1><p><img src="/../images/image-20250724204138084.png" alt="image-20250724204138084"></p><p><img src="/../images/image-20250724204153892.png" alt="image-20250724204153892"></p><blockquote><p>注意抓大头和抓小头的区别</p></blockquote><p><img src="/../images/image-20250724204240598.png" alt="image-20250724204240598"></p><p><img src="/../images/image-20250724204300584.png" alt="image-20250724204300584"></p><blockquote><p>注意加减转换的条件</p></blockquote><p><img src="/../images/image-20250724204504071.png" alt="image-20250724204504071"></p><blockquote><p>根据泰勒记</p></blockquote><p><img src="/../images/image-20250724204648100.png" alt="image-20250724204648100"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四方保险</title>
      <link href="/2025/07/19/%E5%9B%9B%E6%96%B9%E4%BF%9D%E9%99%A9/"/>
      <url>/2025/07/19/%E5%9B%9B%E6%96%B9%E4%BF%9D%E9%99%A9/</url>
      
        <content type="html"><![CDATA[<p><strong>不知道能走多远</strong></p><span id="more"></span><h1 id="第0章-环境搭建"><a href="#第0章-环境搭建" class="headerlink" title="第0章-环境搭建"></a>第0章-环境搭建</h1><p>。。。搞了一上午 无语  （不要开vpn 访问前端 差点放弃）</p><h2 id="导入虚拟机"><a href="#导入虚拟机" class="headerlink" title="导入虚拟机"></a>导入虚拟机</h2><p>设置子网ip 192.168.12.0</p><h2 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br><span class="line"></span><br><span class="line">127.0.0.1 sf.app.itheima.net</span><br><span class="line">127.0.0.1 sf.mgt.itheima.net</span><br></pre></td></tr></table></figure><h2 id="启动前端"><a href="#启动前端" class="headerlink" title="启动前端"></a>启动前端</h2><p>管理端访问地址：<a href="http://sf.mgt.itheima.net/">http://sf.mgt.itheima.net/</a></p><p>默认账号：<a href="mailto:&#x61;&#x64;&#109;&#105;&#110;&#64;&#113;&#113;&#46;&#99;&#x6f;&#109;">admin@qq.com</a>    密码：pass</p><p>app端访问地址：<a href="http://sf.app.itheima.net/#/pages/login/login">http://sf.app.itheima.net/#/pages/login/login</a></p><p>账号：15156403088  密码：123456</p><h1 id="第1章-项目介绍"><a href="#第1章-项目介绍" class="headerlink" title="第1章-项目介绍"></a>第1章-项目介绍</h1><h2 id="背景与趋势"><a href="#背景与趋势" class="headerlink" title="背景与趋势"></a>背景与趋势</h2><p>《四方保险》属于专业互联网保险平台（<strong>保险销售平台</strong>），是一种在线保险销售平台；提供不同保险公司的保险产品销售、试算、投保和支付等功能。这些平台通常涵盖了整个保险业务流程，从产品购买、保单管理到理赔服务，主要作用是提高用户体验、降低交易成本、加强风险**、可以对比多家保险公司的保险产品管理。**</p><p><img src="/../images/image-20250719174030648.png" alt="image-20250719174030648"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tips：互联网保险知多点</span><br><span class="line">2C 表示to customer，即产品是直接面向客户；一般保险公司自己网站直接销售保险产品属于这种类型</span><br><span class="line">2B 表示to branch，即产品是直接面向渠道；比如：中介公司、互联网公司都属于渠道</span><br><span class="line">2A 表示to agent，即保险代理人；代理人自行拉客户</span><br></pre></td></tr></table></figure><p>《四方保险》项目中功能介绍：</p><ul><li>在线购买和投保： 用户可以通过互联网平台方便地浏览、<strong>比较和购买不同保司的各类保险产品</strong>，完成投保流程。</li><li>个性化推荐产品： 平台可能提供根据用户需求定制的保险产品，满足个性化的保险需求。</li><li>数字化保单管理： 用户可以在平台上轻松管理和查看自己的保单信息，包括保单状态、保费支付等。</li><li>在线理赔服务： 提供在线理赔服务，用户可以通过平台提交理赔申请、上传必要的文件和信息，加速理赔流程。</li><li>风险评估和数据分析： 利用大数据和规则引擎技术对用户进行风险评估，提供更精准的保险方案。</li><li>移动端应用支持： 提供移动端应用，方便用户随时随地进行保险业务的管理和操作。</li><li>数字化营销和推广： 利用数字化营销手段，通过社交媒体、搜索引擎等渠道推广保险产品，吸引更多用户。</li><li>合作伙伴关系： 与其他互联网平台、金融机构等建立合作伙伴关系，拓展渠道，提供更全面的保险服务。</li></ul><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>整体架构</p><p><img src="/../images/image-20250719174220567.png" alt="image-20250719174220567"></p><p>**代理服务：**保险平台和保险销售平台通过的nginx、gateway网关</p><p>**路由处理：**gateway网关负责路由通用服务和业务服务，同时做数据埋点和网关权限校验</p><p>**服务治理：**gateway网关、通用服务、业务服务、seata等服务注册和配置都放入nacos中统一管理</p><p>**通用服务：**抽离出加密安全、统一鉴权、消息系统、支付结算、配置存储、数据埋点、数字字典等基础微服务</p><p>**基础支持：**在线文档knife4j、时序数据库influxDB、redisson缓存客户端、xxl-job计划任务、spring-cloud-stream</p><p>**外部服务：**支付宝、微信支付、ocr、三方核保、批单、承保平台</p><h3 id="管理后端的核心流程："><a href="#管理后端的核心流程：" class="headerlink" title="管理后端的核心流程："></a>管理后端的核心流程：</h3><p><img src="/../images/image-20250719174340680.png" alt="image-20250719174340680"></p><h3 id="app端核心流程："><a href="#app端核心流程：" class="headerlink" title="app端核心流程："></a>app端核心流程：</h3><p><img src="/../images/image-20250719174415206.png" alt="image-20250719174415206"></p><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><ul><li>项目介绍&amp;环境搭建</li><li>保险基础数据管理-分析与设计</li><li>保险产品</li><li>产品附件—对象存储</li><li>产品详情-性能优化与数据脱敏</li><li>投保试算-保障类</li><li>投保试算-理财类</li><li>投保处理-投保处理</li><li>支付处理-一次性支付</li><li>支付处理-周期性扣款</li><li>数据埋点</li><li>数据中心——时序数据库</li><li>短信服务</li></ul><h2 id="修复BUG"><a href="#修复BUG" class="headerlink" title="修复BUG"></a>修复BUG</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p> ├── sfbx-cloud                             # 项目模块父工程，统一管理JAR版本和插件内容</p><p> │   ├── sfbx-apache-httpclient       # 远程调用通信框架（第三方、保司接口调用）</p><p> │   ├── sfbx-dict                          # 数字字典：其他功能用到的常用字段维护</p><p> │   ├── sfbx-file                           # 对象存储：支持OSS、七牛云的文件存储服务</p><p> │   ├── sfbx-framework                # 基础支持：缓存、消息中间件、分布式事务、线程池、脱敏、调度等支持</p><p> │   ├── sfbx-gateway                   # 网关路由：销售端、运营端、接口端网关路由</p><p> │   ├── sfbx-insurance                 # 保险业务：四方保险主业务服务包括用户端和管理端</p><p> │   ├── sfbx-points                      # 数据埋点：数据采集、存储、分析</p><p> │   ├── sfbx-rule                         # 规则引擎：规则引擎的UI支持服务</p><p> │   ├── sfbx-security                    # 权限系统：基于oauth2.0的权限管理</p><p> │   ├── sfbx-sms                         # 短信服务：支持阿里云短信、简单短信、腾讯云短信的短信微服务</p><p> │   ├── sfbx-task                         # 计划监听：统一调度响应和监听</p><p> │   ├── sfbx-trade                       # 交易服务：支持支付宝、微信支付的多种场景的支付平台</p><blockquote><p>注意：</p><p>一般正式使用和发布的系统；如果所有的微服务加起来，数据库中的表大概200+</p><p>例如：商城 300 - 500张表； 四方保险类的大概300左右</p></blockquote><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ul><li>在项目模块中；<em>-app的是针对app端的应用服务；</em>-mgt的是针对web后台管理的应用服务；</li><li>项目中带有 <em>-interface的模块是feign客户端放置的模块工程；而应用到的 dto 放置在<code>framework-commons</code>模块中，该模块中的实体类以</em>VO结尾命名；</li><li>有需要使用到其它微服务提供的接口的话就引入对应的 *-interface 即可；</li><li>一般项目中，如 insurance-mgt 的 feign 包内的相当于当前服务中某些业务对外提供的接口功能（不是接口类）；这些对外业务接口处理器的请求路径命名一般为 *-feign</li></ul><p><img src="/../images/image-20250719175202760.png" alt="image-20250719175202760"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>四方保险的项目公共配置项目全部都由nacos管理；所以在每个项目中会有一个 bootstrap.yml 的启动配置文件。这个文件几乎不需要修改，只保留了最基础的内容；而对应项目需要使用到的公共组件或配置都在这个配置文件中引入了，要修改的话需要到nacos的配置中找对应的配置项修改即可。</p><h3 id="复现BUG"><a href="#复现BUG" class="headerlink" title="复现BUG"></a>复现BUG</h3><p>使用浏览器查看其请求地址如下：</p><p><img src="/../images/image-20250719175501566.png" alt="image-20250719175501566"></p><p>按照之前我们的环境部署方案，sf.app.itheima.net 这个域名会被解析到<code>127.0.0.1</code>这个地址，然后被Nginx反向代理到网关微服务。</p><p>而网关则会根据请求路径和路由规则，把请求再路由到具体微服务。这里请求路径以<code>/api/insurance-app</code>开头，对应的微服务是<code>insurance-app</code>，也就是保险app端微服务。</p><p>这样，整个请求链路就比较清楚了：<img src="/../images/image-20250719175533902.png" alt="image-20250719175533902"></p><p>找到了具体的微服务，接下来，我们就进入微服务，查看对应源码，找出问题即可。</p><p>请求到达保险app服务后的路径是<code> ``/insurance-app/mine-home/customer-relation</code>，对应的<code>controller</code>分析问题：</p><ul><li>1、在用户注册的时候；携带的状态为 <code>u</code> 保存到了 <code>sfbx-insurance.tab_customer_relation</code>数据库表中</li><li>2、而查询的时候，回显的时候；前端中对 relation的值为 <code>0</code>才会回显；</li></ul><p>解决方法：</p><p>找到注册时候；保存的业务代码，在前端不配合或者不便于修改的情况下；我们在保存的业务代码中，将 <code>u</code>替换为 <code>0</code> 即可</p><h2 id="数据库建模-Power-Designer"><a href="#数据库建模-Power-Designer" class="headerlink" title="数据库建模-Power Designer"></a>数据库建模-Power Designer</h2><h3 id="概念模型CDM"><a href="#概念模型CDM" class="headerlink" title="概念模型CDM"></a><strong>概念模型CDM</strong></h3><p>用于描述<strong>实体与实体之间的关系的****图形</strong>；</p><p><strong>怎么画</strong>（9字诀）</p><ul><li><p>**1、**<strong>列实体</strong></p></li><li><p>将原型、需求中的那些实体（名词、领域模型）先列出来；在原型中常见的有模块名称、下拉框。</p></li><li><p>例如：产品</p></li><li><p>**2、**<strong>填属性</strong></p></li><li><p>根据原型、需求文档中对于上述列出的实体设置属性；做法就是结合输入和输出的综合。（输入：新增、添加 等按钮之后的页面；输出；列表、详情页）</p></li><li><p><strong>基本</strong>属性：基本的信息；一般是输入框、文本框、日期时间选择框</p></li><li><p><strong>关联</strong>属性：在页面中的下拉框  </p></li><li><p><strong>辅助</strong>属性：状态、创建、更新时间</p></li><li><p>例如：产品（ID，保险代码，名称，类型ID，排序，状态，创建时间…）</p></li><li></li><li><p>**3、**<strong>画关系</strong></p></li><li><p>要将需求中实体之间的关系画出来；常见的关系：</p></li><li><p><strong>一对一</strong></p><p>经常出现在垂直拆表的时候；冷热数据的划分；或者有大字段的表会出现辅助表保存，辅助表与主表的关系就是一对一。如：商品表与商品详情表</p></li><li><p>两个实体共用一个主键</p></li><li><p><strong>一对多（多对一）</strong></p><p>经常出现在有主外键关系的实体之间；页面中出现下拉框（动态变化的话）的时候就是有这种关系。</p></li><li><p>例如：一个保险分类可以有多个保险产品；但是一个产品只属于某个分类 &#x3D;&#x3D;&#x3D;&#x3D;》 一对多 (1:n)</p></li><li><p>例如：一个车主可以有多辆车；一辆车只属于某个车主  &#x3D;&#x3D;&#x3D;》 1:n</p></li><li><p><strong>多对多</strong></p><p>在业务中，有业务交叉但是相互都有关联的时候；可以思考。可以如下的方式验证：</p><p>正推反推都是一对多 &#x3D;》 双向一对多 &#x3D;》多对多</p><p>例如：</p><p> 用户与角色</p></li><li><p>一个用户可以有多个角色；——》一对多</p></li><li><p>一个角色可以被多个人使用  ——》一对多</p><p> ——》多对多</p></li></ul><h3 id="物理模型PDM"><a href="#物理模型PDM" class="headerlink" title="物理模型PDM"></a>物理模型PDM</h3><p>可以通过物理模型PDM<strong>直接创建整个数据库的表及其关系</strong>。是一个<strong>描述表与表之间关系的图形</strong>。</p><h3 id="PD画图"><a href="#PD画图" class="headerlink" title="PD画图"></a>PD画图</h3><p><img src="/../images/image-20250719180156340.png" alt="image-20250719180156340"></p><p><img src="/../images/image-20250719180205906.png" alt="image-20250719180205906"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很重要 不然之后用不了某些功能</span><br></pre></td></tr></table></figure><p>设置概念模型中可以使用同一个字段名字：</p><p><img src="/../images/image-20250719180257359.png" alt="image-20250719180257359"></p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>概念模型</p><p><img src="/../images/image-20250719180331933.png" alt="image-20250719180331933"></p><p>物理模型</p><p><img src="/../images/image-20250719180350071.png" alt="image-20250719180350071"></p><h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p><img src="/../images/image-20250719180410715.png" alt="image-20250719180410715"></p><p><strong>思考</strong>：数据库表范式</p><p>越符合范式则说明连接的表越多，查询效率就相应的低</p><p>并不是范式越高性能越好的；而且一般反范式反而数据库表查询性能好</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>分析：筛选、保障项、系数、分类这四类数据的关系。</p><p>保险-基础数据。通过基础数据功能的学习我们主要解决下列问题：</p><ul><li>什么是基础数据，包含哪些，分表有什么作用？</li><li>基础数据的表结构如何设计进行设计？</li><li>分类项与保障项、系数项、筛选项有什么关系？</li></ul><h1 id="第2章-保险基础数据-设计与开发"><a href="#第2章-保险基础数据-设计与开发" class="headerlink" title="第2章-保险基础数据-设计与开发"></a>第2章-保险基础数据-设计与开发</h1><h2 id="基础数据介绍"><a href="#基础数据介绍" class="headerlink" title="基础数据介绍"></a>基础数据介绍</h2><ul><li>**保障项：**通常是指在购买保险时所包含的具体风险或事件，以及在这些风险或事件发生时，保险公司愿意提供的经济赔偿或保障。不同类型的保险产品涵盖不同的保障项</li><li>**系数项：**通常是指一系列用于计算保险费率的因子或系数。这些因子可以包括被保险人的年龄、性别、健康状况、驾驶记录、保险类型、地理位置等，它们会影响最终的保险费率计算。</li><li>**筛选项：**通常是指一系列因素和选项，需要根据你的具体需求和情况来考虑，来选择自己需要的保险服务。</li><li>**分类项：**通常是指保险根据不同的标准和覆盖范围进行的分类，不同的分类涵盖的方面不同，此处我们主要讨论下列几类保险：医疗、重疾、意外、养老金、旅游等分类；</li></ul><p><img src="/../images/image-20250720172305671.png" alt="image-20250720172305671"></p><p>从上述概念模型可以看出；分类与三类基础数据都有关系；与它们的关系为：</p><ul><li>一个分类下可以有多个保障项，一个保障项也可以对应不同的分类；</li></ul><blockquote><p>分类与保障项的关系为：多对多</p></blockquote><ul><li>一个分类下可以有多个系数项，一个系数项也可以对应不同的分类；</li></ul><blockquote><p>分类与系数项的关系为：多对多</p></blockquote><ul><li>一个分类下可以有多个筛选项，一个筛选项也可以对应不同的分类；</li></ul><blockquote><p>分类与筛选项的关系为：多对多</p></blockquote><h2 id="保障项-保险保障范围"><a href="#保障项-保险保障范围" class="headerlink" title="保障项-保险保障范围"></a>保障项-保险保障范围</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250720172346084.png" alt="image-20250720172346084"></p><p><strong>保障项分类</strong>：并不是保险产品分类，只有规则和信息两个下拉选项；如果以后遇到产品原型也是类似的，这信息在2个选项以内的话；一般可以写常量或者写死（不需要对这些选项做管理）</p><p><strong>保障项值</strong>：可以设置多个不同的内容（值名称，值，分数）</p><p>① 可以将这些存到一个子表  —-》比较清楚；但是缺点就是以后查询关联比较麻烦</p><p>② 可以设计一个字段存储保障项值，这个值的类型为json —》比较灵活；尤其是这些内容是在前端展示和使用的，返回给前端的话也方便操作 —-》以后遇到类似的原型和设计，可以采用此方法</p><p>而在app端点击产品查看详情时，也能够看到这些保障项的使用：</p><p> <img src="/../images/image-20250720172417303.png" alt="image-20250720172417303"></p><p><strong>功能方面</strong>：分页搜索、新建、删除、编辑（前端加载数据，不需要后端实现）、保存编辑、启用&#x2F;禁用、功能栏的全部&#x2F;启用&#x2F;禁用(前端未实现；但也是分页查询)；也就是要实现的功能总共<strong>5</strong>个。</p><p><strong>数据方面</strong>：只是保存编辑页面中的数据、主键、列表中需要的创建时间等。</p><h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>按照需求分析中的思路；只需要设计一张表 <code>sfbx-insurance.保障项表tab_safeguard</code> 具体表结构如下：</p><p><img src="/../images/image-20250720172508275.png" alt="image-20250720172508275"></p><p>保障项值；在数据库中存储一个json字符串；json的格式参考如下：</p><p> [{“name”:“共享400万”,”val”:”4000000”,“score”:”1”},{“name”:“共享300万”,”val”:”3000000”,“score”:”2”}]</p><h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><ul><li><strong>方式一</strong>：后端结合原型界面，和自己设计的数据库表；先自己设计，然后再与前端确认。在我们项目中，项目已存在，接口被固定；暂时不太适用。</li><li><strong>方式二</strong>：在<code>1-2</code>的项目中；接口已经确定，前端也已经使用接口在开发或者前端已经完成；那么作为后端就只需要去追踪出来对应业务模块的接口信息即可；这是更省事的做法。而四方保险属于这种情况。接下来；咱们梳理出来对应分析出来的<strong>5</strong>个接口信息：</li></ul><blockquote><p>后续实现看代码</p></blockquote><h2 id="系数项-保险保费定价"><a href="#系数项-保险保费定价" class="headerlink" title="系数项-保险保费定价"></a>系数项-保险保费定价</h2><h3 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250720172844851.png" alt="image-20250720172844851"></p><p>而在app端点击产品查看详情时，也能够看到这些系数项的使用：</p><p><img src="/../images/image-20250720172912367.png" alt="image-20250720172912367"></p><p><strong>功能方面</strong>：分页搜索、新建、删除、编辑（前端加载数据，不需要后端实现）、保存编辑、启用&#x2F;禁用、功能栏的全部&#x2F;启用&#x2F;禁用(前端未实现；但也是分页查询)；也就是要实现的功能总共<strong>5</strong>个。</p><p><strong>数据方面</strong>：只是保存编辑页面中的数据、主键、列表中需要的创建时间等。</p><h3 id="数据库表设计-1"><a href="#数据库表设计-1" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p><img src="/../images/image-20250720172930081.png" alt="image-20250720172930081"></p><blockquote><p>系数项值；在数据库中存储一个json字符串；json的格式参考如下：</p><p>[{“name”:“10年”,”val”:”10”,“calculatedVal”:”10”},{“name”:“20年”,”val”:”20”,“calculatedVal”:”20”}]</p></blockquote><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><blockquote><p>后续实现看代码</p></blockquote><h2 id="筛选项-查找保险产品"><a href="#筛选项-查找保险产品" class="headerlink" title="筛选项-查找保险产品"></a>筛选项-查找保险产品</h2><h3 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250720173036227.png" alt="image-20250720173036227"></p><p><img src="/../images/image-20250720173043782.png" alt="image-20250720173043782"></p><p>而在app端点击产品查看详情时，也能够看到这些筛选项的使用：</p><p><img src="/../images/image-20250720173055377.png" alt="image-20250720173055377"></p><h3 id="数据库表设计-2"><a href="#数据库表设计-2" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p><img src="/../images/image-20250720173109976.png" alt="image-20250720173109976"></p><blockquote><p>筛选项值；在数据库中存储一个json字符串；json的格式参考如下：</p><p> [{“name”:“有其他慢性病”,”val”:”MXB”},{“name”:“健康”,”val”:”JK”}]</p></blockquote><h3 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h3><blockquote><p>后续实现看代码</p></blockquote><h2 id="保险分类-保险产品归属-重点"><a href="#保险分类-保险产品归属-重点" class="headerlink" title="保险分类-保险产品归属(重点)"></a>保险分类-保险产品归属(重点)</h2><h3 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250720173334797.png" alt="image-20250720173334797"></p><blockquote><p>上述的 关联系数 只能关联到叶子节点上；比如：储蓄 是 3级分类，它还有 财富年金、教育金两个叶子节点；它自己是不能关联系数等   的。 但是 财富年金 是叶子节点则可以关联系数</p></blockquote><p><img src="/../images/image-20250720173401642.png" alt="image-20250720173401642"></p><h3 id="数据库表设计-3"><a href="#数据库表设计-3" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p><img src="/../images/image-20250720173415560.png" alt="image-20250720173415560"></p><p><img src="/../images/image-20250720173439603.png" alt="image-20250720173439603"></p><p>一个分类可以对应管理多个不同的保障项 &#x3D;&#x3D;&#x3D;》一对多</p><p>一个保障项可以被不同的分类关联 &#x3D;&#x3D;&#x3D;》一对多</p><p>双向一对多；<strong>说明分类与保障项的关系为：多对多</strong> &#x3D;&#x3D;&#x3D;》需要设计中间表<code>tab_category_safeguard</code>来保存 分类与保障的关系 </p><h3 id="接口设计和开发实现"><a href="#接口设计和开发实现" class="headerlink" title="接口设计和开发实现"></a>接口设计和开发实现</h3><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>在分类的分页查询中，与前面的几个分页查询稍微有不同，它有保障项、系数项、筛选项的关联关系并且需要在查询时候<strong>一次性全部查询出来</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(value = CategoryCacheConstant.PAGE,key =&quot;#pageNum+&#x27;-&#x27;+#pageSize+&#x27;-&#x27;+#categoryVO.hashCode()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Page&lt;CategoryVO&gt; <span class="title function_">findPage</span><span class="params">(CategoryVO categoryVO, <span class="type">int</span> pageNum, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//构建分页对象</span></span><br><span class="line">        Page&lt;Category&gt; categoryPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        <span class="comment">//构建查询条件</span></span><br><span class="line">        QueryWrapper&lt;Category&gt; queryWrapper = queryWrapper(categoryVO);</span><br><span class="line">        <span class="comment">//查询分页基本列表数据</span></span><br><span class="line">        Page&lt;Category&gt; page = page(categoryPage, queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (EmptyUtil.isNullOrEmpty(page.getRecords())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换为要返回的VO列表数据</span></span><br><span class="line">        Page&lt;CategoryVO&gt; resultPage = BeanConv.toPage(page, CategoryVO.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分类列表的每个分类编号放置到一个集合set中</span></span><br><span class="line">        Set&lt;String&gt; categoryNoSet = page.getRecords().stream().map(Category::getCategoryNo).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*处理每个分类的保障项:</span></span><br><span class="line"><span class="comment">        ①根据查询到的分类编号查询出分类下的保障项列表；</span></span><br><span class="line"><span class="comment">        ②对保障项列表根据分类分组；</span></span><br><span class="line"><span class="comment">        ③遍历分类列表设置对应的保障项列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;CategorySafeguardVO&gt; categorySafeguardVOs = categorySafeguardService.findListInCategoryNo(categoryNoSet);</span><br><span class="line">        Map&lt;String, List&lt;CategorySafeguardVO&gt;&gt; categorySafeguardVOMap = categorySafeguardVOs.stream().</span><br><span class="line">                collect(Collectors.groupingBy(CategorySafeguardVO::getCategoryNo));</span><br><span class="line">        <span class="keyword">if</span> (!EmptyUtil.isNullOrEmpty(resultPage.getRecords())) &#123;</span><br><span class="line">    resultPage.getRecords().forEach(tmpCategoryVO -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (categorySafeguardVOMap.containsKey(tmpCategoryVO.getCategoryNo())) &#123;</span><br><span class="line">            tmpCategoryVO.setCategorySafeguardVOs(categorySafeguardVOMap.get(tmpCategoryVO.getCategoryNo()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmpCategoryVO.setCategorySafeguardVOs(List.of());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*处理每个分类的系数项:</span></span><br><span class="line"><span class="comment">        ①根据查询到的分类编号查询出分类下的系数项列表；</span></span><br><span class="line"><span class="comment">        ②对系数项列表根据分类分组；</span></span><br><span class="line"><span class="comment">        ③遍历分类列表设置对应的系数项列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;CategoryCoefficentVO&gt; categoryCoefficentVOs = categoryCoefficentService.findListInCategoryNo(categoryNoSet);</span><br><span class="line">        Map&lt;String, List&lt;CategoryCoefficentVO&gt;&gt; categoryCoefficentVOMap = categoryCoefficentVOs.stream().</span><br><span class="line">                collect(Collectors.groupingBy(CategoryCoefficentVO::getCategoryNo));</span><br><span class="line">        <span class="keyword">if</span> (!EmptyUtil.isNullOrEmpty(resultPage.getRecords())) &#123;</span><br><span class="line">    resultPage.getRecords().forEach(tmpCategoryVO -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryCoefficentVOMap.containsKey(tmpCategoryVO.getCategoryNo())) &#123;</span><br><span class="line">            tmpCategoryVO.setCategoryCoefficentVOs(categoryCoefficentVOMap.get(tmpCategoryVO.getCategoryNo()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmpCategoryVO.setCategoryCoefficentVOs(List.of());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">/*处理每个分类的筛选项:</span></span><br><span class="line"><span class="comment">        ①根据查询到的分类编号查询出分类下的筛选项列表；</span></span><br><span class="line"><span class="comment">        ②对筛选项列表根据分类分组；</span></span><br><span class="line"><span class="comment">        ③遍历分类列表设置对应的筛选项列表</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;CategoryConditionVO&gt; categoryConditionVOs = categoryConditionService.findListInCategoryNo(categoryNoSet);</span><br><span class="line">        Map&lt;String, List&lt;CategoryConditionVO&gt;&gt; categoryConditionVOMap = categoryConditionVOs.stream().</span><br><span class="line">                collect(Collectors.groupingBy(CategoryConditionVO::getCategoryNo));</span><br><span class="line">        <span class="keyword">if</span> (!EmptyUtil.isNullOrEmpty(resultPage.getRecords())) &#123;</span><br><span class="line">    resultPage.getRecords().forEach(tmpCategoryVO -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (categoryConditionVOMap.containsKey(tmpCategoryVO.getCategoryNo())) &#123;</span><br><span class="line">            tmpCategoryVO.setCategoryConditionVOs(categoryConditionVOMap.get(tmpCategoryVO.getCategoryNo()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmpCategoryVO.setCategoryConditionVOs(List.of());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> resultPage;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;保险分类分页查询异常：&#123;&#125;&quot;</span>, ExceptionsUtil.getStackTraceAsString(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProjectException</span>(CategoryEnum.PAGE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改–关联关系"><a href="#修改–关联关系" class="headerlink" title="修改–关联关系"></a>修改–关联关系</h4><p>完善加载保障项列表</p><p>保存 分类和关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Caching(evict = &#123;@CacheEvict(value = CategoryCacheConstant.PAGE,allEntries = true),</span></span><br><span class="line"><span class="meta">    @CacheEvict(value = CategoryCacheConstant.LIST,allEntries = true),</span></span><br><span class="line"><span class="meta">    @CacheEvict(value = CategoryCacheConstant.BASIC,key = &quot;#categoryVO.id&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(CategoryVO categoryVO)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、保存分类基本信息</span></span><br><span class="line">        <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> BeanConv.toBean(categoryVO, Category.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> updateById(category);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、保存分类保障项信息</span></span><br><span class="line">        <span class="comment">//2.1、删除分类保障项：根据分类编号删除分类保障项</span></span><br><span class="line">        categorySafeguardService.deleteByCategoryNo(category.getCategoryNo());</span><br><span class="line">        <span class="comment">//2.2、保存分类保障项：保存每个分类保障项需要设置分类编号</span></span><br><span class="line">        List&lt;CategorySafeguard&gt; categorySafeguardList = categoryVO.getCategorySafeguardVOs().stream().map(tmpCategorySafeguardVO -&gt; &#123;</span><br><span class="line">            tmpCategorySafeguardVO.setCategoryNo(category.getCategoryNo());</span><br><span class="line">            <span class="keyword">return</span> BeanConv.toBean(tmpCategorySafeguardVO, CategorySafeguard.class);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        categorySafeguardService.saveBatch(categorySafeguardList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、保存分类系数项信息</span></span><br><span class="line">        <span class="comment">//3.1、删除分类系数项：根据分类编号删除分类系数项</span></span><br><span class="line">        categoryCoefficentService.deleteByCategoryNo(category.getCategoryNo());</span><br><span class="line">        <span class="comment">//3.2、保存分类系数项：保存每个分类系数项需要设置分类编号</span></span><br><span class="line">        List&lt;CategoryCoefficent&gt; categoryCoefficentList = categoryVO.getCategoryCoefficentVOs().stream().map(tmpCategoryCoefficentVO -&gt; &#123;</span><br><span class="line">            tmpCategoryCoefficentVO.setCategoryNo(category.getCategoryNo());</span><br><span class="line">            <span class="keyword">return</span> BeanConv.toBean(tmpCategoryCoefficentVO, CategoryCoefficent.class);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        categoryCoefficentService.saveBatch(categoryCoefficentList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、保存分类筛选项信息</span></span><br><span class="line">        <span class="comment">//4.1、删除分类筛选项：根据分类编号删除分类筛选项</span></span><br><span class="line">        categoryConditionService.deleteByCategoryNo(category.getCategoryNo());</span><br><span class="line">        <span class="comment">//4.2、保存分类筛选项：保存每个分类筛选项需要设置分类编号</span></span><br><span class="line">        List&lt;CategoryCondition&gt; categoryConditionList = categoryVO.getCategoryConditionVOs().stream().map(tmpCategoryConditionVO -&gt; &#123;</span><br><span class="line">            tmpCategoryConditionVO.setCategoryNo(category.getCategoryNo());</span><br><span class="line">            <span class="keyword">return</span> BeanConv.toBean(tmpCategoryConditionVO, CategoryCondition.class);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        categoryConditionService.saveBatch(categoryConditionList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;修改保险分类异常：&#123;&#125;&quot;</span>, ExceptionsUtil.getStackTraceAsString(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProjectException</span>(CategoryEnum.UPDATE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p><strong>说出常见保险保障项</strong></p><ul><li>一般医疗保险金</li><li>特定疾病医疗保险金</li><li>重大疾病医疗保险金</li><li>重大疾病关爱保险金</li><li>特定药品费用医疗保险金</li><li>门诊挂号及陪诊、100种重大疾病津贴保险金</li><li>押金垫付、癌症质子重离子放疗、恶性肿瘤特效药、就医绿色通道、医疗费用垫付</li></ul></li><li><p><strong>常见系数项</strong></p><ul><li>有无医保</li><li>投入方式</li><li>付款方式</li><li>年龄范围</li><li>保障期限</li><li>投入时长</li><li>保障金额</li><li>自动续保</li><li>投入周期</li><li>什么时候开始领</li><li>领取多久</li><li>领取周期</li></ul></li><li><p><strong>常见筛选项</strong></p><ul><li>为谁买</li><li>健康状况</li><li>特色保障</li><li>特色服务</li><li>保多久</li><li>交通工具</li></ul></li><li><p><strong>常见分类</strong></p></li></ul><p>医疗险、重疾险、意外（出行、运动）、旅游（境内、境外）、人寿（终身、定期、双全）、年金（养老、教育、财富）</p><p>1️⃣ 工作时的开发流程（一句话版本）</p><p>需求评审 → 领域建模 → 库表&#x2F;接口设计 → 编码（TDD）→ 自测 &amp; Sonar 扫 → 提 MR → Code Review → 联调 → 灰度 → 监控 → 复盘。</p><p>2️⃣ 日常开发软件工具</p><p>表格</p><p>复制</p><table><thead><tr><th align="left">分类</th><th align="left">工具</th></tr></thead><tbody><tr><td align="left">IDE</td><td align="left">IntelliJ IDEA（热部署、MyBatisX、Rainbow Brackets）</td></tr><tr><td align="left">依赖&amp;构建</td><td align="left">Maven + Git + GitLab</td></tr><tr><td align="left">数据库</td><td align="left">Navicat &#x2F; DataGrip + MySQL 8 + MyBatis-Plus</td></tr><tr><td align="left">缓存 &amp; 搜索</td><td align="left">RedisInsight + Elasticsearch-head</td></tr><tr><td align="left">测试</td><td align="left">Postman + Swagger + JMeter + JUnit5</td></tr><tr><td align="left">运维 &amp; 监控</td><td align="left">Docker + Jenkins + ELK + Prometheus + Grafana</td></tr><tr><td align="left">协作</td><td align="left">Lark（飞书）+ XMind（思维导图）+ ProcessOn（ER 图）</td></tr></tbody></table><p>3️⃣ 最复杂的业务：保险中台</p><ul><li><strong>表数量</strong>：核心 8 张 + 扩展 5 张 &#x3D; <strong>13 张</strong></li><li><strong>关联最多</strong>的 8 张表：<ol><li>insurance_product（产品基础信息）</li><li>insurance_plan（方案快照）</li><li>insurance_factor（系数维度）</li><li>product_factor_rel（产品与系数多对多）</li><li>insurance_order（投保订单）</li><li>insurance_policy（保单）</li><li>insurance_attachment（附件）</li><li>insurance_filter（筛选项元数据）</li></ol></li><li><strong>字段最多</strong>的表：<code>insurance_product</code> <strong>52 个字段</strong>（含 JSON 扩展字段 <code>extra_attrs</code>）。</li></ul><p>4️⃣ 复杂表的设计与优化经验（可逐条展开）</p><ol><li><strong>拆表</strong>：把 52 列按冷热拆分——常用 20 列留在主表，其余 32 列放 <code>product_ext</code>（垂直拆分）。</li><li><strong>范式 + 反范式</strong><ul><li>核心遵循 3NF，减少冗余；</li><li>在 <code>insurance_order</code> 里冗余 plan_snapshot JSON，减少联表。</li></ul></li><li><strong>枚举字典统一</strong><ul><li>所有状态字段用 <code>tinyint + enum 类</code>，避免魔法值。</li></ul></li><li><strong>索引策略</strong><ul><li>联合索引 <code>(product_id, status, channel)</code> 覆盖 90% 查询；</li><li>枚举字段放在联合索引最右，防止索引失效。</li></ul></li><li><strong>大字段隔离</strong><ul><li>附件二进制放 OSS，表只存 URL 和 MD5，避免行溢出。</li></ul></li><li><strong>分库分表预案</strong><ul><li>按 <code>order_no</code> 雪花 ID 做 <strong>hash 分片</strong> 逻辑写在 MyBatis-Plus 插件，目前单表 5000 万行仍保持毫秒级。</li></ul></li><li><strong>缓存一致性</strong><ul><li>更新产品时用 <code>@CacheEvict(allEntries=true)</code> + 延迟双删，防止并发脏读。</li></ul></li><li><strong>ER 图 &amp; 数据字典</strong><ul><li>每次迭代先用 <strong>ProcessOn</strong> 画 ER 图 → 评审 → 生成 <strong>Markdown 字典</strong> 随代码入库，方便新人快速上手。</li></ul></li></ol><p>✅ 一句话总结背熟</p><blockquote><p>“保险中台 13 张表、52 列主表，我用垂直拆分+联合索引+延迟双删+字典统一，把复杂关系降到可控，至今 5000 万行查询毫秒级。”</p></blockquote><ul><li><strong>简历职责-候选</strong>：优化保险管理后端中分类列表查询的查询效率；将分类、系数、保障项、筛选项等7张表的连接查询从335ms优化到150ms，查询效率提升超过一倍。</li></ul><h1 id="第3章保险商品"><a href="#第3章保险商品" class="headerlink" title="第3章保险商品"></a>第3章保险商品</h1><h2 id="保险产品业务说明"><a href="#保险产品业务说明" class="headerlink" title="保险产品业务说明"></a><strong>保险产品业务说明</strong></h2><h3 id="保险产品的组成"><a href="#保险产品的组成" class="headerlink" title="保险产品的组成"></a>保险产品的组成</h3><p><img src="/../images/image-20250721141951837.png" alt="image-20250721141951837"></p><p>保险发布：可以发布不同分类的保险产品；保险的发布组成部分包括；</p><ul><li>产品信息</li></ul><p><img src="/../images/image-20250721142120404.png" alt="image-20250721142120404"></p><ul><li>产品方案<ul><li>方案保障项</li><li>方案给付计划（储蓄类、理财类）</li></ul></li></ul><p><img src="/../images/image-20250721142141771.png" alt="image-20250721142141771"></p><ul><li>产品系数项</li></ul><p><img src="/../images/image-20250721142207067.png" alt="image-20250721142207067"></p><ul><li>产品筛选项</li></ul><p><img src="/../images/image-20250721142242980.png" alt="image-20250721142242980"></p><ul><li>产品附件</li></ul><p><img src="/../images/image-20250721142306462.png" alt="image-20250721142306462"></p><p>上述的 保险产品的组成需要基础数据：分类、保障项、系数项、筛选项的支持。</p><p>在页面中有 1&#x2F;2&#x2F;3&#x2F;4&#x2F;5 等分步式的填写表单，逐步逐步的操作，每完成一步之后才能进入下一步，直到引导用户完成整个业务的做法叫做“<strong>分步式表单</strong>”或者“<strong>向导式界面</strong>”。</p><h3 id="业务流程"><a href="#业务流程" class="headerlink" title="业务流程"></a>业务流程</h3><p>保险产品在后台管理中添加了信息之后；需要上架发布；然后用户才可以在app端中筛选、搜索找到产品；找到产品之后在保险详情页面中选择具体的方案，填写系数确定保险的价格，查看合同生成合同订单、支付；完成投保的整个流程。</p><h4 id="界面操作"><a href="#界面操作" class="headerlink" title="界面操作"></a>界面操作</h4><p>在APP端的页面信息：</p><p><img src="/../images/image-20250721142509966.png" alt="image-20250721142509966"></p><p><img src="/../images/image-20250721142524745.png" alt="image-20250721142524745"></p><h4 id="业务流程-1"><a href="#业务流程-1" class="headerlink" title="业务流程"></a>业务流程</h4><p><img src="/../images/image-20250721142557272.png" alt="image-20250721142557272"></p><h4 id="产品组成关系"><a href="#产品组成关系" class="headerlink" title="产品组成关系"></a>产品组成关系</h4><p>作为在后台管理中要完成的 <code>保险产品</code> 它与方案、系数项、筛选项、附件的关系分析如下：</p><ul><li>一个保险产品；可以添加多个<strong>保险方案</strong> &#x3D;&#x3D;&#x3D;》一对多</li><li>一个保险产品；可以配置多个<strong>保险系数项</strong> &#x3D;&#x3D;&#x3D;》 一对多</li><li>一个保险产品；可以配置多个<strong>筛选项</strong> &#x3D;&#x3D;&#x3D;》 一对多</li><li>一个保险产品；可以携带多个<strong>附件</strong> &#x3D;&#x3D;&#x3D;》一对多</li></ul><p>结合系统原型或前端页面；分析得出具体的保险产品以及方案、系数项、筛选项、附件的数据库概念模型如下：</p><p><img src="/../images/image-20250721142726819.png" alt="image-20250721142726819"></p><p>基于上述分析的产品关系；如果要删除一个产品和对应关系；那么语句可以参考如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除保险产品相关内容</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab_insurance_plan <span class="keyword">where</span> insurance_id <span class="operator">=</span> 保险产品id ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab_insurance_coefficent <span class="keyword">where</span> insurance_id <span class="operator">=</span> 保险产品id ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab_insurance_condition <span class="keyword">where</span> insurance_id <span class="operator">=</span> 保险产品id ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab_file <span class="keyword">where</span> business_id <span class="operator">=</span> 保险产品id ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tab_insurance <span class="keyword">where</span> id <span class="operator">=</span> 保险产品id ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除某个保险产品的所有数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 方案保障项 <span class="keyword">where</span> 保险方案ID <span class="keyword">in</span> （<span class="keyword">select</span> 保险方案ID <span class="keyword">from</span> 保险方案 <span class="keyword">where</span>  保险产品ID  <span class="operator">=</span> ？）</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 方案给付 t1, 保险方案 t2 <span class="keyword">where</span> t1.保险方案ID<span class="operator">=</span>t2.保险方案ID <span class="keyword">and</span> 保险产品ID<span class="operator">=</span>?</span><br><span class="line"><span class="comment">-- 方式三 delete from 方案给付 t1 where exists (select * from 保险方案 where 保险方案ID=t1.保险方案ID)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 保险方案  <span class="keyword">where</span> 保险产品ID  <span class="operator">=</span> ？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 保险筛选项  <span class="keyword">where</span> 保险产品ID  <span class="operator">=</span> ？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 保险系数项  <span class="keyword">where</span> 保险产品ID  <span class="operator">=</span> ？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 附件  <span class="keyword">where</span> 业务ID  <span class="operator">=</span> ？</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 保险产品表  <span class="keyword">where</span> 保险ID  <span class="operator">=</span> ？</span><br></pre></td></tr></table></figure><h2 id="产品信息"><a href="#产品信息" class="headerlink" title="产品信息"></a>产品信息</h2><h4 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h4><p><img src="/../images/image-20250721143136924.png" alt="image-20250721143136924"></p><p><img src="/../images/image-20250721143148282.png" alt="image-20250721143148282"></p><table><thead><tr><th align="left">输入项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>保监会备案代码</strong></td><td align="left">在 中国保险监督管理委员会 进行备案的项目或产品的唯一标识代码。这个代码用于标识和查询已经经过保监会审核并备案的保险产品或服务。通过备案代码，公众可以查询到该产品或服务的详细信息，包括其名称、类型、保险公司、备案时间等。 是一串数值字符串，长度32字符内；可以以字符串存储。</td></tr><tr><td align="left"><strong>保险名称</strong></td><td align="left">保险产品名称；名称要唯一，可区别</td></tr><tr><td align="left"><strong>排序</strong></td><td align="left">产品排序字段；目前暂未使用</td></tr><tr><td align="left"><strong>分类类型</strong></td><td align="left">保险分类类型；属于二级分类中的分类子类；如：重疾类 ，那么可以选择的就是重疾下的子分类</td></tr><tr><td align="left"><strong>推荐类型</strong></td><td align="left">app中首页中的推荐类型；可以选择：成年人、少儿、老人</td></tr><tr><td align="left"><strong>连续投保年龄</strong></td><td align="left">在保险合同中规定的，被保险人可以连续投保该保险产品的最高年龄限制（在连续投保保险产品时，被保险人所达到的年龄上限）。这个限制是根据被保险人的生理周期、健康状况以及保险公司的风险控制策略来设定的。数值类型</td></tr><tr><td align="left"><strong>运营费率</strong></td><td align="left">保险公司为了维持其日常运营和业务开展所支出的费用占保险费用的一定比例。浮点类型；小数点精确到两位</td></tr><tr><td align="left"><strong>个人代理费率</strong></td><td align="left">指保险公司支付给个人代理人的佣金或费用比例。个人代理人是保险公司的销售人员，他们通过销售保险产品来获取佣金。浮点类型；小数点精确到两位</td></tr><tr><td align="left"><strong>平台代理费率</strong></td><td align="left">指保险公司支付给合作平台或第三方代理机构的费用比例。浮点类型；小数点精确到两位</td></tr><tr><td align="left"><strong>起始年龄</strong></td><td align="left">开始购买或参加某种保险产品的最低年龄限制。数值类型</td></tr><tr><td align="left"><strong>起始年龄单位</strong></td><td align="left">年或者月；字符类型</td></tr><tr><td align="left"><strong>结束年龄</strong></td><td align="left">可以购买或参加某种保险产品的最高年龄限制。数值类型</td></tr><tr><td align="left"><strong>结束年龄单位</strong></td><td align="left">年或者月；字符类型</td></tr><tr><td align="left"><strong>安心赔</strong></td><td align="left">赔付的帮助方式；是否可以全程在线理赔申请，全程提供协助字符类型；0是，1否</td></tr><tr><td align="left"><strong>犹豫期</strong></td><td align="left">犹豫期（也称为冷静期）是指投保人在收到保险合同后的一段时间内（通常为10天或15天，具体天数可能因地区或产品类型而异），如果对所购买的保险不满意或后悔购买，可以无条件解除保险合同，并申请全额退还已支付的保费。这个期限是为了给投保人一个考虑和评估保险合同的时间。多少天；属于数值类型</td></tr><tr><td align="left"><strong>等待期</strong></td><td align="left">等待期（也称为免责期或观察期）是指从保险合同生效之日起的一段时间内（具体天数因产品类型而异），即使发生保险事故，保险公司也不承担保险责任或只承担部分责任。等待期的目的是为了防止投保人明知道将发生保险事故而立即购买保险以获取保险金的行为。在等待期内，保险公司会观察被保险人的健康状况或风险情况，以确保保险合同的有效性。多少天；属于数值类型</td></tr><tr><td align="left"><strong>关系</strong></td><td align="left">本人、配偶、父母、子女字符类型</td></tr><tr><td align="left"><strong>是否首页展示</strong></td><td align="left">app端业务标识符，是否要在首页展示；目前无用</td></tr><tr><td align="left"><strong>标识1</strong></td><td align="left">在app端详情页面，顶部左边展示的内容标题；**属于变动部分；以后app可能有标识2&#x2F;3&#x2F;4等；所以标识及对应的描述；建议存储json结构；这样可扩展性强；**结构如：[{“key”: “住院报销400万”, “val”: “医保报销后接着赔”}, {“key”: “保证续保20年”, “val”: “理赔停售也不断保”}] 上面的结构中；第一个key就是标识1 ；第一个val就是标识1描述；以此类推</td></tr><tr><td align="left"><strong>标识1描述</strong></td><td align="left">在app端详情页面，顶部左边展示的内容描述</td></tr><tr><td align="left"><strong>标识2</strong></td><td align="left">在app端详情页面，顶部右边展示的内容标题；与标识1一样；与标识1、描述一样；存储在一个json字段中即可；同标识1</td></tr><tr><td align="left"><strong>标识2描述</strong></td><td align="left">同标识1</td></tr><tr><td align="left"><strong>补充说明1</strong></td><td align="left">在app端详情页面；作为补充说明使用，作用和标识是一样的；目前<strong>暂时没有使用到</strong>。其存储与标识1的做法类似；存储结构如：[{“key”: “住院报销400万”, “val”: “医保报销后接着赔”}, {“key”: “保证续保20年”, “val”: “理赔停售也不断保”}]</td></tr><tr><td align="left"><strong>补充说明1描述</strong></td><td align="left">已经在补充说明1中已经说明，统一存储到一个json字符串中</td></tr><tr><td align="left"><strong>补充说明2</strong></td><td align="left">已经在补充说明1中已经说明，统一存储到一个json字符串中</td></tr><tr><td align="left"><strong>补充说明2描述</strong></td><td align="left">已经在补充说明1中已经说明，统一存储到一个json字符串中</td></tr><tr><td align="left"><strong>产品点评标题</strong></td><td align="left">详情页面展示；目前无用；字符串类型</td></tr><tr><td align="left"><strong>产品点评内容</strong></td><td align="left">详情页面展示；目前无用；字符串类型</td></tr><tr><td align="left"><strong>金选</strong></td><td align="left">是否属于金选类型；金选可以在金选过滤的时候显示；0是，1否；字符类型</td></tr><tr><td align="left"><strong>团个险标记</strong></td><td align="left">旅游类产品专属；标记是否团险还是个险；字符类型，0团，1个</td></tr><tr><td align="left"><strong>保单宽限</strong></td><td align="left">存储理财、养老类专属；在这个时间段内，被保险人可以在未支付保费的情况下继续享受保险责任。也就是说，保单到期后，如果未能及时支付保费，被保险人仍然可以在宽限期内享有保险责任。数值类型</td></tr><tr><td align="left"><strong>保单宽限单位</strong></td><td align="left">存储理财、养老类专属；字符类型，天、月、年</td></tr><tr><td align="left"><strong>保单复效</strong></td><td align="left">存储理财、养老类专属；指停效保单在自停效之日起的时间内，投保人根据保险合同约定，办理有关手续后，使保单恢复效力。具体来说，如果保单因为某些原因（如未支付保费）而失效，投保人在宽限期结束后至两年内可以向保险公司提出保单复效的申请。如果保险公司同意并接受了投保人补交的保费，那么保单就可以恢复效力。**在宽限期到期之后，最多有多长时间保单缴费的话是继续生效的，过了这个时间保单就完全失效（缴费也不能恢复）**数值类型</td></tr><tr><td align="left"><strong>保单复效单位</strong></td><td align="left">存储理财、养老类专属；字符类型，天、月、年</td></tr><tr><td align="left"><strong>其它公共内容</strong></td><td align="left">保险产品是属于哪个保司的、状态、创建&#x2F;更新人、时间等</td></tr></tbody></table><h4 id="数据库表设计-4"><a href="#数据库表设计-4" class="headerlink" title="数据库表设计"></a>数据库表设计</h4><p><img src="/../images/image-20250721143514373.png" alt=""></p><h4 id="接口分析设计"><a href="#接口分析设计" class="headerlink" title="接口分析设计"></a>接口分析设计</h4><p><img src="/../images/image-20250721144618836.png" alt="image-20250721144618836"></p><h4 id="开发实现"><a href="#开发实现" class="headerlink" title="开发实现"></a>开发实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">service: </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional</span></span><br><span class="line">    <span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">        evict = &#123;</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = InsuranceCacheConstant.PAGE, allEntries = true),</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = InsuranceCacheConstant.LIST, allEntries = true)</span></span><br><span class="line"><span class="meta">        &#125;,</span></span><br><span class="line"><span class="meta">        put = &#123;</span></span><br><span class="line"><span class="meta">            @CachePut(value = InsuranceCacheConstant.BASIC, key = &quot;#result.id&quot;)</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line">来源：io.seata.spring.annotation.GlobalTransactional</span><br><span class="line">作用：开启 Seata 分布式事务。</span><br><span class="line">说明：</span><br><span class="line">如果这个方法调用了多个微服务（如保存保险信息、更新用户积分、发送消息等），这些操作将在一个全局事务中。</span><br><span class="line">如果某个服务失败，Seata 会回滚整个事务链。</span><br><span class="line">适用于 跨服务调用 的场景。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">@Caching</span></span><br><span class="line">作用：组合多个缓存操作（<span class="meta">@CacheEvict</span> 和 <span class="meta">@CachePut</span>）。</span><br><span class="line">注意：<span class="meta">@Caching</span> 是 Spring Cache 提供的注解，用于在一个方法上执行多个缓存操作。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">@CacheEvict(value = InsuranceCacheConstant.PAGE, allEntries = true)</span></span><br><span class="line">作用：清除名为 InsuranceCacheConstant.PAGE 的缓存中的所有条目。</span><br><span class="line">原因：保存新数据后，分页缓存可能已失效，需要清除。</span><br><span class="line">示例：比如之前缓存了 /insurance/page?page=<span class="number">1</span>&amp;size=<span class="number">10</span> 的结果，现在新增了数据，分页结果就不准确了。</span><br><span class="line">    </span><br><span class="line"><span class="meta">@CacheEvict(value = InsuranceCacheConstant.LIST, allEntries = true)</span></span><br><span class="line">作用：清除名为 InsuranceCacheConstant.LIST 的缓存中的所有条目。</span><br><span class="line">原因：列表缓存（如 /insurance/list）也可能因新增数据而失效。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">@CachePut(value = InsuranceCacheConstant.BASIC, key = &quot;#result.id&quot;)</span></span><br><span class="line">作用：将方法返回的 InsuranceVO 对象写入缓存。</span><br><span class="line">缓存名：InsuranceCacheConstant.BASIC</span><br><span class="line">缓存键：使用返回对象的 id 字段作为 key。</span><br><span class="line">注意：</span><br><span class="line">#result 是 Spring 表达式语言（SpEL），表示方法的返回值。</span><br><span class="line">这意味着每次调用 save()，都会把新保存的 InsuranceVO 写入缓存，方便后续通过 id 快速查询。</span><br></pre></td></tr></table></figure><h3 id="产品方案"><a href="#产品方案" class="headerlink" title="产品方案"></a>产品方案</h3><h3 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250721150918765.png" alt="image-20250721150918765"></p><p>界面上的输入项分析如下：</p><table><thead><tr><th align="left">输入项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>保险方案名称</strong></td><td align="left">保险方案名称；将会在app端查看保险产品详情的时候展示；字符串类型</td></tr><tr><td align="left"><strong>起步价格</strong></td><td align="left">买这个保险产品对应的方案的价格；（这个价格不是最终的，还与系数有关）数值类型</td></tr><tr><td align="left"><strong>单位</strong></td><td align="left">字符类型；元&#x2F;天，元&#x2F;月，元&#x2F;年</td></tr><tr><td align="left"><strong>排序</strong></td><td align="left">方案的排序值，暂无用；数值类型</td></tr><tr><td align="left"><strong>每年最高</strong></td><td align="left">养老、储蓄类专属；每年最高投入的总金额</td></tr><tr><td align="left"><strong>每月最高</strong></td><td align="left">养老、储蓄类专属；每月最高投入的总金额</td></tr><tr><td align="left"><strong>每周最高</strong></td><td align="left">养老、储蓄类专属；每周最高投入的总金额</td></tr><tr><td align="left"><strong>一次性投入最高</strong></td><td align="left">养老、储蓄类专属；一次最高投入的金额上限</td></tr><tr><td align="left"><strong>领取类型</strong></td><td align="left">养老、储蓄类专属；内容为：终身领取0，固定领取1，字符类型<strong>终身领取</strong>是指从保险合同规定的领取年龄起，保险公司会按终身领取的基本保险金额，每年给付一次年金，直到被保险人身故，合同终止。<strong>固定领取</strong>则是指在一个特定的时间段内，每年都可以领取到固定比例的养老年金。</td></tr><tr><td align="left"><strong>每年比例</strong></td><td align="left">只有当领取类型为<strong>终身领取</strong>的时候才有；百分比；浮点类型</td></tr><tr><td align="left"><strong>领取总期数</strong></td><td align="left">只有当领取类型为<strong>固定领取</strong>的时候才有；数值类型</td></tr><tr><td align="left"><strong>第1…n期</strong></td><td align="left">根据不同的总期数，自动生成，每期都可以设置领取额度百分比；浮点类型由于这个期数也是不固定的，那么可以作为一个json字段；每期都作为其属性存储；可以无限期数</td></tr><tr><td align="left"><strong>保障项</strong></td><td align="left">保障项名称；每个方案都可以有很多保障项，所以可以将保障项编号也保存</td></tr><tr><td align="left"><strong>展示名称</strong></td><td align="left">展示在app端展示位置（详情页面）中的 保障详情里面显示的：保障项名字（也就是可以对原有的保障项起别名并在详情页面中展示）</td></tr><tr><td align="left"><strong>保障项值</strong></td><td align="left">具体保障项的值</td></tr><tr><td align="left"><strong>展示位置</strong></td><td align="left">这个保障项在哪些位置中展示</td></tr><tr><td align="left"><strong>保险描述</strong></td><td align="left">这个保障项对应的保险产品方案信息描述</td></tr><tr><td align="left"><strong>其它公共内容</strong></td><td align="left">状态、创建&#x2F;更新人、时间等</td></tr></tbody></table><h3 id="数据库表设计-5"><a href="#数据库表设计-5" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p>根据需求分析；得出保险方案与 方案保障项、方案给付的关系为：</p><ul><li>一个保险方案可以有多个方案保障项 &#x3D;&#x3D;&#x3D;》一对多</li><li>一个保险方案可以有一个方案给付 &#x3D;&#x3D;&#x3D;》一对一</li></ul><blockquote><p>一对一关系；可以不分两张表；也可以将方案给付分开保存到另外一种从表；</p><p>四方保险采用从表方案，因为里面有一个给付计划json大字段且不常用字段；所以单独创建一张从表保存方案给付计划</p></blockquote><h3 id="保险方案概念模型"><a href="#保险方案概念模型" class="headerlink" title="保险方案概念模型"></a>保险方案概念模型</h3><p><img src="/../images/image-20250721151129435.png" alt="image-20250721151129435"></p><h3 id="保险方案物理模型"><a href="#保险方案物理模型" class="headerlink" title="保险方案物理模型"></a>保险方案物理模型</h3><p><img src="/../images/image-20250721151146703.png" alt="image-20250721151146703"></p><p>保险方案表</p><p><img src="/../images/image-20250721151208883.png" alt="image-20250721151208883"></p><p>方案保障项表</p><p><img src="/../images/image-20250721151221912.png" alt="image-20250721151221912"></p><p>方案给付表</p><p><img src="/../images/image-20250721151233581.png" alt="image-20250721151233581"></p><h3 id="接口分析设计-1"><a href="#接口分析设计-1" class="headerlink" title="接口分析设计"></a>接口分析设计</h3><p><img src="/../images/image-20250721151304549.png" alt="image-20250721151304549"></p><h3 id="开发实现-1"><a href="#开发实现-1" class="headerlink" title="开发实现"></a>开发实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Caching(evict = &#123;@CacheEvict(value = InsurancePlanCacheConstant.PAGE,allEntries = true),</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = InsurancePlanCacheConstant.LIST,allEntries = true)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(List&lt;InsurancePlanVO&gt; insurancePlanVOs)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//最终操作结果</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//1、批量保存保险方案</span></span><br><span class="line">        <span class="comment">//给所有的保险方案设置方案编号</span></span><br><span class="line">        insurancePlanVOs.forEach(insurancePlan-&gt;&#123;</span><br><span class="line">            insurancePlan.setPlanNo(identifierGenerator.nextId(insurancePlan).longValue());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//转换vo为实体</span></span><br><span class="line">        List&lt;InsurancePlan&gt; insurancePlans = BeanConv.toBeanList(insurancePlanVOs, InsurancePlan.class);</span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        flag = saveBatch(insurancePlans);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为保存方案成功后，方案的id在insurancePlans里面；insurancePlanVOs的每个方案是没有方案id的；</span></span><br><span class="line">        <span class="comment">// 所以可以将方案编号与方案id放到map中对应起来</span></span><br><span class="line">        <span class="comment">//Map&lt;方案编号,方案id&gt;</span></span><br><span class="line">        Map&lt;Long, Long&gt; planNoAndIdMap = insurancePlans.stream()</span><br><span class="line">                .collect(Collectors.toMap(InsurancePlan::getPlanNo, InsurancePlan::getId));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、批量保存每个方案的保障项</span></span><br><span class="line">        <span class="comment">//给方案保障项设置方案编号</span></span><br><span class="line">        insurancePlanVOs.forEach(insurancePlanVO-&gt;&#123;</span><br><span class="line">            insurancePlanVO.getPlanSafeguardVOs().forEach(planSafeguardVO-&gt;&#123;</span><br><span class="line">                planSafeguardVO.setPlanId(planNoAndIdMap.get(insurancePlanVO.getPlanNo()));</span><br><span class="line">            &#125;);</span><br><span class="line">            List&lt;PlanSafeguard&gt; planSafeguardList = BeanConv.toBeanList(insurancePlanVO.getPlanSafeguardVOs(), PlanSafeguard.class);</span><br><span class="line">            <span class="comment">//批量保存保障项</span></span><br><span class="line">            planSafeguardService.saveBatch(planSafeguardList);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、批量保存每个方案的给付计划</span></span><br><span class="line">        insurancePlanVOs.forEach(insurancePlanVO-&gt;&#123;</span><br><span class="line">            <span class="comment">//只有养老、储蓄类型的才有给付计划</span></span><br><span class="line">            <span class="keyword">if</span> (insurancePlanVO.getPlanEarningsVO() != <span class="literal">null</span>) &#123;</span><br><span class="line">                insurancePlanVO.getPlanEarningsVO().setPalnId(planNoAndIdMap.get(insurancePlanVO.getPlanNo()));</span><br><span class="line">                planEarningsService.save(insurancePlanVO.getPlanEarningsVO());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;保存保险方案异常：&#123;&#125;&quot;</span>, ExceptionsUtil.getStackTraceAsString(e));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProjectException</span>(InsurancePlanEnum.SAVE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产品系数项"><a href="#产品系数项" class="headerlink" title="产品系数项"></a>产品系数项</h3><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><p>继续刚才的业务；在保存完产品方案之后；跳转到第三步：产品系数项；界面如下：</p><p><img src="/../images/image-20250721160021953.png" alt="image-20250721160021953"></p><table><thead><tr><th align="left">输入项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>保险系数</strong></td><td align="left">系数名称；字符串；为了以后通过系数查询方便，也同时需要记录系数编号。小窍门：基本上出现下拉框的时候，一般都是记录对应的id或者编号，为了方便查询可以记录中文选项值</td></tr><tr><td align="left"><strong>保险系数别名</strong></td><td align="left">系数对应显示时候的名字；字符串</td></tr><tr><td align="left"><strong>是否展示</strong></td><td align="left">是否要在详情页面中展示这个系数；字符类型，0是，1否</td></tr><tr><td align="left"><strong>系数值</strong></td><td align="left">属于某个系数项对应的值；类型不定，数量不定；适合将其及试算值、是否默认 保存的一个json中；方便扩展，结构灵活</td></tr><tr><td align="left"><strong>系数试算值</strong></td><td align="left">在产品详情页面中，选择了某个系数值的时候，对应保险价格要乘于这个试算值才是最终的保险价格浮点类型</td></tr><tr><td align="left"><strong>是否默认</strong></td><td align="left">在产品详情页面中，展示系数项的时候；当前这个系数项值是否为默认选中字符类型；0是1否</td></tr><tr><td align="left"><strong>其它公共内容</strong></td><td align="left">状态、创建&#x2F;更新人、时间等</td></tr></tbody></table><h3 id="数据库表设计-6"><a href="#数据库表设计-6" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p><img src="/../images/image-20250721160056609.png" alt="image-20250721160056609"></p><p>保险系数项的具体数据库表结构如下：</p><p><img src="/../images/image-20250721160107141.png" alt="image-20250721160107141"></p><h3 id="接口分析设计-2"><a href="#接口分析设计-2" class="headerlink" title="接口分析设计"></a>接口分析设计</h3><p><img src="/../images/image-20250721160122487.png" alt="image-20250721160122487"></p><h3 id="开发实现-2"><a href="#开发实现-2" class="headerlink" title="开发实现"></a>开发实现</h3><h3 id="产品筛选项"><a href="#产品筛选项" class="headerlink" title="产品筛选项"></a>产品筛选项</h3><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="/../images/image-20250721160443472.png" alt="image-20250721160443472"></p><table><thead><tr><th align="left">输入项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>条件筛选项</strong></td><td align="left">名称；字符串；为了以后通过系数查询方便，也同时需要记录系数编号。小窍门：基本上出现下拉框的时候，一般都是记录对应的id或者编号，为了方便查询可以记录中文选项值</td></tr><tr><td align="left"><strong>系数值</strong></td><td align="left">属于某个系数项对应的值；类型不定，数量不定；适合将其及试算值、是否默认保存的一个json中；方便扩展，结构灵活</td></tr><tr><td align="left"><strong>筛选项值</strong></td><td align="left">在APP端可以通过某些筛选值找到这个产品；那么一个产品可以通过好多筛选项的值都能找到的话；这个值又是不固定的；比如：为谁买；可以在选择本人或者配偶等都可以找到。 所以存储的也应该是结构数量不固定的，类型可以为json；存储的值例如：[“BZ”, “ZN”, “PO”, “FM”]json</td></tr><tr><td align="left"><strong>其它公共内容</strong></td><td align="left">状态、创建&#x2F;更新人、时间等</td></tr></tbody></table><h3 id="数据库表设计-7"><a href="#数据库表设计-7" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><p><img src="/../images/image-20250721160520679.png" alt="image-20250721160520679"></p><p><img src="/../images/image-20250721160531881.png" alt="image-20250721160531881"></p><h3 id="接口分析设计-3"><a href="#接口分析设计-3" class="headerlink" title="接口分析设计"></a>接口分析设计</h3><p><img src="/../images/image-20250721160546480.png" alt="image-20250721160546480"></p><h3 id="开发实现-3"><a href="#开发实现-3" class="headerlink" title="开发实现"></a>开发实现</h3><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>能说一下你开发的保险产品的业务流程吗</p><p>用户（小程序&#x2F;H5） → 分步式表单 → 中台「产品中心」→ 规则&amp;系数 → 报价 → 支付 → 电子保单<br>                   ↑                    ↑               ↑<br>               向导式界面      （Redis+Seata分布式事务）    保司核心</p><ul><li><strong>技术栈</strong>：SpringBoot + SpringCloud + Redis + MySQL + Nacos + Seata </li><li><strong>关键模块</strong><ul><li>保险发布、保障项、系数项、筛选项、树形分类 </li><li>保费计算路由（策略模式）+ 参数预处理（门面模式）</li></ul></li></ul><p> 什么叫 “分步式表单”或者“向导式界面”？</p><ul><li>在页面中有 1&#x2F;2&#x2F;3&#x2F;4&#x2F;5 等分步式的填写表单，逐步逐步的操作，每完成一步之后才能进入下一步，直到引导用户完成整个业务的做法叫做“<strong>分步式表单</strong>”或者“<strong>向导式界面</strong>”。</li></ul><p>保险产品的组成有什么</p><ol><li>产品基本信息（&gt;5 个属性，见第4点）</li><li>保障项（责任、保额、免赔额、赔付比例）</li><li>系数项（年龄、职业、地区、健康等级等）</li><li>筛选项（前端检索：价格区间、年龄、职业类别…）</li><li>图文&#x2F;视频&#x2F;条款附件</li><li>销售区域、渠道、有效期、上下架状态</li></ol><p>保险基本信息中说5个及以上属性</p><table><thead><tr><th>属性示例</th><th>示例值</th></tr></thead><tbody><tr><td>产品名称</td><td>众安百万医疗保险2024</td></tr><tr><td>承保公司</td><td>众安在线财产保险股份有限公司</td></tr><tr><td>产品类型</td><td>医疗险</td></tr><tr><td>保障期限</td><td>1 年期（可续保）</td></tr><tr><td>缴费方式</td><td>趸交&#x2F;月交</td></tr><tr><td>销售状态</td><td>在售&#x2F;停售</td></tr></tbody></table><p>保险产品与方案的关系；保险方案是怎么样形成的？</p><ul><li><strong>产品</strong> &#x3D; 保司给出的“模板”。</li><li><strong>方案</strong> &#x3D; 用户&#x2F;运营在前端勾选 <strong>保额&#x2F;免赔额&#x2F;附加责任</strong> 后，由 <strong>保费计算引擎</strong> 实时生成的 <strong>“价格+责任”快照</strong>。</li><li><strong>存储</strong>：方案快照随订单一起落库，防止产品后续调整导致纠纷。</li></ul><p>保险产品的系数有什么作用？那筛选项呢？</p><ul><li><strong>系数</strong><br>用于 <strong>保费计算</strong>（公式：<code>基准保费 × 年龄系数 × 职业系数 × 地区系数 …</code>），由 <strong>规则引擎</strong> 实时计算 。</li><li><strong>筛选项</strong><br>用于 <strong>前端检索</strong>，如“年龄 30<del>40 岁 + 职业 1</del>3 类 + 价格 100~300 元”组合查询，走 Elasticsearch 聚合。</li></ul><p>什么是保险的犹豫期、等待期、复效期、宽限期</p><table><thead><tr><th>名词</th><th>含义说明</th><th>典型天数</th></tr></thead><tbody><tr><td>犹豫期</td><td>投保后可无条件退保，全额退款</td><td>15 天</td></tr><tr><td>等待期</td><td>合同生效后，对某些疾病不承担赔付责任</td><td>30~90 天</td></tr><tr><td>宽限期</td><td>续期保费未交，保单仍有效，出险可赔</td><td>60 天</td></tr><tr><td>复效期</td><td>宽限期满仍未交费，2 年内补交可恢复保单</td><td>2 年</td></tr></tbody></table><p>说一下你们项目中具体保险产品名称？</p><ul><li>比如：中老年综合意外、团队短期综合意外、安诊无忧.百万医疗险、房屋出租无忧家居保险、众安百万医疗保险2024、尊享e生2025、平安福16，百万任我行25，e无忧plus，颐享世家25，盛世优享，智盈陪护25，e无忧惠民版.百万医疗</li></ul><p><strong>简历职责-候选</strong>：独立完成保险产品的业务分析、关联数据库表设计，分步表单的方式实现保险产品基本信息、多方案、不同系数、筛选和附件的处理；</p><ul><li>保险产品的业务流程</li></ul><p><img src="/../images/image-20250721163650238.png" alt="image-20250721163650238"></p><ul><li>保险产品涉及到哪些表；有几张</li></ul><p>5</p><p><img src="/../images/image-20250721163745477.png" alt="image-20250721163745477"></p><ul><li>分步表单怎么做的、</li></ul><p>分步表单我分三层落地：<br>1 <strong>前端</strong> 用 Vue3 Step + Pinia 把 50+ 字段拆 4 步，每步独立校验，回退不丢数据；<br>2 <strong>后端</strong> 每步只接收当前 DTO，Redis 暂存 30 min，最后一步组装完整 VO 调 <code>save()</code>；<br>3 <strong>数据一致性</strong> 在 <code>save()</code> 上加 <code>@Transactional</code> 保证 DB 原子性，再配 <code>@Caching</code> 把 <strong>列表&#x2F;分页缓存全清</strong>、<strong>单条缓存更新</strong>，防止并发读到脏方案。<br>这样用户修改任何系数后实时算价，提交时缓存与数据库同时生效，日均 2 万单无脏读4</p><ul><li><strong>Redis key 设计</strong>：<code>sessionId_step1/2/3/4</code>，过期 30 min，支持断点续填。</li><li><strong>缓存清理</strong>：<code>PAGE</code> 和 <code>LIST</code> 是搜索页的 Keys，<code>allEntries = true</code> 保证新增&#x2F;修改后立即失效。</li><li><strong>事务顺序</strong>：先落库 → 事务提交 → 再清缓存，避免“缓存已更新但 DB 回滚”的脏数据。</li></ul><p>分步表单&#x3D;前端四步状态机 + 后端 Redis 暂存 + 事务+缓存双保险，既让用户无感跳转，又保证并发下数据一致。</p><ul><li>开发这个业务功能时遇到什么问题？业务、技术上</li></ul><p>理清各个表的关系</p><h1 id="第4章-产品附件-对象存储"><a href="#第4章-产品附件-对象存储" class="headerlink" title="第4章-产品附件-对象存储"></a>第4章-产品附件-对象存储</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>完成保险发布保险附件功能开发</li><li>掌握微服务的如何进行服务化的功能拆分</li><li>掌握对象存储-文件上传功能流程及设计</li><li>掌握对象存储-垃圾文件处理流程及设计</li><li>了解对象存储-微服务化业务功能接口</li></ul><h2 id="产品附件"><a href="#产品附件" class="headerlink" title="产品附件"></a>产品附件</h2><p>原型界面分析</p><p>在保险产品的新建中；完成了产品信息——》产品方案——》产品系数项——》产品筛选项 之后；终于到了如下的最后一项：产品附件</p><p><img src="/../images/image-20250722145712073.png" alt="image-20250722145712073"></p><p>在这个界面中；我们可以添加多种类型的资料附件pdf文件；保险详情、详情头图、产品特色三张图片。添加的这些文件都属于产品附属文件内容；也就是一个产品可能包含有多个附件文件。</p><p><strong>主要思路</strong>：在开发时需要将这些附件上传保存到存储服务器（阿里云、七牛云、FastDFS、MinIO等）并将这些附件记录、可访问的文件地址存储到数据库中；因为在产品详情页查看时需要使用到。要能够通过产品id查询到对应的附件。</p><p><strong>技术分析</strong></p><ul><li>文件存储：存储具体的文件；可以采用学习过的阿里云OSS存储</li><li>文件记录：直接记录上传的文件信息到数据库表；<code>sfbx-file</code>数据库是专门存放文件、附件的数据库；其中有一个附件的表<code> tab_file</code>在这个表中存储附件的信息即可。</li></ul><p><strong>特别注意</strong>：</p><p>上传的资料都很有可能比较大；那么将这些大文件发送到 后端微服务的时候，很有可能因为网络不稳定而上传失败或者要重试多次，影响体验。可以将这些资料大文件分割为多个1M大小的文件多次上传到后端微服务，提高上传的成功率。</p><p>简单文件上传时序图</p><p><img src="/../images/image-20250722145930482.png" alt="image-20250722145930482"></p><p>大文件分片上传时序图</p><p><img src="/../images/image-20250722150022062.png" alt="image-20250722150022062"></p><p>数据库表设计</p><p>根据需求分析，一个产品有多个附件，而这些附件都可以利用 <code>sfbx-file</code> 数据库中的已经存在的 <code>附件表 tab_file</code>来存储。</p><p>概念模型</p><p>附件表在与保险产品相关的概念模型如下：</p><p><img src="/../images/image-20250722151012881.png" alt="image-20250722151012881"></p><p>附件表</p><p>对应附件表的数据库表结构如下：</p><p><img src="/../images/image-20250722151125080.png" alt="image-20250722151125080"></p><p>接口分析设计</p><p>在上传文件的时候；可以在前端指定 <code>storeFlag</code> 来确实采用哪种存储服务器（ aliyunoss表示阿里云、qiniu表示七牛云），具体接口信息查看如下内容</p><p>上传大文件（资料）</p><p>上传资料大文件的时候；需要对文件至少3次以上的处理；分别处理：分片初始化、n次分片上传、分片合并；所以也将对应3个上传接口：</p><p>初始化</p><p><img src="/../images/image-20250722151215646.png" alt="image-20250722151215646"></p><p>上传分片</p><p><img src="/../images/image-20250722151244273.png" alt="image-20250722151244273"></p><p>合并分片</p><p><img src="/../images/image-20250722151258086.png" alt="image-20250722151258086"></p><p>上传图片</p><p><img src="/../images/image-20250722151312967.png" alt="image-20250722151312967"></p><p>开发实现说明</p><p>微服务划分</p><p>文件上传功能，不只是在 保险产品中使用到；还可能在app端用户的头像上传、后端的其它业务模块中都可能需要上传文件、图片等内容；这类比较通用的业务；可以抽取为一个 <code>文件微服务file-web</code> 。在这个文件微服务中：</p><ul><li>处理文件上传</li><li>上传文件的查询</li><li>文件的删除</li><li>垃圾文件的处理</li></ul><p>说明了这个文件微服务需要记录下来，是由哪些业务上传过来的数据；而且附件的数量也比较庞大。所以需要有对应的数据库来记录业务与附件的关系。</p><p>于此；文件微服务对应一个<code> sfbx-file</code>的数据库，里面存放对应附件相关的表。</p><p>那么；在保险管理后台中，需要上传文件怎么办？</p><p><strong>答案就是</strong>：微服务之间进行远程调用；也就是：<code>保险管理微服务insurance-mgt</code> 通过open feign 接口调用 <code>文件微服务file-web</code>；从而实现在产品附件中资料、图片上传的功能。</p><p>文件上传处理器</p><p>在四方保险中，关于大、小文件、图片上传的实现都在如下这个类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FileUpLoadController.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 文件上传接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;file&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;附件controller&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUpLoadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IFileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssAliyunConfigProperties ossAliyunConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 文件上传-简单上传-前端直接调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 上传对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: com.itheima.travel.req.FileVO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;up-load&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件上传-简单上传&quot;,notes = &quot;文件上传-简单上传&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(paramType = &quot;form&quot;, name = &quot;file&quot;, value = &quot;文件对象&quot;, required = true, dataTypeClass = MultipartFile.class)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ApiOperationSupport(includeParameters = &#123;&quot;fileVO.businessType&quot;,&quot;fileVO.bucketName&quot;,&quot;fileVO.storeFlag&quot;,&quot;fileVO.autoCatalog&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;FileVO&gt; <span class="title function_">upLoad</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">            FileVO fileVO)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//因为前端传递了bucketName；但是目前前端不可修改；所以使用配置文件的话需要覆盖一下</span></span><br><span class="line">        <span class="comment">// 如果要从前端确定bucketName再将下面一行代码删除即可；完全根据前端传递来确定</span></span><br><span class="line">        fileVO.setBucketName(ossAliyunConfigProperties.getBucketName());</span><br><span class="line"></span><br><span class="line">        fileVO.setCompanyNo(SubjectContent.getCompanyNo());</span><br><span class="line">        <span class="comment">//构建文件上传对象</span></span><br><span class="line">        <span class="type">UploadMultipartFile</span> <span class="variable">uploadMultipartFile</span> <span class="operator">=</span> UploadMultipartFile</span><br><span class="line">            .builder()</span><br><span class="line">            .originalFilename(file.getOriginalFilename())</span><br><span class="line">            .fileByte(IOUtils.toByteArray(file.getInputStream()))</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">//执行文件上传</span></span><br><span class="line">        <span class="type">FileVO</span> <span class="variable">fileVOResult</span> <span class="operator">=</span> fileService.upLoad(uploadMultipartFile, fileVO);</span><br><span class="line">        <span class="keyword">return</span> ResponseResultBuild.successBuild(fileVOResult);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;initiate-multipart-up-load&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件分片上传-初始化&quot;,notes = &quot;文件分片上传-初始化&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;fileVO&quot;,value = &quot;文件对象&quot;,required = true,dataType = &quot;FileVO&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;FileVO&gt; <span class="title function_">initiateMultipartUpload</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> FileVO fileVO)</span>&#123;</span><br><span class="line">        <span class="comment">//因为前端传递了bucketName；但是目前前端不可修改；所以使用配置文件的话需要覆盖一下</span></span><br><span class="line">        <span class="comment">// 如果要从前端确定bucketName再将下面一行代码删除即可；完全根据前端传递来确定</span></span><br><span class="line">        fileVO.setBucketName(ossAliyunConfigProperties.getBucketName());</span><br><span class="line">        fileVO.setCompanyNo(SubjectContent.getCompanyNo());</span><br><span class="line">        <span class="comment">//初始化上传Id</span></span><br><span class="line">        <span class="type">FileVO</span> <span class="variable">fileVOResult</span> <span class="operator">=</span> fileService.initiateMultipartUpload(fileVO);</span><br><span class="line">        <span class="keyword">return</span> ResponseResultBuild.successBuild(fileVOResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;up-load-part&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件分片上传-上传分片&quot;,notes = &quot;文件分片上传-上传分片&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(paramType = &quot;form&quot;, name = &quot;file&quot;, value = &quot;文件对象&quot;, required = true, dataTypeClass = MultipartFile.class)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;String&gt; <span class="title function_">uploadPart</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span></span><br><span class="line"><span class="params">            FilePartVO filePartVO)</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//因为前端传递了bucketName；但是目前前端不可修改；所以使用配置文件的话需要覆盖一下</span></span><br><span class="line">        <span class="comment">// 如果要从前端确定bucketName再将下面一行代码删除即可；完全根据前端传递来确定</span></span><br><span class="line">        filePartVO.setBucketName(ossAliyunConfigProperties.getBucketName());</span><br><span class="line">        filePartVO.setCompanyNo(SubjectContent.getCompanyNo());</span><br><span class="line">        <span class="comment">//构建文件上传对象</span></span><br><span class="line">        <span class="type">UploadMultipartFile</span> <span class="variable">uploadMultipartFile</span> <span class="operator">=</span> UploadMultipartFile</span><br><span class="line">            .builder()</span><br><span class="line">            .originalFilename(file.getOriginalFilename())</span><br><span class="line">            .fileByte(IOUtils.toByteArray(file.getInputStream()))</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">//上传分片返回partETagJson</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">partETagJson</span> <span class="operator">=</span> fileService.uploadPart(uploadMultipartFile,filePartVO);</span><br><span class="line">        <span class="keyword">return</span> ResponseResultBuild.successBuild(partETagJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;complete-multipart-up-load&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;文件分片上传-合并分片&quot;,notes = &quot;文件分片上传-合并分片&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;fileVO&quot;,value = &quot;文件对象&quot;,required = true,dataType = &quot;FileVO&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult&lt;String&gt; <span class="title function_">completeMultipartUpload</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody</span> FileVO fileVO)</span><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//因为前端传递了bucketName；但是目前前端不可修改；所以使用配置文件的话需要覆盖一下；</span></span><br><span class="line">        <span class="comment">// 如果要从前端确定bucketName再将下面一行代码删除即可；完全根据前端传递来确定</span></span><br><span class="line">        fileVO.setBucketName(ossAliyunConfigProperties.getBucketName());</span><br><span class="line">        <span class="comment">//问上传分片返回partETagJson</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">eTagJson</span> <span class="operator">=</span> fileService.completeMultipartUpload(fileVO);</span><br><span class="line">        <span class="keyword">return</span> ResponseResultBuild.successBuild(eTagJson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改阿里云OSS配置</p><p>在<code>文件微服务file-web</code>中配置项也是存储在nacos中；对应的<code>Data Id</code>为：<code>file-web-dev.yml</code>文件；如果要修改上传文件的存储为自己的阿里云OSS的话（会影响原添加的一些保险产品的图片、文件）；那么修改如下：</p><p><img src="/../images/image-20250722164338437.png" alt="image-20250722164338437"></p><h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><p>对象存储介绍</p><p>对象存储服务（<strong>O</strong>bject <strong>S</strong>torage <strong>S</strong>ervice）是一种数据存储和管理模型，用于<strong>存储和组织非结构化数据（文件：文本、图片、音频、视频）</strong>，通常以对象（Object）的形式存储数据。每个对象通常包括数据本身、元数据（描述数据的信息），以及一个唯一的标识符。<strong>总的来说；就是存文件的。也一般会称OSS为存储服务器。</strong></p><p><strong>文件可以存到哪里去？</strong></p><ul><li>方式一：可以存储到服务器所在硬盘；（web阶段讲解过）</li><li>方式二：可以自己搭建存储服务器；比如：MinIO、FastDFS都是可自行搭建的分布式文件存储服务器</li><li>方式三：可以使用第三方，自己不用搭；直接用就行。比如：阿里云OSS（<a href="https://oss.console.aliyun.com/bucket%EF%BC%89%E3%80%81%E5%8D%8E%E4%B8%BA%E4%BA%91OSS%E3%80%81%E4%B8%83%E7%89%9B%E4%BA%91%E7%AD%89">https://oss.console.aliyun.com/bucket）、华为云OSS、七牛云等</a></li></ul><p>四方保险就是采用了第三方；并且抽象了存储实现这一层，可以通过参数进行灵活的切换存储服务器OSS（阿里云与七牛云之间切换）</p><p>简单文件上传</p><p>使用Java SDK发起OSS请求，需要配置访问凭证。具体如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试之前需要先设置系统环境变量；打开CMD 执行如下命令：</span></span><br><span class="line">set OSS_ACCESS_KEY_ID=你自己在阿里云上的AccessKey</span><br><span class="line">set OSS_ACCESS_KEY_SECRET=你自己在阿里云上的AccessKeySecret</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久生效</span></span><br><span class="line">setx OSS_ACCESS_KEY_ID &quot;%OSS_ACCESS_KEY_ID%&quot;</span><br><span class="line">setx OSS_ACCESS_KEY_SECRET &quot;%OSS_ACCESS_KEY_SECRET%&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置之后；可以通过如下命令查看是否设置成功. IDEA中要生效的话，可以重启IDEA</span></span><br><span class="line">echo %OSS_ACCESS_KEY_ID%</span><br><span class="line">echo %OSS_ACCESS_KEY_SECRET%</span><br></pre></td></tr></table></figure><p>如下是一个上传文件的简单代码：</p><p>参考阿里云文档地址：<a href="https://help.aliyun.com/zh/oss/user-guide/simple-upload?spm=a2c4g.11186623.4.2.61435183VvEgPZ&scm=20140722.H_31848._.ID_31848-OR_rec-V_1">https://help.aliyun.com/zh/oss/user-guide/simple-upload?spm=a2c4g.11186623.4.2.61435183VvEgPZ&amp;scm=20140722.H_31848._.ID_31848-OR_rec-V_1</a></p><p>演示简单上传如下：</p><p>1、添加 file-web 中添加测试依赖；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写测试类；<code>sfbx-cloud\sfbx-file\file-web\src\</code>**<code>test</code>**<code>\java\com\itheima\sfbx\file\AliOSSUploadTest.java</code></p><p>具体示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.sfbx.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.common.auth.CredentialsProviderFactory;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.common.auth.EnvironmentVariableCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUploadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleUpload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-shenzhen.aliyuncs.com&quot;</span>;</span><br><span class="line">        <span class="comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。</span></span><br><span class="line">        <span class="type">EnvironmentVariableCredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();</span><br><span class="line">        <span class="comment">// 填写Bucket名称，例如examplebucket。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;sfbx-oss&quot;</span>;</span><br><span class="line">        <span class="comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;test/pic/logo.png&quot;</span>;</span><br><span class="line">        <span class="comment">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span></span><br><span class="line">        <span class="comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></span><br><span class="line">        String filePath= <span class="string">&quot;D:\\itcast\\pics\\logo.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, credentialsProvider);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建PutObjectRequest对象。</span></span><br><span class="line">            <span class="type">PutObjectRequest</span> <span class="variable">putObjectRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucketName, objectName, <span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            <span class="comment">// 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。</span></span><br><span class="line">            <span class="comment">// ObjectMetadata metadata = new ObjectMetadata();</span></span><br><span class="line">            <span class="comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></span><br><span class="line">            <span class="comment">// metadata.setObjectAcl(CannedAccessControlList.Private);</span></span><br><span class="line">            <span class="comment">// putObjectRequest.setMetadata(metadata);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上传文件。</span></span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">result</span> <span class="operator">=</span> ossClient.putObject(putObjectRequest);</span><br><span class="line"></span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                    + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                    + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                ossClient.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分片文件上传</p><p>在上传大文件（超过5 GB）到OSS的过程中，如果出现网络中断、程序异常退出等问题导致文件上传失败，您需要使用分片上传的方式上传大文件。分片上传通过将待上传的大文件分成多个较小的碎片（Part），充分利用网络带宽和服务器资源<strong>并发上传多个Part</strong>，加快上传完成时间，并在Part上传完成之后调用CompleteMultipartUpload接口将这些Part组合成一个完整的Object。</p><p><strong>使用场景</strong></p><ul><li>大文件<strong>加速上传</strong></li></ul><p>当文件大小超过5 GB时，使用分片上传可实现并行上传多个Part以加快上传速度。</p><ul><li>网络<strong>环境较差</strong></li></ul><p>网络环境较差时，建议使用分片上传。当出现上传失败的时候，您仅需重传失败的Part。</p><ul><li>文件<strong>大小不确定</strong></li></ul><p>可以在需要上传的文件大小还不确定的情况下开始上传，这种场景在视频监控等行业应用中比较常见。</p><p>分片上传流程</p><p><img src="/../images/image-20250722170529941.png" alt="image-20250722170529941"></p><p><strong>流程说明</strong>：</p><ol><li>将待上传文件按照一定大小进行分片。</li><li>使用InitiateMultipartUpload接口初始化一个分片上传任务。</li><li>使用UploadPart接口上传分片。</li></ol><p>文件切分成Part之后，文件顺序是通过上传过程中指定的partNumber来确定，所以您可以并发上传这些碎片。并发数并非越多越快，请结合自身网络状况和设备负载综合考虑。</p><p>如果您希望终止上传任务，可调用AbortMultipartUpload接口，成功上传的Part会一并删除。</p><ol><li>使用CompleteMultipartUpload接口将Part组合成一个Object。</li></ol><p><strong>使用限制</strong>：byte 1B -&gt;kb-&gt;mb-&gt;gb-&gt;tb-&gt;pb-&gt;bb   ； 1TB &#x3D; 1024GB </p><p>文件大小不超过48.8TB</p><p>part分片数量：1-10000个</p><p>单个part分片大小：最小值为100kb，最大值为5GB.最后一个part的大小运行小于100kb</p><p>代码实现</p><p>参考 <a href="https://help.aliyun.com/zh/oss/user-guide/multipart-upload">https://help.aliyun.com/zh/oss/user-guide/multipart-upload</a> </p><p>添加方法：<code>com.itheima.sfbx.file.AliOSSUploadTest#testMultiPartUpload</code> 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分片上传</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMultiPartUpload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// Endpoint以华东1（杭州）为例，其它Region请按实际情况填写。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-shenzhen.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量OSS_ACCESS_KEY_ID和OSS_ACCESS_KEY_SECRET。</span></span><br><span class="line">    <span class="type">EnvironmentVariableCredentialsProvider</span> <span class="variable">credentialsProvider</span> <span class="operator">=</span> CredentialsProviderFactory.newEnvironmentVariableCredentialsProvider();</span><br><span class="line">    <span class="comment">// 填写Bucket名称，例如examplebucket。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;sfbx-oss&quot;</span>;</span><br><span class="line">    <span class="comment">// 填写Object完整路径，完整路径中不能包含Bucket名称，例如exampledir/exampleobject.txt。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;test/file/&quot;</span>+ UUID.randomUUID()+<span class="string">&quot;.pdf&quot;</span>;</span><br><span class="line">    <span class="comment">// 填写本地文件的完整路径，例如D:\\localpath\\examplefile.txt。</span></span><br><span class="line">    <span class="comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></span><br><span class="line">    String filePath= <span class="string">&quot;C:\\Users\\matef\\Desktop\\pics\\黑马Java面试宝典.pdf&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">    <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, credentialsProvider);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、初始化上传</span></span><br><span class="line">        <span class="type">InitiateMultipartUploadRequest</span> <span class="variable">initiateMultipartUploadRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitiateMultipartUploadRequest</span>(bucketName, objectName);</span><br><span class="line">        <span class="type">InitiateMultipartUploadResult</span> <span class="variable">initiateMultipartUploadResult</span> <span class="operator">=</span> ossClient.initiateMultipartUpload(initiateMultipartUploadRequest);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uploadId</span> <span class="operator">=</span> initiateMultipartUploadResult.getUploadId();</span><br><span class="line">        System.out.println(<span class="string">&quot;分片上传初始化完成；uploadId：&quot;</span> + uploadId);</span><br><span class="line">        <span class="comment">//2、分片上传文件</span></span><br><span class="line">        <span class="comment">//2.1、读取要上传的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="comment">//2.2、计算要分片上传的次数；每个分片大小设置为1M，计算要上传多少次</span></span><br><span class="line">        <span class="comment">//单个分片文件大小；1MB</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">partSize</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">//文件总长度</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">fileLength</span> <span class="operator">=</span> file.length();</span><br><span class="line">        <span class="comment">//分为几个分片</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">partCount</span>  <span class="operator">=</span> (<span class="type">int</span>) (fileLength / partSize);</span><br><span class="line">        <span class="keyword">if</span> (fileLength % partSize != <span class="number">0</span>) &#123;</span><br><span class="line">            partCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总共分为：&quot;</span> + partCount + <span class="string">&quot;个分片&quot;</span>);</span><br><span class="line">        <span class="comment">//2.3、循环上传分片</span></span><br><span class="line">        <span class="comment">//记录每次每个分片上传之后的eTag</span></span><br><span class="line">        List&lt;PartETag&gt; partETags = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PartETag&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">            <span class="comment">//当前分片的文件起始位置</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">startPos</span> <span class="operator">=</span> i * partSize;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建分片请求对象</span></span><br><span class="line">            <span class="type">UploadPartRequest</span> <span class="variable">uploadPartRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadPartRequest</span>();</span><br><span class="line">            <span class="comment">//桶名称</span></span><br><span class="line">            uploadPartRequest.setBucketName(bucketName);</span><br><span class="line">            <span class="comment">//上传的文件名</span></span><br><span class="line">            uploadPartRequest.setKey(objectName);</span><br><span class="line">            uploadPartRequest.setUploadId(uploadId);</span><br><span class="line">            <span class="comment">//分片号</span></span><br><span class="line">            uploadPartRequest.setPartNumber(i + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//设置当前分片文件内容</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            fileInputStream.skip(startPos);</span><br><span class="line">            uploadPartRequest.setInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前这个分片的大小；但是最后一个分片大小可能是不到1M的；所以需要处理</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">currentPartSize</span> <span class="operator">=</span> (i+<span class="number">1</span>==partCount)?(fileLength-startPos):partSize;</span><br><span class="line">            uploadPartRequest.setPartSize(currentPartSize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传分片</span></span><br><span class="line">            <span class="type">UploadPartResult</span> <span class="variable">uploadPartResult</span> <span class="operator">=</span> ossClient.uploadPart(uploadPartRequest);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Part#&quot;</span> + uploadPartRequest.getPartNumber() + <span class="string">&quot; ETag:&quot;</span> + uploadPartResult.getETag());</span><br><span class="line">            <span class="comment">//记录 etag</span></span><br><span class="line">            partETags.add(uploadPartResult.getPartETag());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、完成分片上传；合并（阿里云端合并）</span></span><br><span class="line">        <span class="type">CompleteMultipartUploadRequest</span> <span class="variable">completeMultipartUploadRequest</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompleteMultipartUploadRequest</span>(bucketName, objectName, uploadId, partETags);</span><br><span class="line"></span><br><span class="line">        ossClient.completeMultipartUpload(completeMultipartUploadRequest);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;分片上传完成！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OSSException oe) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Caught an OSSException, which means your request made it to OSS, &quot;</span></span><br><span class="line">                + <span class="string">&quot;but was rejected with an error response for some reason.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Message:&quot;</span> + oe.getErrorMessage());</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Code:&quot;</span> + oe.getErrorCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;Request ID:&quot;</span> + oe.getRequestId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Host ID:&quot;</span> + oe.getHostId());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClientException ce) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Caught an ClientException, which means the client encountered &quot;</span></span><br><span class="line">                + <span class="string">&quot;a serious internal problem while trying to communicate with OSS, &quot;</span></span><br><span class="line">                + <span class="string">&quot;such as not being able to access the network.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Message:&quot;</span> + ce.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ossClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四方保险中；超过1M大小的资料文件也是通过上述的思路实现的；只是分片都由阿里云提供的js完成，作为前端只需要引入对应的js并调用即可；自动进行分片上传。</p><p>垃圾文件处理</p><p>在四方保险项目中；产品附件页面可能会出现如下情况：</p><p><img src="/../images/image-20250722170849134.png" alt="image-20250722170849134"></p><p>在产品附件中；因为附件的上传和产品附件信息的保存并不是同步进行的；所以例如下列操作就会产生垃圾文件：</p><ul><li>首先，文件上传，此时文件已在对象存储及文件数据库中存在</li><li>然后，因网络断开或业务人员不去提交业务表单，导致business_id与file_id不绑定</li><li>最后，文件数据库中存在有一个business_id为空的文件记录，而这个文件是无意义的，需要删除（数据库中的记录和oss的文件）。</li></ul><p>处理此问题的方案有2种：</p><ul><li>定时清理：使用XXL-JOB组件每隔一段时间轮询文件数据库，如果发现文件的创建时间是10分钟前business_id为空的记录；如果是则认为是垃圾文件——》推荐</li><li>延迟清理：文件上传后，发送一条延迟消息到rabbitmq中，10分钟后执行消息检测此文件是否关联business_id，为空则认为是垃圾文件</li></ul><h2 id="任务调度-xxl-job"><a href="#任务调度-xxl-job" class="headerlink" title="任务调度-xxl-job"></a>任务调度-xxl-job</h2><p><strong>任务调度</strong>：可以指定具体的时间或者固定的频率来执行任务（代码）</p><p>常见的任务调度框架：</p><ul><li><strong>JDK timer</strong> 只能固定频率执行任务，而且只有应用服务器停止之后才能停止；不方便管理</li><li><strong>Spring task</strong> 可以指定时间和频率来执行任务；但是不能实现<strong>分布式任务调度（要将任务灵活的划分到不同的集群节点中执行任务）</strong>；如果要分布式任务调度要加分布式锁</li><li><strong>Quartz</strong> 传统老牌的任务调度框架；可以指定时间和频率来执行任务；<ul><li>简单触发器simpleTrigger：以固定的频率执行任务</li><li>任务调度触发器CronTrigger：可以指定精细的执行时间和频率执行</li></ul></li><li><strong>Elastic Job</strong> 分布式任务调度框架</li><li><strong>Xxl-job</strong> 分布式任务调度框架；有<strong>管理界面控制台</strong>可以随时添加、启动和指定执行策略。当下使用的更多</li><li>阿兹卡班</li></ul><p>XXL-JOB是美团点评中间件研发工程师许雪里开发的一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。目前已有多家公司接入xxl-job，包括比较知名的大众点评，京东，优信二手车，北京尚德，360金融 (360)，联想集团 (联想)，易信 (网易)等等….</p><p>官网地址：<a href="https://github.com/xuxueli/xxl-job">https://github.com/xuxueli/xxl-job</a></p><p>架构图</p><p><img src="/../images/image-20250722171117977.png" alt="image-20250722171117977"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpc 就是远程调度服务  可见nacos原理  只是协议不同 </span><br></pre></td></tr></table></figure><ol><li><strong>XXL-JOB 分为哪几个部分？</strong><br>XXL-JOB 主要由 <strong>调度中心（Admin）</strong> 和 <strong>执行器（Executor）</strong> 两大部分组成，采用 B&#x2F;S 架构，调度中心是服务端，执行器是客户端 。调度中心负责管理调度信息、任务调度、监控告警和故障转移等，执行器负责接收调度请求并执行具体任务逻辑 。</li><li><strong>在调度中心如何监控任务的执行过程？</strong><br>调度中心通过 UI 界面实时查看调度日志，支持实时监控任务进度，并提供 Rolling 实时日志查看功能，可实时查看执行器输出的完整执行日志 。此外，调度中心会接收执行器反馈的执行结果（成功、失败等），用于监控任务执行状态 。</li><li><strong>调度中心如何知道执行器的 IP 和端口？</strong><br>执行器启动时会启动一个注册线程，将执行器的名字（appname）及其所在机器的 IP 和端口信息注册到调度中心（xxl_job_registry 表），调度中心通过注册信息访问执行器提供的 HTTP 接口 。</li><li><strong>在执行器中有哪几个队列？为什么会有队列？</strong><br>执行器为每个任务维护一个线程，线程内有调度队列，调度信息入队列后逐个处理调度请求；任务执行完成后，执行结果会周期性地推送到调度中心 。队列的存在用于管理任务调度和结果反馈，确保任务按顺序执行和结果及时返回。</li></ol><p>快速入门</p><p>调度中心</p><p>在四方保险中已经在虚拟机中部署好xxl-job调度中心；</p><p>访问地址：<a href="http://192.168.12.129:8280/xxl-job-admin">http://192.168.12.129:8280/xxl-job-admin</a> 用户名：admin；密码：123456</p><p><img src="/../images/image-20250722171726007.png" alt="image-20250722171726007"></p><p>执行器</p><p>在四方保险中，定时任务的执行都集中到了 <code>task-job 模块</code>工程中；所以启动了这个工程就相当于启动了整个四方保险的与定时任务相关的xxl-job执行器。启动类 <code>com.itheima.sfbx.task.TaskJobStart</code></p><p>启动执行器之后；就可以在调度中心中 新增执行器；然后再去添加管理要具体执行的任务即可。</p><p><strong>1）新增执行器；（四方保险已经新增）</strong></p><p><img src="/../images/image-20250722171754572.png" alt="image-20250722171754572"></p><p><strong>2）新增 任务</strong></p><p><img src="/../images/image-20250722171843008.png" alt="image-20250722171843008"></p><p><img src="/../images/image-20250722171849468.png" alt="image-20250722171849468"></p><p><strong>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略。</strong></p><ul><li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；</li><li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li><li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li></ul><p><strong>XXL-JOB使用步骤</strong>：</p><ul><li>在微服务中引入依赖；</li><li>配置xxl-job地址</li><li>编写定时执行的任务；上面需要添加一个注解 <strong><code>@XxlJob</code></strong>（任务名称）</li><li>访问xxl-job的控制台；添加任务，指定执行时间等信息</li></ul><p><strong>Cron表达式：</strong></p><p>几个域（子表达式）  7个或6个</p><p>秒 分 时 日 月 周(一周里面的第几天) 年（可选）   注意  日 和 周 必须有一个是<code>?</code>  </p><blockquote><p>*表示任意，每    </p><p>&#x2F; 频率 </p><p>-范围   , 枚举 </p><p>? 日 和  周不能同时使用，如果使用了日则周对应使用? ；如果使用了周，则日使用？；表示不使用该字段；只能使用在周和日两个域中</p><p>L 表示最后；放置在日这个域中表示 最后1天</p><p>周 从周日开始1-7（周日是一周的第一天，从1开始计算；周一就是2；）</p></blockquote><p>举例：</p><p>2022年12月21日10点30分8秒          8 30 10 21 12 ?  2022</p><p>每天某时间点执行任务</p><p>每天的  10点50分10秒 执行任务     10 50 10 * * ? </p><p>每天10点钟至11点钟，每分钟执行一次     0 * 10 * * ?</p><p>每月15日11 点执行      0 0 11 15 * ?</p><p>每天12点-1点之间，每间隔10秒执行一次       0&#x2F;10 * 12 * * ?</p><p>每天下午3点20分 第4秒  第7秒  第13秒  第40秒  第55秒  第58秒执行    4,7,13,40,55,58   20 15 * * ?</p><p>每天下午5点50分 第1秒至第50秒  执行   1-50 50 17 * * ?</p><p>每天晚上8点-11点 整执行     0 0 20-23 * * ?  </p><p>每年奇数月的每一天上午8点至12点 下午 3点至6点  晚上8点 与10点 每间隔2秒执行      0&#x2F;2 *  8-12,15-18,20,22  * 1&#x2F;2 ?</p><p><strong>练习</strong>：</p><p>1、每个季度的最后一天的下午5点20分发送一个季度报表*</p><blockquote><p>:0 20 17 L 3,6,9,12 ?</p></blockquote><p>2、每周三、周五的上午10点10秒开始每隔3秒执行</p><blockquote><p>: 10&#x2F;3 * 0 10 ? * 4-6</p></blockquote><p>3、 2-10 3,5,7,9 * ? 3-6 1-5</p><blockquote><p>每年三月到六月 周日到周四 每个小时 3，5，7，9分 2到10s 执行 </p></blockquote><p>定时清理垃圾文件</p><p>使用XXL-JOB每间隔一定时间实现对<code>tab_file</code>表进行扫描，找出10分钟之内未关联业务记录进行删除。</p><p>1）执行器任务</p><p><img src="/../images/image-20250722173108446.png" alt="image-20250722173108446"></p><p>上面代码中 <code>FileBusinessFeign</code> 调用了<code>file-web</code>提供的附件清理远程服务接口：</p><p><img src="/../images/image-20250722173233306.png" alt="image-20250722173233306"></p><p>对应的清理接口如下：</p><p><img src="/../images/image-20250722173246024.png" alt="image-20250722173246024"></p><p>在删除垃圾的附件时；不仅删除了数据库中记录还删除了遗留在OSS上的文件。</p><p><img src="/../images/image-20250722173255387.png" alt="image-20250722173255387"></p><p>2）配置xxl-job任务</p><p><img src="/../images/image-20250722173546720.png" alt="image-20250722173546720"></p><p>上述配置了每天凌晨执行；如果是配置成每隔10分钟；那么cron表达式为：0 0&#x2F;10 * * * ?</p><h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>简介</p><p>最初我们使用SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性。而SpringCloud-Stream的出现<strong>屏蔽底层消息中间件的差异</strong>，降低切换MQ版本，统一消息的编程模型的组件，<strong>实现了应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>Spring Cloud Stream</strong>是一个用于构建 与 共享消息系统 连接的高度可扩展的事件驱动微服务。假设一个开发团队，原来使用的是ActiveMQ；后来发现稳定性和并发能力都更好的RabbitMQ；想要替换的话，那么使用Spring Cloud Stream就只需要修改配置即可，不用修改代码；降低了<strong>更换</strong>消息中间件的成本。<strong>Spring Cloud Stream屏蔽了消息中间件的差异，降低更换中间件的成本，统一消息的编程模型。</strong></p><p>架构原理</p><p><img src="/../images/image-20250723085416276.png" alt="image-20250723085416276"></p><ul><li>Source：输出消息</li><li>Sink：输入消息</li><li>Channel：通道，是队列 Queue 的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel 对队列进行配置；</li><li>Binder：绑定器；用于连接消息中间件，屏蔽 MQ 之间的差异</li></ul><p>相关概念</p><p>一个Spring Cloud Stream应用程序由一个中间件中立的核心组成。该应用程序通过Spring Cloud  Stream注入到其中的输入和输出通道与外界进行通信。应用程序通过 inputs 或者 outputs 来与 SpringCloud  Stream 中的 binder（绑定器） 对象交互。通过我们配置来 binding（绑定），而SpringCloud Stream 的  binder 对象负责与消息中间件交互。</p><p><img src="/../images/image-20250723085552616.png" alt="image-20250723085552616"></p><ul><li>Binder 绑定器：用于绑定应用服务器与消息中间件；配置文件中可以指定消息队列的连接信息等；可以改变类型（RabbitMQ，kafka）</li><li>input输入：应用服务器从绑定器绑定的通道中接收消息，配置文件中指定交换机、队列；可以使用@Input注解标识</li><li>output输出：应用服务器通过绑定器绑定的通道发送消息，要与input中指定的交换机、队列一致；可以使用@OutPut注解标识</li><li>@StreamListener 监听器，用于接收消费队列中的消息</li><li>@EnableBinding 将通道channel与Exchange绑定在一起</li></ul><p>快速入门</p><p>导入工程</p><p>复制 <code>资料/springcloud-stream</code> 工程到工作目录；然后使用new project全新IDEA窗口打开该示例工程；</p><p><img src="/../images/image-20250723091933334.png" alt="image-20250723091933334"></p><p>发送消息</p><p>配置Stream</p><p>查看阅读：<code>springcloud-stream\stream-1\src\main\resources\application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream-1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">stream1-Input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 消息手动确认</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbitxxx:</span> <span class="comment"># 绑定器名称；自定义</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.129</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">pass</span></span><br><span class="line">                <span class="attr">vhost:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">stream1-Output:</span> <span class="comment"># 发送消息的输出名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-destination</span> <span class="comment"># 交换机名称；自定义</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-queue</span> <span class="comment"># 队列名称；自定义；可以不指定则匿名</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 内容类型为json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbitxxx</span> <span class="comment"># 绑定器名称与前面配置的要保持一致</span></span><br><span class="line">        <span class="attr">stream1-Input:</span> <span class="comment"># 接收消息的输入名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream2-exchange</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream2-queue</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbitxxx</span></span><br></pre></td></tr></table></figure><blockquote><p>启动一个名为 <code>stream-1</code> 的服务，监听端口 8081，使用 RabbitMQ 作为消息中间件，连接地址为 <code>192.168.12.129</code>，并定义了两个通道：一个用于发送消息到交换机 <code>stream1-destination</code>，另一个用于从交换机 <code>stream2-exchange</code> 接收消息，且接收端启用了手动确认机制。</p></blockquote><p>编写Source</p><p>在stream中；要发送消息需要使用到Source；但是这个Source默认定义的绑定也就是配置文件中的 <code>stream1-Output</code> 如果写成 <code>output</code>；那么现在这一步 编写Source 就可以省略了；更加简单。但是一般想要自己指定绑定的名称的话；就得重写Source。 按照我们的配置文件；需要写一个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springcloud-stream\`**`stream-1`**`\src\main\java\com\heima\stream\messaging\Stream1Source.java</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.messaging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Output;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个类的编写参考自 org.springframework.cloud.stream.messaging.Source</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream1Source</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管道名称；要与配置文件中的管道名称一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;stream1-Output&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出管道</span></span><br><span class="line">    <span class="meta">@Output(Stream1Source.OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">stream1Output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息</p><p>编写对于的处理器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springcloud-stream\stream-1\src\main\java\com\heima\stream\controller\Stream1MsgController.java</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.stream.service.MessageSendService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/stream&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream1MsgController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageSendService messageSendService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send/&#123;msg&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">send</span><span class="params">(<span class="meta">@PathVariable(&quot;msg&quot;)</span> String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageSendService.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写对于的消息发送业务接口、实现类：</p><p>springcloud-stream\stream-1\src\main\java\com\heima\stream\service\MessageSendService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageSendService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sendMessage</span><span class="params">(String msg)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springcloud-stream\stream-1\src\main\java\com\heima\stream\service\impl\MessageSendServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.stream.messaging.Stream1DelaySource;</span><br><span class="line"><span class="keyword">import</span> com.heima.stream.messaging.Stream1Source;</span><br><span class="line"><span class="keyword">import</span> com.heima.stream.service.MessageSendService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//定义消息的推送和接收管道；如果使用Source则表示输出，且输出管道名称为output；</span></span><br><span class="line"><span class="comment">//也可以绑定使用Sink则表示输入，且输入管道名称为input</span></span><br><span class="line"><span class="comment">//@EnableBinding(Source.class)</span></span><br><span class="line"><span class="comment">//定义消息的推送和接收管道；且自定义输入、输出的管道名称</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;Stream1Source.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSendServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageSendService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Stream1Source stream1Source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sendMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Message&lt;String&gt; stringMessage = MessageBuilder.withPayload(msg).build();</span><br><span class="line">        <span class="keyword">return</span> stream1Source.stream1Output().send(stringMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上述的 @EnableBinding 注解很关键；</p><ul><li>它是一个复合注解，包含了@Configuration其实在上面这个类上是可以不需要@Service了</li><li>它可以定义Source 输出管道那么就是发送消息</li><li>它可以定义Sink 输入管道就是接收消息的</li></ul></blockquote><p>接收消息</p><p>配置Stream</p><p><code>springcloud-stream\</code>**<code>stream-2</code>**<code>\src\main\resources\application.yml</code> 内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream-2</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 绑定器名称；自定义</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.129</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">pass</span></span><br><span class="line">                <span class="attr">vhost:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">stream2-Output:</span> <span class="comment"># 发送消息的输出名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream2-exchange</span> <span class="comment"># 交换机名称；自定义</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream2-queue</span> <span class="comment"># 队列名称；自定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">        <span class="attr">stream2-Input:</span> <span class="comment"># 接收消息的输入名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-destination</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-queue</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">stream2-Input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 消息手动确认</span></span><br></pre></td></tr></table></figure><p>编写Sink</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.messaging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Input;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.SubscribableChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream2Sink</span> &#123;</span><br><span class="line">    <span class="comment">// 定义输入管道名称；要与配置文件中的保持一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;stream2-Input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入管道</span></span><br><span class="line">    <span class="meta">@Input(Stream2Sink.INPUT)</span></span><br><span class="line">    SubscribableChannel <span class="title function_">stream2Input</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">springcloud-stream\stream-2\src\main\java\com\heima\stream\listener\MessageListener.java</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.stream.messaging.Stream2DelaySink;</span><br><span class="line"><span class="keyword">import</span> com.heima.stream.messaging.Stream2Sink;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(&#123;Stream2Sink.class&#125;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Stream2Sink.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;stream2接收到消息：&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考接收map的消息监听器的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.stream.messaging.Stream1Sink;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Stream1Sink.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Stream1Sink.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Map&lt;String, Object&gt; map,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Header(AmqpHeaders.CHANNEL)</span> Channel channel,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> Long deliveryTag)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收到消息：&#123;&#125;&quot;</span>, map);</span><br><span class="line">        <span class="comment">//引入了手动确认机制，所以需要手动确认；如果没有手动确认，</span></span><br><span class="line">        <span class="comment">// 消息会一直处于未确认的状态，一直处于队列中，直到超时</span></span><br><span class="line">        channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延迟消息</p><p>发送方配置</p><p><code>springcloud-stream\</code>**<code>stream-1</code>**<code>\src\main\resources\application.yml</code> 修改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream-1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">stream1-Input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 消息手动确认</span></span><br><span class="line">          <span class="attr">stream1-delay-Output:</span></span><br><span class="line">            <span class="attr">producer:</span></span><br><span class="line">              <span class="attr">delayed-exchange:</span> <span class="literal">true</span> <span class="comment"># 开启延迟交换机</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbitxxx:</span> <span class="comment"># 绑定器名称；自定义</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.129</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">pass</span></span><br><span class="line">                <span class="attr">vhost:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">stream1-Output:</span> <span class="comment"># 发送消息的输出名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-destination</span> <span class="comment"># 交换机名称；自定义</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-queue</span> <span class="comment"># 队列名称；自定义；可以不指定则匿名</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 内容类型为json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbitxxx</span> <span class="comment"># 绑定器名称与前面配置的要保持一致</span></span><br><span class="line">        <span class="attr">stream1-delay-Output:</span> <span class="comment"># 发送消息的输出名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-delay-exchange</span> <span class="comment"># 交换机名称；自定义</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-delay-queue</span> <span class="comment"># 队列名称；自定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbitxxx</span></span><br><span class="line">        <span class="attr">stream1-Input:</span> <span class="comment"># 接收消息的输入名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream2-exchange</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream2-queue</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbitxxx</span></span><br></pre></td></tr></table></figure><p>上述文件中最重要的是要开启发送方 延迟队列 delayed-exchange: true</p><p>发送延迟消息</p><p><strong>定义Source类</strong>：</p><p>springcloud-stream\stream-1\src\main\java\com\heima\stream\messaging\Stream1DelaySource.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.messaging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Output;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream1DelaySource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管道名称；要与配置文件中的管道名称一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OUTPUT</span> <span class="operator">=</span> <span class="string">&quot;stream1-delay-Output&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出管道</span></span><br><span class="line">    <span class="meta">@Output(Stream1DelaySource.OUTPUT)</span></span><br><span class="line">    MessageChannel <span class="title function_">delayOutput</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理器方法</strong>：</p><p><img src="/../images/image-20250723101729279.png" alt="image-20250723101729279"></p><p><strong>接口类</strong>：</p><p><img src="/../images/image-20250723101750574.png" alt="image-20250723101750574"></p><p><strong>实现类</strong>：</p><p><img src="/../images/image-20250723101807911.png" alt="image-20250723101807911"></p><p>接收方配置</p><p>修改配置文件</p><p><code>springcloud-stream\stream-2\src\main\resources\application.yml </code>为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">stream-2</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 绑定器名称；自定义</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 绑定器类型</span></span><br><span class="line">          <span class="attr">environment:</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.12</span><span class="number">.129</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">pass</span></span><br><span class="line">                <span class="attr">vhost:</span> <span class="string">/</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">stream2-Output:</span> <span class="comment"># 发送消息的输出名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream2-exchange</span> <span class="comment"># 交换机名称；自定义</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream2-queue</span> <span class="comment"># 队列名称；自定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">        <span class="attr">stream2-Input:</span> <span class="comment"># 接收消息的输入名称；自定义</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-destination</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-queue</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 这个与发送时要一样</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">        <span class="attr">stream2-delay-Input:</span> <span class="comment"># 接收消息的输入名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">stream1-delay-exchange</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">stream1-delay-queue</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span></span><br><span class="line">      <span class="attr">rabbit:</span></span><br><span class="line">        <span class="attr">bindings:</span></span><br><span class="line">          <span class="attr">stream2-delay-Input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 消息手动确认</span></span><br><span class="line">              <span class="attr">delayed-exchange:</span> <span class="literal">true</span> <span class="comment"># 开启延迟交换机</span></span><br><span class="line">          <span class="attr">stream2-Input:</span></span><br><span class="line">            <span class="attr">consumer:</span></span><br><span class="line">              <span class="attr">acknowledge-mode:</span> <span class="string">manual</span> <span class="comment"># 消息手动确认</span></span><br></pre></td></tr></table></figure><blockquote><p>上述配置中，重要是要开启消息input消费要开启延迟队列</p></blockquote><p>接收延迟消息</p><p><strong>编写Sink类</strong>：springcloud-stream\stream-2\src\main\java\com\heima\stream\messaging\Stream2DelaySink.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.stream.messaging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.Input;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.SubscribableChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream2DelaySink</span> &#123;</span><br><span class="line">    <span class="comment">// 定义输入管道名称；要与配置文件中的保持一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;stream2-delay-Input&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入管道</span></span><br><span class="line">    <span class="meta">@Input(Stream2DelaySink.INPUT)</span></span><br><span class="line">    SubscribableChannel <span class="title function_">stream2Input</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写消息监听方法</strong>：</p><p>springcloud-stream\stream-2\src\main\java\com\heima\stream\listener\MessageListener.java</p><p><img src="/../images/image-20250723101930823.png" alt="image-20250723101930823"></p><p>延迟清理垃圾文件</p><p>在学习了解了Spring Cloud Stream之后；回到 四方保险；清理垃圾文件的另外一种方案。</p><p>当文件上传对象存储且保存数据库后，上传方法最后会发送延迟信息当前文件记录信息到RabbitMQ中，<code>task-listener</code>10分钟后消费到消息，然后通过openfegin调用<code>file-web</code>中的查询处理方法，如果当前文件记录还是没有businessId,则认为是垃圾文件进行删除。</p><p>消息发送端</p><p>配置Stream</p><p>在<code>file-web模块</code>的<code>bootstrap.yml</code>中引入关于SpringCloud Stream配置。</p><p><img src="/../images/image-20250723102016950.png" alt="image-20250723102016950"></p><p>上述的两个文件都已经放置在nacos配置中心中管理；可以访问nacos查阅对应的文件。</p><p>项目启动后可以打开RabbitMQ的管理界面<a href="http://192.168.12.129:15672查看：">http://192.168.12.129:15672查看：</a></p><p><img src="/../images/image-20250723102029094.png" alt="image-20250723102029094"></p><p>定义Source</p><p>根据nacos中配置文件指定的output；</p><p><img src="/../images/image-20250723102056800.png" alt="image-20250723102056800"></p><p>编写对应的Source类的绑定类和FileSource类如下：</p><p><img src="/../images/image-20250723102135196.png" alt="image-20250723102135196"></p><p><img src="/../images/image-20250723102142177.png" alt="image-20250723102142177"></p><p>发送消息</p><p><img src="/../images/image-20250723102153619.png" alt="image-20250723102153619"></p><p>消息接收端</p><p>配置Stream</p><p>在<code>task-listener模块</code>的<code>bootstrap.yml</code>中引入关于Spring Cloud Stream配置。</p><p><img src="/../images/image-20250723102213741.png" alt="image-20250723102213741"></p><p>定义Sink</p><p>根据nacos中配置文件<code>shared-stream-rabbit-sink-file.yml</code>指定的input；</p><p><img src="/../images/image-20250723102301758.png" alt="image-20250723102301758"></p><p>编写对应的Sink绑定类和Sink类如下：</p><p><img src="/../images/image-20250723102309386.png" alt="image-20250723102309386"></p><p>FileSink类如下：</p><p><img src="/../images/image-20250723102317449.png" alt="image-20250723102317449"></p><p>接收消息</p><p>消息的接收处理统一在 <code>task-listener</code> 中处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfbx-cloud\sfbx-task\task-listener\src\main\java\com\itheima\sfbx\task\listen\FileListen.java</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250723102336716.png" alt="image-20250723102336716"></p><h2 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h2><p><strong>为什么分片文件上传需要经过后端微服务，而不是直接上传到 OSS？</strong></p><ul><li><strong>安全控制</strong>：前端直接上传 OSS 需暴露密钥，存在泄露风险；通过后端可控签名、权限。</li><li><strong>业务耦合</strong>：后端需记录文件元数据（如业务 ID、文件类型）到数据库，直接上传无法绑定业务。</li><li><strong>统一处理</strong>：后端可统一处理异常、日志、垃圾文件标记等逻辑。</li><li><strong>动态配置</strong>：后端可根据业务动态选择 OSS 存储（阿里云&#x2F;七牛云），前端无感知。</li></ul><p><strong>分片上传的流程</strong></p><ol><li><strong>初始化</strong>：调用后端 <code>/initiate-multipart-upload</code> 获取 <code>uploadId</code>。</li><li><strong>分片上传</strong>：前端将文件按固定大小（如 1MB）切片，循环调用 <code>/upload-part</code> 上传每个分片，返回 <code>ETag</code>。</li><li><strong>合并分片</strong>：所有分片上传完成后，调用 <code>/complete-multipart-upload</code> 合并文件，OSS 返回最终文件地址。</li><li><strong>记录数据库</strong>：后端将文件信息（URL、业务 ID、文件类型）存入 <code>tab_file</code> 表。</li></ol><p><strong>如何判断是否重复上传同一个文件？</strong></p><ul><li><strong>文件哈希校验</strong>：计算文件 MD5 或 SHA-256，上传前查询数据库是否已存在相同哈希。</li><li><strong>秒传机制</strong>：若哈希已存在，直接返回已有文件地址，无需重复上传。</li></ul><p><strong>如何校验文件是否为恶意文件？</strong></p><ul><li><strong>文件类型检查</strong>：通过后缀名和 MIME 类型双重验证（如仅允许 <code>.pdf</code> 和 <code>application/pdf</code>）。</li><li><strong>内容扫描</strong>：集成杀毒引擎（如 ClamAV）或服务（阿里云内容安全）扫描文件内容。</li><li><strong>大小限制</strong>：限制文件大小（如单文件 ≤ 50MB），防止超大文件攻击。</li></ul><p><strong>保险产品附件为什么需要清理？如何清理？</strong></p><p><strong>原因</strong>：</p><ul><li>上传文件后未提交表单，导致文件无关联业务 ID（<code>business_id</code> 为空），占用 OSS 存储。</li></ul><p><strong>清理方案</strong>：</p><ul><li><strong>定时任务（XXL-JOB）</strong>：<br>每天凌晨扫描 <code>tab_file</code> 表，删除创建时间超过 10 分钟且 <code>business_id</code> 为空的记录，同步删除 OSS 文件。<br><strong>Cron 表达式</strong>：<code>0 0/10 * * * ?</code>（每 10 分钟执行）。</li><li><strong>延迟消息（RabbitMQ）</strong>：<br>文件上传后发送延迟消息（10 分钟后触发），检测无业务关联则删除。</li></ul><p> <strong>XXL-JOB 的阻塞处理策略</strong></p><ul><li><strong>单机串行（默认）</strong>：任务进入 FIFO 队列，串行执行。</li><li><strong>丢弃后续调度</strong>：若执行器忙碌，新任务直接丢弃并标记失败。</li><li><strong>覆盖之前调度</strong>：终止当前任务，清空队列，执行新任务。</li></ul><p><strong>Cron 表达式格式及定时任务执行时间</strong></p><ul><li><strong>格式</strong>：<code>秒 分 时 日 月 周 年（可选）</code>。</li><li><strong>示例</strong>：<ul><li>每天凌晨 2 点：<code>0 0 2 * * ?</code></li><li>每 10 分钟：<code>0 0/10 * * * ?</code></li></ul></li><li><strong>四方保险场景</strong>：垃圾文件清理任务每天凌晨 2 点执行（低峰期）。</li></ul><p><strong>Spring Cloud Stream 如何使用（发送&#x2F;接收消息）？</strong><br><strong>发送消息</strong>：</p><ol><li>配置 <code>application.yml</code> 定义 <code>Output</code> 通道（如 <code>stream1-Output</code>）。</li><li>通过 <code>@EnableBinding(Source.class)</code> 绑定通道，使用 <code>MessageChannel</code> 发送消息。</li></ol><p><strong>接收消息</strong>：</p><ol><li>配置 <code>Input</code> 通道（如 <code>stream2-Input</code>）。</li><li>使用 <code>@StreamListener</code> 注解监听队列，处理消息。</li></ol><p><strong>延迟消息</strong>：</p><ul><li>发送方配置 <code>delayed-exchange: true</code>，消息设置延迟时间（如 10 分钟）。</li><li>接收方监听延迟队列，触发清理逻辑。</li></ul><p><strong>简历职责优化（可直接使用）</strong></p><p>“解决保险产品附件（PDF&#x2F;图片）过大导致上传失败的问题，设计分片上传机制（1MB 切片 + OSS 合并），提升上传成功率 90%。”</p><p><strong>职责 2</strong>：<br>“引入 XXL-JOB 定时任务，每日凌晨扫描未关联业务的附件，自动清理垃圾文件，释放 OSS 存储空间 72%。”</p><p><strong>职责 3</strong>：<br>“通过 RabbitMQ 延迟消息优化附件上传流程，10 分钟后异步检测无效文件并删除，减少人工干预。”</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大核心计算-变限积分与反常积分</title>
      <link href="/2025/07/17/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%8F%98%E9%99%90%E7%A7%AF%E5%88%86%E5%92%8C%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/"/>
      <url>/2025/07/17/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%8F%98%E9%99%90%E7%A7%AF%E5%88%86%E5%92%8C%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="变限积分函数"><a href="#变限积分函数" class="headerlink" title="变限积分函数"></a>变限积分函数</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p><img src="/../images/image-20250717213708446.png" alt="image-20250717213708446"></p><h2 id="连续型"><a href="#连续型" class="headerlink" title="连续型"></a>连续型</h2><p><img src="/../images/image-20250717213810591.png" alt="image-20250717213810591"></p><p><img src="/../images/image-20250717213925355.png" alt="image-20250717213925355"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种题目需要画图</span><br></pre></td></tr></table></figure><h2 id="可导性"><a href="#可导性" class="headerlink" title="可导性"></a>可导性</h2><p><img src="/../images/image-20250717214241454.png" alt="image-20250717214241454"></p><h2 id="变限积分的导数"><a href="#变限积分的导数" class="headerlink" title="变限积分的导数"></a>变限积分的导数</h2><p><img src="/../images/image-20250717214519894.png" alt="image-20250717214519894"></p><p><img src="/../images/image-20250717214739760.png" alt="image-20250717214739760"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断奇偶</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250717214831990.png" alt="image-20250717214831990"></p><h1 id="反常积分函数"><a href="#反常积分函数" class="headerlink" title="反常积分函数"></a>反常积分函数</h1><h2 id="无穷限上的反常积分"><a href="#无穷限上的反常积分" class="headerlink" title="无穷限上的反常积分"></a>无穷限上的反常积分</h2><p><img src="/../images/image-20250718183926236.png" alt="image-20250718183926236"></p><p>p积分</p><p><img src="/../images/image-20250718184002307.png" alt="image-20250718184002307"></p><p><img src="/../images/image-20250718184017195.png" alt="image-20250718184017195"></p><h2 id="无界函数的反常积分（瑕点）"><a href="#无界函数的反常积分（瑕点）" class="headerlink" title="无界函数的反常积分（瑕点）"></a>无界函数的反常积分（瑕点）</h2><p><img src="/../images/image-20250718184142227.png" alt="image-20250718184142227"></p><p><img src="/../images/image-20250718184405120.png" alt="image-20250718184405120"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大核心计算-定积分</title>
      <link href="/2025/07/16/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
      <url>/2025/07/16/%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E8%AE%A1%E7%AE%97-%E5%AE%9A%E7%A7%AF%E5%88%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="定积分的性质"><a href="#定积分的性质" class="headerlink" title="定积分的性质"></a>定积分的性质</h1><h2 id="线性性质"><a href="#线性性质" class="headerlink" title="线性性质"></a>线性性质</h2><p><img src="/../images/image-20250716212421178.png" alt="image-20250716212421178"></p><h2 id="不等式性质"><a href="#不等式性质" class="headerlink" title="不等式性质"></a>不等式性质</h2><p><img src="/../images/image-20250716212534174.png" alt="image-20250716212534174"></p><h2 id="对称性"><a href="#对称性" class="headerlink" title="对称性"></a>对称性</h2><h1 id="定积分的计算"><a href="#定积分的计算" class="headerlink" title="定积分的计算"></a>定积分的计算</h1><h2 id="牛顿莱布尼兹公式"><a href="#牛顿莱布尼兹公式" class="headerlink" title="牛顿莱布尼兹公式"></a>牛顿莱布尼兹公式</h2><h2 id="定积分换元"><a href="#定积分换元" class="headerlink" title="定积分换元"></a>定积分换元</h2><h2 id="定积分分部积分"><a href="#定积分分部积分" class="headerlink" title="定积分分部积分"></a>定积分分部积分</h2><p><img src="/../images/image-20250716212749666.png" alt="image-20250716212749666"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抽象函数积分 用分部积分</span><br></pre></td></tr></table></figure><h2 id="区间在线"><a href="#区间在线" class="headerlink" title="区间在线"></a>区间在线</h2><p><img src="/../images/image-20250716212855891.png" alt="image-20250716212855891"></p><p><img src="/../images/image-20250716212910907.png" alt="image-20250716213004624"></p><p><img src="/../images/image-20250716213028100.png" alt="image-20250716213028100"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后能用 x = t + 二分之派 换元 得到对称区间积分 利用奇偶性化简</span><br></pre></td></tr></table></figure><h2 id="华里式公式"><a href="#华里式公式" class="headerlink" title="华里式公式"></a>华里式公式</h2><p><img src="/../images/image-20250716213350159.png" alt="image-20250716213350159"></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高数 </tag>
            
            <tag> 三大核心计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日任务</title>
      <link href="/2025/07/16/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/"/>
      <url>/2025/07/16/%E6%AF%8F%E6%97%A5%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>每天鞭策必须完成！！！一旦懈怠就会习以为常，自甘堕落…</p><span id="more"></span><p>1.一道leetcode</p><p>2.学java</p><p>3.背100个英语单词</p><p>4.学考研数学(包括两道极限，两道积分)</p><p>5.睡前学一个小时政治</p>]]></content>
      
      
      <categories>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flag</title>
      <link href="/2025/07/16/%E7%9B%AE%E6%A0%87/"/>
      <url>/2025/07/16/%E7%9B%AE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>北邮密码中科大网安成电密码        川大智能科学与技术</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎bb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署自己的博客(hexo)</title>
      <link href="/2025/07/16/%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-hexo/"/>
      <url>/2025/07/16/%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2-hexo/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="搭建自己的博客"><a href="#搭建自己的博客" class="headerlink" title="搭建自己的博客"></a>搭建自己的博客</h1><h2 id="生成自己的-github-io-仓库"><a href="#生成自己的-github-io-仓库" class="headerlink" title="生成自己的.github.io 仓库"></a>生成自己的.github.io 仓库</h2><h2 id="在本地部署-Hexo-环境"><a href="#在本地部署-Hexo-环境" class="headerlink" title="在本地部署 Hexo 环境"></a>在本地部署 Hexo 环境</h2><ul><li>安装 Hexo： <code>npm install -g hexo-cli</code></li><li>初始化 Hexo 框架：<code>hexo init blog</code></li><li>进入上条命令所创建的 blog 文件夹中：<code>cd blog</code></li><li>安装相关依赖：<code>npm install</code></li><li>启动 Hexo 服务：<code>hexo server</code></li><li>访问默认界面，测试是否安装成功：浏览器访问<code>localhost:4000</code></li></ul><h2 id="配置-Butterfly-主题"><a href="#配置-Butterfly-主题" class="headerlink" title="配置 Butterfly 主题"></a>配置 Butterfly 主题</h2><ul><li>进入上一步创建的 blog 文件夹中，将 Next 主题相关文件从 github 克隆到 themes 文件夹中<ul><li>命令：git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;butterfly</li></ul></li><li>配置 Hexo 的主题参数（在根目录的 <code>_config.yml</code> 文件中），选择使用 Next 主题<ul><li>修改参数为：<code>theme: butterfly</code></li></ul></li><li>启动 Hexo 服务，验证 Next 主题是否启用<ul><li>命令行执行：<code>hexo server</code></li><li>浏览器访问：<code>localhost:4000</code></li></ul></li></ul><h2 id="添加博客内容"><a href="#添加博客内容" class="headerlink" title="添加博客内容"></a>添加博客内容</h2><ul><li><p>将写好的 Markdown 放到 <code>source\_posts</code> 目录</p></li><li><p>将相应的图片放到 <code>source\images</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;我的文章标题&quot;</span></span><br><span class="line">会自动生成文件：</span><br><span class="line"><span class="built_in">source</span>/_posts/我的文章标题.md</span><br></pre></td></tr></table></figure></li></ul><h2 id="将生成的静态页面部署到-github-上"><a href="#将生成的静态页面部署到-github-上" class="headerlink" title="将生成的静态页面部署到 github 上"></a>将生成的静态页面部署到 github 上</h2><p>修改站点配置文件<code>_config.yml</code>的最后部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>要先安装deploy-git，才能用命令部署到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean #清除之前生成的东西</span><br><span class="line">hexo generate  #生成静态文章，缩写hexo g</span><br><span class="line">hexo deploy  #部署文章，缩写hexo d</span><br></pre></td></tr></table></figure><h2 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>打开生成的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source/categories/index.md</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250716132942561.png" alt="image-20250716132942561">把“分类”加到导航栏打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">themes/butterfly/_config.yml</span><br></pre></td></tr></table></figure><p>找到 <code>menu:</code> 这一段，取消注释（或加上）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>要被添加到分类的文章头部加上</p><p>categories:</p><p>  -java(like) (两个空格！！！)</p><h2 id="创建tags"><a href="#创建tags" class="headerlink" title="创建tags"></a>创建tags</h2><p>hexo new page tags</p><p>修改source\categories文件夹下index.md文件为下面的代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-03-04 17:18:32</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">tags</span>   <span class="comment">#注意此行不添加则点击不会显示标签</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><p>被添加文件 </p><p>tags:  [….]</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/07/14/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/07/14/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<p><strong>这是我的第一个java项目，加油！！！</strong></p><span id="more"></span><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day-1"></a>Day-1</h2><h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><p>苍穹外卖的前后端分离了吗？前端使用什么服务器，后端采用什么结构设计？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">苍穹外卖确实采用了 前后端分离 的架构：</span><br><span class="line"></span><br><span class="line">前端服务器：使用 Nginx 部署静态资源，前端管理端基于 Vue.js + ElementUI 开发，用户端使用微信小程序 。</span><br><span class="line">后端结构：基于 Spring Boot 构建，采用 分层架构，包括：</span><br><span class="line">网关层：由 Nginx 提供反向代理和负载均衡；</span><br><span class="line">应用层：使用 Spring Boot + Spring MVC + Spring Task + JWT + Swagger 等；</span><br><span class="line">数据层：MySQL 存储核心业务数据，Redis 做缓存，MyBatis 作为 ORM 框架 。</span><br><span class="line"></span><br><span class="line">后端工程最终打包为 jar 包（Spring Boot 内嵌 Tomcat 启动），前端静态资源部署在 Nginx 中 </span><br></pre></td></tr></table></figure><p>Maven父工程和聚合工程的打包方式是什么？ 父工程主要由什么组成？每个模块含有什么内容？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">一、父工程和聚合工程的打包方式</span><br><span class="line">父工程（Parent POM）</span><br><span class="line">打包方式：&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">只做依赖管理和版本控制，不生成可执行文件（如 jar/war）。</span><br><span class="line">聚合工程（Aggregator）</span><br><span class="line">打包方式：&lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">通过 &lt;modules&gt; 聚合子模块（如 common、pojo、server），统一执行构建命令（如 mvn clean package）。</span><br><span class="line"></span><br><span class="line">二、父工程组成</span><br><span class="line">父工程 sky-take-out 的核心作用：</span><br><span class="line">依赖版本管理（&lt;dependencyManagement&gt;）：</span><br><span class="line">统一 SpringBoot、MyBatis、MySQL、JWT 等依赖的版本，避免子模块版本冲突。</span><br><span class="line">插件管理（&lt;pluginManagement&gt;）：</span><br><span class="line">如 SpringBoot Maven 插件、Lombok 插件等。</span><br><span class="line">公共配置：</span><br><span class="line">如 Maven 仓库地址、编码格式（UTF-8）、Java 版本（JDK 1.8）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">三、子模块内容与作用</span><br><span class="line">模块名打包方式内容说明</span><br><span class="line">sky-commonjar公共工具类（如 JwtUtils、BaseContext）、常量类（如 StatusConstant）、异常处理类等。</span><br><span class="line">sky-pojojar实体类（如 Employee、Order）、DTO（如 EmployeeLoginDTO）、VO（如 OrderStatisticsVO）。</span><br><span class="line">sky-serverjar核心业务代码：Controller、Service、Mapper、配置文件（application.yml）、启动类（SkyApplication.java）。</span><br></pre></td></tr></table></figure><h3 id="git版本控制"><a href="#git版本控制" class="headerlink" title="git版本控制"></a>git版本控制</h3><p>为什么要创建git仓库？ </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">版本控制：像“时光机”一样，随时回退到任意历史版本。</span><br><span class="line">多人协作：团队成员可并行开发，避免文件冲突。</span><br><span class="line">备份：代码托管到 GitHub/GitLab，防止本地磁盘损坏导致代码丢失。</span><br><span class="line">持续集成：配合 GitHub Actions、Jenkins 实现自动测试、打包、部署。</span><br></pre></td></tr></table></figure><p>每完成一个接口，要提交git吗？要写message信息吗？ 为什么要写？ </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">要不要提交？</span><br><span class="line">✅ 建议提交——每个完整功能（如“新增菜品分页接口”）作为一次提交，粒度适中，方便回滚。</span><br><span class="line">要不要写 message？</span><br><span class="line">✅ 必须写！message 是“代码日记”，让队友（或未来的你）一眼看懂这次提交做了什么。</span><br><span class="line">为什么写？</span><br><span class="line">快速定位问题（如“哪次提交导致支付失败”）。</span><br><span class="line">生成 ChangeLog（Release 时自动汇总更新内容）。</span><br><span class="line">代码评审（PR）时，reviewer 通过 message 了解上下文。</span><br></pre></td></tr></table></figure><p>项目总的文件，所有都要提交吗？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">❌ 不是全部！</span><br><span class="line">要提交：</span><br><span class="line">源码（src/）、配置文件（application.yml）、静态资源（static/）。</span><br><span class="line">不要提交：</span><br><span class="line">敏感信息（数据库密码、私钥）。</span><br><span class="line">构建产物（target/、*.jar、*.war）。</span><br><span class="line">IDE 配置（.idea/、.vscode/）。</span><br><span class="line">依赖库（node_modules/、maven 的本地仓库）。</span><br><span class="line">怎么忽略？</span><br><span class="line">用 .gitignore 文件声明（如 Java 项目模板见 gitignore.io）。</span><br></pre></td></tr></table></figure><h3 id="数据库搭建"><a href="#数据库搭建" class="headerlink" title="数据库搭建"></a>数据库搭建</h3><h3 id="管理员登录功能"><a href="#管理员登录功能" class="headerlink" title="管理员登录功能"></a>管理员登录功能</h3><p>避坑！！！！！！</p><p><img src="/../images/image-20250718103138170.png" alt="image-20250718103138170"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EmployeeController:</span><br><span class="line">1.根据employeeDTO通过数据库查询拿到employee的信息</span><br><span class="line">2.登录成功后，生成jwt令牌    需要用到的claims包含empid:id</span><br><span class="line">3.利用JwtUtil工具类生成jwt令牌</span><br><span class="line">4.构造EmployeeLoginVO对象返回</span><br><span class="line">EmployeeService:</span><br><span class="line">1.拿到username and password</span><br><span class="line">2.根据username查询数据库返回employee对象</span><br><span class="line">3.如果employee为null 抛出自定义异常</span><br><span class="line">4.password md5加密 密码对比 如果不正确 抛出自定义异常</span><br><span class="line">5.查看账户是否被锁定即status是否为0 锁定抛出自定义异常</span><br><span class="line">6.以上都正确 返回employee</span><br><span class="line">EmployeeMapper:</span><br><span class="line">1.根据username查询返回employee对象</span><br></pre></td></tr></table></figure><p>后续登录，前端会携带JWT令牌，通过JWT令牌可以解析出当前员工id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JwtTokenAdminInterceptor.java</span><br><span class="line"><span class="comment">//1、从请求头中获取令牌</span></span><br><span class="line">     <span class="comment">//2、校验令牌</span></span><br><span class="line">    <span class="comment">//3、通过，放行</span></span><br><span class="line">     <span class="comment">//4、不通过，响应401状态码</span></span><br></pre></td></tr></table></figure><p>前后端联调这项工作时什么时候进行的？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口 ready、页面 ready → 立即联调；上线前必须再统一跑一次全链路。</span><br></pre></td></tr></table></figure><p>前后端联调工作的主要内容是什么？或者说为什么要进行前后端联调 ?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把各自跑得好好的代码，放到一起跑一次全链路验收”，确保用户真正用起来不会崩、不会错、不会慢。</span><br></pre></td></tr></table></figure><h3 id="nginx反向代理和负载均衡"><a href="#nginx反向代理和负载均衡" class="headerlink" title="nginx反向代理和负载均衡"></a>nginx反向代理和负载均衡</h3><p>为什么不直接通过浏览器直接请求后台服务端，需要通过Nginx反向代理呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">nginx 反向代理可以提高访问速度、进行负载均衡、保证后端服务安全</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提高访问速度</span><br><span class="line"></span><br><span class="line">因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</span><br><span class="line"></span><br><span class="line">进行负载均衡</span><br><span class="line"></span><br><span class="line">所谓负载均衡,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</span><br><span class="line"></span><br><span class="line">保证后端服务安全</span><br><span class="line"></span><br><span class="line">因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把nginx作为请求访问的入口，请求到达nginx后转发到具体的服务中，从而保证后端服务的安全。</span><br></pre></td></tr></table></figure><p>反向代理的配置方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    </span><br><span class="line">    location /api/&#123;</span><br><span class="line">        proxy_pass http://localhost:8080/admin/; #反向代理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">proxy_pass： 该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</span><br><span class="line"></span><br><span class="line">如上代码的含义是：监听80端口号， 然后当我们访问 http://localhost:80/api/../..这样的接口的时候，它会通过 location /api/ &#123;&#125; 这样的反向代理到 http://localhost:8080/admin/上来。</span><br><span class="line">当在访问http://localhost/api/employee/login，nginx接收到请求后转到http://localhost:8080/admin/，故最终的请求地址为http://localhost:8080/admin/employee/login，和后台服务的访问地址一致。</span><br></pre></td></tr></table></figure><p>nginx 负载均衡默认是什么策略？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">轮询（Round Robin）</span><br><span class="line">即：把请求 按顺序轮流 分发给后端服务器，不附加任何权重或状态判断。</span><br></pre></td></tr></table></figure><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1.导入 knife4j 的maven坐标</span><br><span class="line">2.在配置类中加入 knife4j 相关配置</span><br><span class="line">WebMvcConfiguration.java</span><br><span class="line">@Bean</span><br><span class="line">    public Docket docket() &#123;</span><br><span class="line">        ApiInfo apiInfo = new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;苍穹外卖项目接口文档&quot;)</span><br><span class="line">                .version(&quot;2.0&quot;)</span><br><span class="line">                .description(&quot;苍穹外卖项目接口文档&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        Docket docket = new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.sky.controller&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        return docket;</span><br><span class="line">    &#125;</span><br><span class="line"> 3.设置静态资源映射，否则接口文档页面无法访问</span><br><span class="line"> protected void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">        registry.addResourceHandler(&quot;/doc.html&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/&quot;);</span><br><span class="line">        registry.addResourceHandler(&quot;/webjars/**&quot;).addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pojo</span><br><span class="line">@ApiModel(description = &quot; &quot;)</span><br><span class="line">@ApiModelProperty(&quot; &quot;)</span><br><span class="line">controller</span><br><span class="line">@Api(tags = &quot; &quot;)</span><br><span class="line">@ApiOperation(value = &quot; &quot;)</span><br></pre></td></tr></table></figure><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day-2"></a>Day-2</h2><h3 id="新增员工功能"><a href="#新增员工功能" class="headerlink" title="新增员工功能"></a>新增员工功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line"><span class="number">1.</span>创建一个employee实体 用来拷贝数据</span><br><span class="line"><span class="number">2.</span>补充dto没有的属性 状态 密码 创建时间 修改时间 创建人id 更改人id</span><br><span class="line"><span class="number">3.</span>调用mapper插入</span><br><span class="line">mapper:</span><br><span class="line"><span class="keyword">insert into</span> employee (username, name, password, phone, sex, id_number, status, create_time, update_time, create_user, update_user) &quot; +</span><br><span class="line">            &quot;<span class="keyword">values</span> &quot; +</span><br><span class="line">            &quot;(#&#123;username&#125;, #&#123;name&#125;, #&#123;password&#125;, #&#123;phone&#125;, #&#123;sex&#125;, #&#123;idNumber&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span><br></pre></td></tr></table></figure><p>在application.yml中已开启驼峰命名，故id_number和idNumber可对应。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DTO实体类数据怎么传递到Entity实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>手动转换</span><br><span class="line"><span class="comment">// UserDTO -&gt; UserEntity</span></span><br><span class="line"><span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">userEntity.setUsername(userDTO.getUsername());</span><br><span class="line">userEntity.setEmail(userDTO.getEmail());</span><br><span class="line"><span class="comment">// 设置其他字段...</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用工具类</span><br><span class="line"><span class="comment">// 使用Spring的BeanUtils</span></span><br><span class="line"><span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserEntity</span>();</span><br><span class="line">BeanUtils.copyProperties(userDTO, userEntity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或使用MapStruct</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    UserEntity <span class="title function_">dtoToEntity</span><span class="params">(UserDTO dto)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 使用Builder模式</span><br><span class="line"> <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> UserEntity.builder()</span><br><span class="line">    .username(userDTO.getUsername())</span><br><span class="line">    .email(userDTO.getEmail())</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>前端传递的实体类数据，还需要补充什么信息才能存到数据库表中？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>主键ID：通常由数据库自动生成（如自增ID或UUID）</span><br><span class="line"><span class="number">2.</span>审计字段：</span><br><span class="line">创建时间</span><br><span class="line">更新时间</span><br><span class="line">创建人</span><br><span class="line">更新人</span><br><span class="line"><span class="number">3.</span>业务状态字段：</span><br><span class="line">状态枚举</span><br><span class="line">审核状态等</span><br><span class="line"><span class="number">4.</span>关联关系：</span><br><span class="line">外键关联的其他实体ID</span><br><span class="line">一对多、多对多关系的集合</span><br></pre></td></tr></table></figure><p>用户名存在问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLIntegrityConstraintViolationException: Duplicate entry <span class="string">&#x27;zfl&#x27;</span> <span class="keyword">for</span> key <span class="string">&#x27;employee.idx_username&#x27;</span></span><br><span class="line">发现，username已经添加了唯一约束，不能重复。</span><br><span class="line">通过全局异常处理器来处理。</span><br><span class="line">进入到sky-server模块，com.sky.handler包下，GlobalExceptionHandler.java添加方法</span><br><span class="line"><span class="number">1.</span><span class="comment">//获取异常的具体信息</span></span><br><span class="line">    <span class="number">2.</span><span class="comment">//判断是否包含”Duplicate entry”</span></span><br><span class="line">    <span class="number">3.</span><span class="comment">//将信息分割成数组</span></span><br><span class="line">    <span class="number">4.</span><span class="comment">//获得第三个字段即用户名信息</span></span><br><span class="line">    <span class="number">5.</span><span class="comment">//构造具体的提示信息，如：zfl + “已存在”</span></span><br><span class="line">    <span class="number">6.</span><span class="comment">//返回带有具体提示信息的错误结果</span></span><br><span class="line">    <span class="number">7.</span><span class="comment">//如果不是重复条目异常，则返回通用的未知错误提示</span></span><br><span class="line">进入到sky-common模块，在MessageConstant.java添加</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALREADY_EXISTS</span> <span class="operator">=</span> <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建id固定问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用BaseContext工具类操作ThreadLocal</span><br></pre></td></tr></table></figure><h3 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">设计DTO类</span><br><span class="line">    包含name page pageSize</span><br><span class="line">封装pageResult</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>  total<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> List records<span class="comment">//当前页数据集合</span></span><br><span class="line">controller</span><br><span class="line">    返回的是PageResult</span><br><span class="line">service</span><br><span class="line">    使用pageHelper分页插件 设置当前页码和每页显示条数</span><br><span class="line">    调用mapper分页查询 返回Page&lt;Employee&gt;对象</span><br><span class="line">    获取page的结果</span><br><span class="line">mapper</span><br><span class="line">    select * from employee</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">            and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    order by create_time desc</span><br></pre></td></tr></table></figure><p>分页查询中前端应该传递什么参数给后端，后端应该返回什么数据给前端？</p><table><thead><tr><th>参数名</th><th>类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td><code>page</code></td><td>int</td><td>是</td><td>当前页码（从1开始，避免从0开始导致用户困惑）。</td></tr><tr><td><code>size</code>&#x2F;<code>limit</code></td><td>int</td><td>是</td><td>每页条数（需限制最大值，如<code>size &lt;= 100</code>，防止恶意请求）。</td></tr><tr><td><code>sort</code></td><td>string</td><td>否</td><td>排序字段（如<code>sort=createTime</code>）。</td></tr><tr><td><code>order</code></td><td>string</td><td>否</td><td>排序方式（如<code>order=desc</code>或<code>asc</code>，需后端校验合法性）。</td></tr><tr><td>其他过滤条件</td><td>-</td><td>否</td><td>根据业务需求传递（如<code>status=active</code>、<code>keyword=搜索词</code>等）。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [ <span class="comment">/* 当前页的数据数组 */</span> ],</span><br><span class="line">    <span class="string">&quot;total&quot;</span>: <span class="number">95</span>,          <span class="comment">// 总记录数（用于前端计算总页数）</span></span><br><span class="line">    <span class="string">&quot;page&quot;</span>: <span class="number">2</span>,            <span class="comment">// 当前页码</span></span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span>,           <span class="comment">// 每页条数</span></span><br><span class="line">    <span class="string">&quot;pages&quot;</span>: <span class="number">10</span>           <span class="comment">// 总页数（后端计算后返回，避免前端重复计算）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作时间字段显示有问题 完善</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.在属性上加上注解，对日期进行格式化</span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">b.在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对日期类型进行格式处理</span><br><span class="line">    <span class="comment">//创建消息转换器对象 MappingJackson2HttpMessageConverter</span></span><br><span class="line">    <span class="comment">//设置对象转换器，底层使用Jackson将Java对象转为json       setObjectMapper(new JacksonObjectMapper)</span></span><br><span class="line">    <span class="comment">//将消息转换器对象追加到converters中   converters.add(0,converter);</span></span><br></pre></td></tr></table></figure><p><strong>Spring MVC 的消息转换器（HttpMessageConverter）的作用是什么？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把 HTTP 请求体 ↔ Java 对象，以及 Java 对象 ↔ HTTP 响应体 做自动转换。</span><br></pre></td></tr></table></figure><h3 id="启用禁用账号功能"><a href="#启用禁用账号功能" class="headerlink" title="启用禁用账号功能"></a>启用禁用账号功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">controller:  public <span class="keyword">Result</span> startOrStop(<span class="variable">@PathVariable</span> <span class="type">Integer</span> status,Long id)&#123;&#125;</span><br><span class="line"></span><br><span class="line">mapper:  <span class="keyword">update</span> employee</span><br><span class="line">        <span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;name != null&quot;<span class="operator">&gt;</span>name <span class="operator">=</span> #&#123;name&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;username != null&quot;<span class="operator">&gt;</span>username <span class="operator">=</span> #&#123;username&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;password != null&quot;<span class="operator">&gt;</span>password <span class="operator">=</span> #&#123;password&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;phone != null&quot;<span class="operator">&gt;</span>phone <span class="operator">=</span> #&#123;phone&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;sex != null&quot;<span class="operator">&gt;</span>sex <span class="operator">=</span> #&#123;sex&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;idNumber != null&quot;<span class="operator">&gt;</span>id_Number <span class="operator">=</span> #&#123;idNumber&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;updateTime != null&quot;<span class="operator">&gt;</span>update_Time <span class="operator">=</span> #&#123;updateTime&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;updateUser != null&quot;<span class="operator">&gt;</span>update_User <span class="operator">=</span> #&#123;updateUser&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">            <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;status != null&quot;<span class="operator">&gt;</span>status <span class="operator">=</span> #&#123;status&#125;,<span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">        <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">set</span><span class="operator">&gt;</span></span><br><span class="line">        <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;           <span class="operator">/</span><span class="operator">/</span><span class="operator">&lt;</span><span class="keyword">set</span><span class="operator">&gt;</span>自动可以去掉,</span><br></pre></td></tr></table></figure><h3 id="编辑员工信息and根据id查询员工信息"><a href="#编辑员工信息and根据id查询员工信息" class="headerlink" title="编辑员工信息and根据id查询员工信息"></a>编辑员工信息and根据id查询员工信息</h3><h3 id="员工修改密码功能"><a href="#员工修改密码功能" class="headerlink" title="员工修改密码功能"></a>员工修改密码功能</h3><h3 id="导入分类模块功能代码"><a href="#导入分类模块功能代码" class="headerlink" title="导入分类模块功能代码"></a>导入分类模块功能代码</h3><h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day-3"></a>Day-3</h2><h3 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h3><p>统一处理方式</p><p>使用AOP切面编程，实现功能增强，来完成公共字段自动填充功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</span><br><span class="line">自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill注解的方法，通过反射为公共字段赋值</span><br><span class="line">在 Mapper的方法 上加入 AutoFill 注解,并注释业务层赋值时间和用户Id的代码</span><br><span class="line"></span><br><span class="line">AutoFill: </span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>  <span class="comment">//用于标注方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">//运行时保留</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span>  AutoFill &#123;</span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>; <span class="comment">//包含一个参数 value()，类型为 OperationType，用于指定操作类型。</span></span><br><span class="line">&#125;</span><br><span class="line">AutoFillAspect:</span><br><span class="line"><span class="meta">@Pointcut</span>：定义一个切面的切入点表达式，表示切面关注的连接点。</span><br><span class="line">    <span class="string">&quot;execution(* com.sky.mapper.*.*(..))&quot;</span>：匹配 com.sky.mapper 包中所有类的所有方法。</span><br><span class="line">    <span class="string">&quot;@annotation(com.sky.annotation.AutoFill)&quot;</span>：要求被拦截的方法上必须有 <span class="meta">@AutoFill</span> 注解。</span><br><span class="line">    autoFillPointCut()：是一个命名切入点的方法，后续可以在 <span class="meta">@Before</span>、<span class="meta">@Around</span> 等通知中引用该方法名，作为切入点。</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span>    </span><br><span class="line">    joinPoint.getSignature()：获取被拦截方法的签名。</span><br><span class="line">    (MethodSignature)：强制转换为 MethodSignature 类型，以便获取具体方法对象。</span><br><span class="line">    methodSignature.getMethod()：获得被拦截的 Method 对象。</span><br><span class="line">    getAnnotation(AutoFill.class)：检查该方法是否标注了 <span class="meta">@AutoFill</span> 注解。</span><br><span class="line">    autoFill.value()：获取注解中指定的操作类型（OperationType），用于后续自动填充逻辑判断 <span class="comment">//上述操作就是为了这个</span></span><br><span class="line">        </span><br><span class="line">    获取到当前被拦截的方法的参数--实体对象 joinPoint.getArgs();</span><br><span class="line">    准备赋值的数据</span><br><span class="line">        </span><br><span class="line">   <span class="comment">//根据当前不同的操作类型，为对应的属性通过反射赋值</span></span><br><span class="line">    object.getClass()：获取当前实体对象的 Class 类型；</span><br><span class="line">    .getDeclaredMethod(...)：查找该类中声明的、名为 AutoFillConstant.SET_CREATE_TIME 的方法（如 <span class="string">&quot;setCreateTime&quot;</span>）；</span><br><span class="line">    LocalDateTime.class：指定要查找的方法参数类型为 LocalDateTime；</span><br><span class="line">    Method setCreateTime：得到一个 Method 对象，后续可以通过 invoke() 调用该 setter 方法进行字段赋值。 <span class="comment">//上述操作就是为了这个</span></span><br></pre></td></tr></table></figure><h3 id="文件上传实现"><a href="#文件上传实现" class="headerlink" title="文件上传实现"></a>文件上传实现</h3><p>实现步骤：</p><ol><li><p>定义OSS相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application-dev.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">环境变量</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">环境变量</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">sky-take-out</span></span><br><span class="line"><span class="string">application.yml</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>    <span class="comment">#设置环境</span></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">$&#123;sky.alioss.endpoint&#125;</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">$&#123;sky.alioss.access-key-id&#125;</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">$&#123;sky.alioss.access-key-secret&#125;</span></span><br><span class="line">    <span class="attr">bucket-name:</span> <span class="string">$&#123;sky.alioss.bucket-name&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>读取OSS配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在sky-common模块中，已定义</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sky.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;sky.alioss&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOssProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String endpoint;</span><br><span class="line"><span class="keyword">private</span> String accessKeyId;</span><br><span class="line"><span class="keyword">private</span> String accessKeySecret;</span><br><span class="line"><span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成OSS工具类对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用已有的ossutill工具类 生成对象</span><br></pre></td></tr></table></figure></li><li><p>定义文件上传接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文件原始名称: file.getOriginalFilename();</span></span><br><span class="line"><span class="comment"> * 截取原始文件名后缀名 : String extension = originalFilename.substring(originalFilename.lastIndexOf(&quot;.&quot;));</span></span><br><span class="line"><span class="comment"> * 构造新文件名称：随机数 + 文件后缀名 : UUID.randomUUID().toString()+extention;</span></span><br><span class="line"><span class="comment"> * 构造文件请求路径并返回:  String upload = aliOssUtil.upload(file.getBytes(), name);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line">由DTO得到dish 调用mapper</span><br><span class="line">由DTO得到flavors 并赋值dishId</span><br><span class="line">List<span class="tag">&lt;<span class="name">DishFlavor</span>&gt;</span> flavors = dishDTO.getFlavors();</span><br><span class="line">        if(flavors != null &amp;&amp; flavors.size() &gt; 0)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                dishFlavor.setDishId(dishId);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">mapper:</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.sky.entity.Dish&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span> 后两个注意 生成id赋值给原来的dish</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> &gt;</span></span><br><span class="line">        insert into dish_flavor (dish_id,name, value) values</span><br><span class="line">                                                          <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;flavors&quot;</span> <span class="attr">item</span>=<span class="string">&quot;df&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                                                              (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">                                                          <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="菜品分页查询"><a href="#菜品分页查询" class="headerlink" title="菜品分页查询"></a>菜品分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">controller: 返回Result&lt;PageResult&gt;</span><br><span class="line">service: PageHelper.startPage(...)</span><br><span class="line">     Page&lt;Dish&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">返回的是<span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page,getResult())</span><br><span class="line">mapper:</span><br><span class="line"> select * from dish</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                and name like <span class="string">&#x27;%$&#123;name&#125;%&#x27;</span></span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">category_id</span> <span class="operator">=</span> #&#123;categoryId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        order by update_time desc</span><br></pre></td></tr></table></figure><p>删除菜品</p><ul><li>可以<code>一次删除</code>一个菜品，也可以<code>批量删除</code>菜品</li><li><code>起售中</code>的菜品<code>不能删除</code></li><li><code>被套餐关联</code>的菜品<code>不能删除</code></li><li>删除菜品后，关联的<code>口味数据</code>也需要<code>删除</code>掉</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">controller:  <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;&#125;</span><br><span class="line">service :<span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断是否菜品是否能删除 1.查询当前菜品是否在售 2.查询当前菜品是否关联了套餐</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">     <span class="comment">//删除菜品数据 和 口味表数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为什么要在项目中使用自定义异常？</p><table><thead><tr><th>痛点</th><th>自定义异常带来的好处</th></tr></thead><tbody><tr><td>① JDK 自带异常语义太泛</td><td><code>IllegalArgumentException</code>、<code>RuntimeException</code> 看不出“用户名已存在”“库存不足”等业务含义。</td></tr><tr><td>② 差异化处理困难</td><td>捕获到自定义异常后，可直接 <code>instanceof BizException</code> 做分支处理，不必解析 message。</td></tr><tr><td>③ 统一响应&#x2F;监控</td><td>可在自定义异常里携带 <strong>错误码</strong>、<strong>i18n 文案</strong>、<strong>日志级别</strong>，方便前端统一弹窗、运维监控报警。</td></tr><tr><td>④ 框架集成友好</td><td>Spring Security、Spring Validation、Spring Cloud Gateway 等都支持按异常类型做 <strong>全局异常映射</strong> 和 <strong>重试&#x2F;熔断</strong>策略。</td></tr></tbody></table><p>如何捕获这些异常？</p><table><thead><tr><th>场景</th><th>捕获方式</th></tr></thead><tbody><tr><td>普通 Java 代码</td><td><code>try &#123; ... &#125; catch (MyBizException e) &#123; ... &#125;</code></td></tr><tr><td>Spring Web</td><td><code>@RestControllerAdvice</code> + <code>@ExceptionHandler(MyBizException.class)</code> 统一返回 JSON。</td></tr><tr><td>Spring WebFlux &#x2F; Gateway</td><td><code>ErrorWebExceptionHandler</code> 或 <code>@ControllerAdvice</code>。</td></tr><tr><td>定时任务 &#x2F; 异步线程</td><td>在 <code>Runnable</code> 里显式 catch，或配合线程池的 <code>afterExecute</code> 钩子。</td></tr></tbody></table><h3 id="根据id查询菜品"><a href="#根据id查询菜品" class="headerlink" title="根据id查询菜品"></a>根据id查询菜品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service: <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);</span><br><span class="line">再封装进dishVO</span><br></pre></td></tr></table></figure><h3 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">serevice: 获得dish从dishDTO 调用mapper</span><br><span class="line">删除原有的口味数据</span><br><span class="line">从dishDTO获得 List&lt;DishFlavors&gt; flavors</span><br><span class="line">为flavors插入dishId</span><br><span class="line">调用mapper批量插入  if (flavors != null &amp;&amp; !flavors.isEmpty()) &#123;</span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;  注意条件否则会出错</span><br></pre></td></tr></table></figure><h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day-4"></a>Day-4</h2><h3 id="套餐管理模块所有业务功能"><a href="#套餐管理模块所有业务功能" class="headerlink" title="套餐管理模块所有业务功能"></a>套餐管理模块所有业务功能</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意批量删除 delete from setmeal where id in</span><br><span class="line">                                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                                   #&#123;id&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            //delete from setmeal where id in ( , , )</span><br></pre></td></tr></table></figure><h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day-5"></a>Day-5</h2><h3 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h3><h4 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h4><p><strong>主要特点：</strong> 🍐</p><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品、资讯、新闻）</li><li>企业应用广泛</li></ul><p><strong>关系型数据库(RDBMS)：</strong></p><ul><li>Mysql 企业常用</li><li>Oracle 企业常用</li><li>DB2</li><li>SQLServer</li></ul><p><strong>非关系型数据库(NoSql)：</strong></p><ul><li>Redis 企业常用</li><li>Mongo db 企业常用</li><li>MemCached</li></ul><p>ai查询装docker redis   docker-compose up -d</p><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><p><strong>5种常用的数据类型</strong></p><ul><li>字符串(string)：普通字符串，Redis中最简单的数据类型</li><li>哈希(hash)：也叫散列，类似于Java中的HashMap结构</li><li>列表(list)：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li><li>集合(set)：无序集合，没有重复元素，类似于Java中的HashSet</li><li>有序集合(sorted set&#x2F;zset)：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li></ul><p><img src="/../images/image-20250716151454167.png" alt="image-20250716151454167"></p><p>&#x3D;&#x3D;<strong>String</strong>&#x3D;&#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 存入一个字符串</span><br><span class="line"><span class="keyword">set</span> name xiaoming</span><br><span class="line"># 获取name</span><br><span class="line"><span class="keyword">get</span> name</span><br><span class="line"></span><br><span class="line"># 存入一个age </span><br><span class="line"><span class="keyword">set</span> age <span class="number">20</span> </span><br><span class="line"><span class="keyword">set</span> age <span class="number">30</span></span><br><span class="line"># 获得age  </span><br><span class="line"><span class="keyword">get</span> age  #<span class="number">30</span> 覆盖了</span><br><span class="line"></span><br><span class="line"># 练习 SETEX key seconds <span class="keyword">value</span> 设置指定 key 的值，并将 key 的过期时间设为 seconds 秒</span><br><span class="line"># 设置存<span class="number">10</span>s </span><br><span class="line">setex city <span class="number">10</span> beijing</span><br><span class="line"></span><br><span class="line"># 等待<span class="number">10</span>秒</span><br><span class="line"><span class="keyword">get</span> city #返回nil <span class="comment">---&gt;空</span></span><br><span class="line"></span><br><span class="line"># 练习SETNX key <span class="keyword">value</span> 只有在 key 不存在时设置 key 的值</span><br><span class="line">setnx bookname zhuxian </span><br><span class="line"></span><br><span class="line">setnx bookname fanrenxiuxianzhuan</span><br><span class="line"></span><br><span class="line"><span class="keyword">get</span> bookname # 返回zhuxian</span><br><span class="line"></span><br><span class="line">## 注意不要传中文，返回类似这种</span><br><span class="line">&quot;\xe5\x87\xa1\xe4\xba\xba\xe4\xbf\xae\xe4\xbb\x99\xe8\xae\xb0&quot;</span><br><span class="line"># 在redis 中存储中文，默认读取不到中文，而是以十六进制的方式储存</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>Hash</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 往key 为001 存入 hash键值对 2对</span><br><span class="line">hset 001 name zhangsan</span><br><span class="line">hset 001 age  23</span><br><span class="line">hset 002 name lisi</span><br><span class="line">hset 002 age  16</span><br><span class="line"></span><br><span class="line"># 练习 HGET key field 获取存储在哈希表中指定字段的值</span><br><span class="line"># 获取002中的 name的值</span><br><span class="line">hget 002 name</span><br><span class="line"></span><br><span class="line"># 练习 HDEL key field 删除存储在哈希表中的指定字段</span><br><span class="line"># 删除 002 中的name</span><br><span class="line">hdel 002 name</span><br><span class="line"></span><br><span class="line"># 练习HKEYS key 获取哈希表中所有字段</span><br><span class="line">hkeys 002</span><br><span class="line"></span><br><span class="line"># 练习HVALS key 获取哈希表中所有值</span><br><span class="line">HVALS 002</span><br><span class="line"></span><br><span class="line"># 练习 HGETALL key 获取在哈希表中指定 key 的所有字段和值</span><br><span class="line"></span><br><span class="line">HGETALL 001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;List&#x3D;&#x3D;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># LPUSH key value1 [value2] 将一个或多个值插入到列表头部</span><br><span class="line">LPUSH list1 a b c d</span><br><span class="line">LPUSH list2 1 2 3 4</span><br><span class="line">LPUSH list3 9 8 7 6</span><br><span class="line"></span><br><span class="line"># LRANGE key start stop 获取列表指定范围内的元素</span><br><span class="line">LRANGE list1 0 -1 # 查所有</span><br><span class="line"># a最先插入，所以在尾部</span><br><span class="line"></span><br><span class="line"># RPOP key 移除并获取列表最后一个元素</span><br><span class="line">RPOP list1 # 返回a   当然a没有了</span><br><span class="line"></span><br><span class="line"># LLEN key 获取列表长度</span><br><span class="line">LLEN list1  # 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># BRPOP key1 [key2 ] timeout 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超 时或发现可弹出元素为止</span><br><span class="line"></span><br><span class="line">BRPOP list1  10  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>set</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># SADD key member1 [member2] 向集合添加一个或多个成员</span><br><span class="line">SADD set1 a b c</span><br><span class="line">SADD set2 1 2 3</span><br><span class="line"></span><br><span class="line"># SMEMBERS key 返回集合中的所有成员</span><br><span class="line">SMEMBERS set1</span><br><span class="line"></span><br><span class="line"># SCARD key 获取集合的成员数</span><br><span class="line">SCARD  set1</span><br><span class="line"></span><br><span class="line"># SINTER key1 [key2] 返回给定所有集合的交集</span><br><span class="line"></span><br><span class="line">SINTER set1 set2 # a 交集是a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SUNION key1 [key2] 返回所有给定集合的并集</span><br><span class="line"></span><br><span class="line">SUNION set1 set2  # a b c 2 3</span><br><span class="line"></span><br><span class="line"># SDIFF key1 [key2] 返回给定所有集合的差集</span><br><span class="line"></span><br><span class="line">SDIFF set1 set2  #注意顺序 2者相减</span><br><span class="line"></span><br><span class="line"># SREM key member1 [member2] 移除集合中一个或多个成员</span><br><span class="line">SREM set1 a b # 删除元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;sorted set&#x3D;&#x3D;</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ZADD key score1 member1 [score2 member2] 向有序集合添加一个或多个成员，或者更新已存在成员的 分数</span><br><span class="line">zadd sset1  0.1 a  3.0 b 2.5 c</span><br><span class="line">zadd sset2  9.9 p  8.8 w 2.0 q</span><br><span class="line"></span><br><span class="line"># ZRANGE key start stop [WITHSCORES] 通过索引区间返回有序集合中指定区间内的成员</span><br><span class="line">ZRANGE sset1 0 -1 # 获得全部</span><br><span class="line">ZRANGE sset1 0 -1  WITHSCORES # 分数也会显示</span><br><span class="line"></span><br><span class="line"># ZINCRBY key increment member 有序集合中对指定成员的分数加上增量 increment</span><br><span class="line">ZINCRBY  sset1 20 b #意味着b的分值改变了</span><br><span class="line"># 可以查询下</span><br><span class="line">ZRANGE sset1 0 -1  WITHSCORES</span><br><span class="line"></span><br><span class="line"># ZREM key member [member ...] 移除有序集合中的一个或多个成员</span><br><span class="line">ZREM sset1 b #将b这个元素移除</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="在Java中操作Redis"><a href="#在Java中操作Redis" class="headerlink" title="在Java中操作Redis"></a>在Java中操作Redis</h4><p>1.导入<strong>Spring Data Redis的maven坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.<strong>配置Redis数据源</strong></p><p>在application-dev.yml中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.144</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">10</span>  <span class="string">//Redis服务启动后默认有16个数据库，编号分别是从0到15。</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;sky.redis.host&#125;</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">$&#123;sky.redis.port&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;sky.redis.password&#125;</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">$&#123;sky.redis.database&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.<strong>编写配置类，创建RedisTemplate对象</strong></p><p>当前配置类不是必须的，因为 Spring Boot 框架会自动装配 RedisTemplate 对象，但是默认的key序列化器为</p><p>JdkSerializationRedisSerializer，导致我们存到Redis中后的数据和原始数据有差别，故设置为</p><p>StringRedisSerializer序列化器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板对象...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置redis的连接工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置redis key的序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作string</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作字符串类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// set get setex setnx</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(city);</span><br><span class="line">       <span class="comment">// 过期时间</span></span><br><span class="line">       redisTemplate.opsForValue().set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">       <span class="comment">// 存入前判断</span></span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作哈希类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作哈希类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//hset hget hdel hkeys hvals</span></span><br><span class="line">       <span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">       hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">       System.out.println(name);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">       System.out.println(values);</span><br><span class="line"></span><br><span class="line">       hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作列表类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作列表类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//lpush lrange rpop llen</span></span><br><span class="line">       <span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">       listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">       listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">       listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//sadd smembers scard sinter sunion srem</span></span><br><span class="line">       <span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">       setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">       setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(members);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">       System.out.println(size);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(intersect);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">       System.out.println(union);</span><br><span class="line"></span><br><span class="line">       setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>操作有序集合类型数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 操作有序集合类型的数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testZset</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//zadd zrange zincrby zrem</span></span><br><span class="line">       <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">       zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">       System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">       zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">       zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通用命令操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 通用命令操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCommon</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//keys exists type del</span></span><br><span class="line">       <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">       System.out.println(keys);</span><br><span class="line"></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">           <span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">           System.out.println(type.name());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Spring Boot 为我们自动配置了 RedisTemplate，而 RedisTemplate 使用的是 JdkSerializationRedisSerializer，这个对我们用 redis 图形化客户端很不直观，因为 JdkSerializationRedisSerializer 使用二进制形式储存数据，在此我们将自己配置 RedisTemplate 并定义 Serializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在config包中配置</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheConfig</span> &#123;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置redisTemplate bean，⾃定义数据的序列化的⽅式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisConnectionFactory 连接redis的⼯⼚，底层有</span></span><br><span class="line"><span class="comment">场景依赖启动时，⾃动加载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Bean(&quot;secondRedisTemplate&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(<span class="meta">@Autowired</span> RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">    <span class="comment">//1.构建RedisTemplate模板对象</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; template = newRedisTemplate&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="comment">//2.为不同的数据结构设置不同的序列化⽅案</span></span><br><span class="line">    <span class="comment">//设置key序列化⽅式</span></span><br><span class="line">    template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">    <span class="comment">//设置value序列化⽅式</span></span><br><span class="line">    template.setValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class="line">    <span class="comment">//设置hash中field字段序列化⽅式</span></span><br><span class="line">    template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">    <span class="comment">//设置hash中value的序列化⽅式</span></span><br><span class="line">    template.setHashValueSerializer(<span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class="line">    <span class="comment">//5.初始化参数设置</span></span><br><span class="line">    template.afterPropertiesSet();</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="店铺营业状态设置"><a href="#店铺营业状态设置" class="headerlink" title="店铺营业状态设置"></a>店铺营业状态设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;secondRedisTemplate&quot;)</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">读取容器</span><br></pre></td></tr></table></figure><h3 id="Swagger接口分组"><a href="#Swagger接口分组" class="headerlink" title="Swagger接口分组"></a>Swagger接口分组</h3><p>在WebMvcConfiguration.java中，分别扫描<code>com.sky.controller.admin</code>和<code>com.sky.controller.user</code>这两个包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">       <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">               .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">               .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">               .groupName(<span class="string">&quot;管理端接口&quot;</span>)</span><br><span class="line">               .apiInfo(apiInfo)</span><br><span class="line">               .select()</span><br><span class="line">               <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.admin&quot;</span>))</span><br><span class="line">               .paths(PathSelectors.any())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> docket;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">       <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">               .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">               .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">               .groupName(<span class="string">&quot;用户端接口&quot;</span>)</span><br><span class="line">               .apiInfo(apiInfo)</span><br><span class="line">               .select()</span><br><span class="line">               <span class="comment">//指定生成接口需要扫描的包</span></span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.user&quot;</span>))</span><br><span class="line">               .paths(PathSelectors.any())</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> docket;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Day-6"><a href="#Day-6" class="headerlink" title="Day-6"></a>Day-6</h2><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>HttpClient的核心API：</strong> 👇</p><ul><li>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</li><li>HttpClients：可认为是构建器，可创建HttpClient对象。</li><li>CloseableHttpClient：实现类，实现了HttpClient接口。</li><li>HttpGet：Get方式请求类型。</li><li>HttpPost：Post方式请求类型。</li></ul><p><strong>代码操作</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>上述依赖的底层已经包含了HttpClient相关依赖</strong></p><p>Get请求实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试通过httpclient发送GET方式的请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpGet</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;https://query.asilu.com/weather/baidu/?city=长沙&quot;</span>);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="comment">//解析返回结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断响应状态</span></span><br><span class="line">    <span class="keyword">if</span>(statusCode == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="type">String</span>  <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;响应数据为：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试通过httpclient发送POST方式的请求</span></span><br><span class="line"><span class="comment">    1.创建httpclient对象</span></span><br><span class="line"><span class="comment">    2.创建请求对象</span></span><br><span class="line"><span class="comment">    3.为请求对象设置entity(包含json内容 请求编码方式 数据格式)</span></span><br><span class="line"><span class="comment">    4.发送请求</span></span><br><span class="line"><span class="comment">    5.解析返回结果</span></span><br><span class="line"><span class="comment">    6.关闭资源</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">    <span class="comment">//指定请求编码方式</span></span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//数据格式</span></span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析返回结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">    System.out.println(<span class="string">&quot;响应数据为：&quot;</span> + body);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h3><p>小程序的开发本质上属于前端开发，主要使用<strong>JavaScript</strong>开发</p><p>每个小程序页面主要由四个文件组成：</p><ul><li><strong>js文件：</strong> 必须存在，存放<strong>页面业务逻辑代码，编写的js代码</strong> 。</li><li><strong>wxml文件：</strong> 必须存在，存放页面结构，主要是做页面布局，页面效果展示的，<strong>类似于HTML页面</strong></li><li><strong>json文件：</strong> 非必须，<strong>存放页面相关的配置</strong> 。</li><li><strong>wxss文件：</strong> 非必须，存放页面样式表，<strong>相当于CSS文件</strong> 。</li></ul><h3 id="微信登录流程"><a href="#微信登录流程" class="headerlink" title="微信登录流程"></a>微信登录流程</h3><p><img src="/../images/image-20250717110625544.png" alt="image-20250717110625544"></p><h3 id="OpenID-与授权码的区别"><a href="#OpenID-与授权码的区别" class="headerlink" title="OpenID 与授权码的区别"></a>OpenID 与授权码的区别</h3><table><thead><tr><th>项目</th><th>OpenID</th><th>授权码</th></tr></thead><tbody><tr><td><strong>本质</strong></td><td>用户身份标识</td><td>临时交换凭证</td></tr><tr><td><strong>作用</strong></td><td>识别用户</td><td>换取 openid 和 session_key</td></tr><tr><td><strong>生命周期</strong></td><td>永久不变</td><td>一次性、短时效</td></tr><tr><td><strong>使用方</strong></td><td>前后端都可</td><td>仅后端使用</td></tr><tr><td><strong>是否敏感</strong></td><td>否（可前端使用）</td><td>是（禁止暴露前端）</td></tr></tbody></table><h3 id="微信登陆集成"><a href="#微信登陆集成" class="headerlink" title="微信登陆集成"></a>微信登陆集成</h3><ol><li><p>定义相关配置</p><ul><li>配置微信登录所需配置项</li><li>配置为微信用户生成jwt令牌时使用的配置项</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">application-dev.yml</span></span><br><span class="line"><span class="string">(sky</span> <span class="string">与</span> <span class="string">spring</span> <span class="string">同级)</span></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">wxffb3637a228223b8</span> <span class="comment"># appid 开放平台获取</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">84311df9199ecacdf4f12d27b6b9522d</span> <span class="comment"># 秘钥 开放平台获取</span></span><br><span class="line"><span class="string">application.yml</span></span><br><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">wechat:</span></span><br><span class="line">    <span class="attr">appid:</span> <span class="string">$&#123;sky.wechat.appid&#125;</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">$&#123;sky.wechat.secret&#125;</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span></span><br><span class="line">    <span class="attr">user-secret-key:</span> <span class="string">itheima</span></span><br><span class="line">    <span class="attr">user-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="attr">user-token-name:</span> <span class="string">authentication</span>          <span class="comment">#管理端和用户端的token不一致</span></span><br></pre></td></tr></table></figure></li><li><p>根据传入参数设计DTO类</p></li><li><p>根据返回数据设计VO类</p></li><li><p>根据接口定义创建UserController的login方法</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.注入Uservice JWTproperties</span><br><span class="line">2.userService.Login(..DTO)得到user对象</span><br><span class="line">3.生成jwt令牌：初始化一个hashmap claims,放入键值(username,user.getId())</span><br><span class="line">JwtUtil.createJWT(JWTproperties的密钥和过期时间以及claims)</span><br><span class="line">4.构造一个userLoginVO(id,openid,token)</span><br></pre></td></tr></table></figure><p>  5.创建UserService接口</p><p> 6.创建UserServiceImpl实现类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.构造常量 WX_LOGIN_URL</span><br><span class="line">2.注入 UserMapper  WeChatProperties</span><br><span class="line">3.设计一个getOpenId方法：</span><br><span class="line">初始化一个hashmap 放入键值:appid secret js_code gant_type</span><br><span class="line">HttpClientUtil.doGet(WX_LOGIN_URL,map) 返回json</span><br><span class="line">JSON.parseObejct(json) 得到JSONObject</span><br><span class="line">拿到openid = JSONObject.getString(&quot;openid&quot;)</span><br><span class="line">4.调用getOpenId方法拿到openid </span><br><span class="line">5.如果openid == null 抛出异常</span><br><span class="line">6.判断是否为新用户，调用userMapper</span><br><span class="line">7.if(user == null) 构造一个user 调用usrMapper插入</span><br></pre></td></tr></table></figure><p>  7.创建UserMapper接口和映射文件</p><ol start="8"><li>编写拦截器</li></ol><ul><li>编写拦截器JwtTokenUserInterceptor</li><li>在WebMvcConfiguration配置类中注册拦截器</li></ul><p><strong>JwtTokenUserInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span></span><br><span class="line"><span class="number">2.</span>注入jwtproperties</span><br><span class="line"><span class="number">3.</span> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line"><span class="number">4.</span>判断拦截的是否是Controller的方法</span><br><span class="line"><span class="number">5.</span>从请求头中获取token</span><br><span class="line"><span class="number">6.</span>JwtUtil.parseJWT(jwtproperties的密钥，token)解密得到claims</span><br><span class="line"><span class="number">7.</span>从claims拿到userId</span><br><span class="line"><span class="number">8.</span>在BaseContext设置userId</span><br><span class="line"><span class="number">9.</span>如果有问题 response.setStatus(<span class="number">401</span>)</span><br><span class="line">    <span class="keyword">return</span> flase</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">WebMvcConfiguration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtTokenUserInterceptor jwtTokenUserInterceptor;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">    <span class="comment">//.........</span></span><br><span class="line"></span><br><span class="line">    registry.addInterceptor(jwtTokenUserInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/user/user/login&quot;</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/user/shop/status&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="菜品浏览功能"><a href="#菜品浏览功能" class="headerlink" title="菜品浏览功能"></a>菜品浏览功能</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapper:      <span class="variable">@Select</span>(&quot;select sd.name, sd.copies, d.image, d.description &quot; <span class="operator">+</span></span><br><span class="line">            &quot;from setmeal_dish sd left join dish d on sd.dish_id = d.id &quot; <span class="operator">+</span></span><br><span class="line">            &quot;where sd.setmeal_id = #&#123;setmealId&#125;&quot;)</span><br><span class="line">    List<span class="operator">&lt;</span>DishItemVO<span class="operator">&gt;</span> getDishItemBySetmealId(Long setmealId);</span><br></pre></td></tr></table></figure><h2 id="Day-7"><a href="#Day-7" class="headerlink" title="Day-7"></a>Day-7</h2><h3 id="缓存菜品"><a href="#缓存菜品" class="headerlink" title="缓存菜品"></a>缓存菜品</h3><p>用户端小程序展示的菜品数据都是通过查询数据库获得，如果<strong>用户端访问量比较大,数据库</strong> 访问压力随之增大。</p><p>通过Redis缓存菜品数据</p><p><img src="/../images/image-20250717163537686.png" alt="image-20250717163537686"></p><p>修改用户端接口 DishController 的 list 方法，加入缓存处理逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.注入RedisTemplate</span><br><span class="line">2.构造redis的key dish_+categoryId</span><br><span class="line">3.查询redis是否存在菜品数据</span><br><span class="line">4.如果没有查询数据库获得数据</span><br><span class="line">5.将数据放在redis里</span><br><span class="line">6.返回数据</span><br></pre></td></tr></table></figure><p>为了保证<strong>数据库</strong>和<strong>Redis</strong>中的数据保持一致，修改<strong>管理端接口 DishController</strong> 的相关方法，加入清理缓存逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.注入RedisTemplate</span><br><span class="line">2.设计方法clanCache(String key)</span><br><span class="line"></span><br><span class="line">有的删除全部缓存：&quot;dish_*&quot;</span><br></pre></td></tr></table></figure><p>redis序列化问题！！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">导入依赖</span><br><span class="line">            <span class="comment">&lt;!-- Jackson 支持 Java 8 时间类型的模块 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>redisconfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ✅ 正确方式：先创建序列化器，再设置 ObjectMapper</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        serializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么要使用Redis做缓存"><a href="#为什么要使用Redis做缓存" class="headerlink" title="为什么要使用Redis做缓存"></a>为什么要使用Redis做缓存</h3><ol><li><strong>快</strong>：纯内存 KV 存储，单机 10w+ QPS，远高于 MySQL 磁盘读写。</li><li><strong>减轻后端压力</strong>：热点数据（商品、配置、验证码）先读缓存，90% 请求被挡在缓存层。</li><li><strong>削峰填谷</strong>：突发流量只打 Redis，后端数据库保持平稳。</li><li><strong>功能丰富</strong>：支持 TTL、LRU、LFU、分布式锁、Stream、Lua 脚本，可玩性强。</li></ol><h3 id="怎么保障数据一致性"><a href="#怎么保障数据一致性" class="headerlink" title="怎么保障数据一致性"></a>怎么保障数据一致性</h3><table><thead><tr><th>方案</th><th>实现思路</th><th>一致性</th><th>复杂度</th><th>场景</th></tr></thead><tbody><tr><td>① Cache Aside（旁路缓存）</td><td>读：先查缓存→无则查库→写缓存；写：先写库→删缓存</td><td>最终一致</td><td>★</td><td>最常用</td></tr><tr><td>② Write Through</td><td>写：同时写缓存+DB（同步写）；读：只读缓存</td><td>强一致</td><td>★★★</td><td>银行账务</td></tr><tr><td>③ Write Behind</td><td>写：先写缓存→异步批量刷库</td><td>最终一致</td><td>★★</td><td>高吞吐日志</td></tr><tr><td>④ 双写 + 延迟双删</td><td>写：先删缓存→写库→延迟再删一次</td><td>最终一致</td><td>★★</td><td>并发极高</td></tr><tr><td>⑤ 分布式锁</td><td>写操作加锁，串行化读写</td><td>强一致</td><td>★★★</td><td>库存扣减</td></tr></tbody></table><p><strong>更新数据先操作数据库，再操作缓存；读数据先查缓存，再回落数据库。</strong><br>配合 TTL 兜底 + 延迟双删 + 分布式锁，可覆盖 99% 实际场景。</p><h3 id="用了-Redis-就一定能高并发吗？"><a href="#用了-Redis-就一定能高并发吗？" class="headerlink" title="用了 Redis 就一定能高并发吗？"></a><strong>用了 Redis 就一定能高并发吗？</strong></h3><p> <strong>不一定！</strong> Redis 只是“工具”，高并发是系统工程：</p><table><thead><tr><th>风险点</th><th>可能踩坑示例</th></tr></thead><tbody><tr><td><strong>单机瓶颈</strong></td><td>单节点 10w QPS，业务 100w QPS 时直接打挂。→ <strong>集群&#x2F;分片</strong></td></tr><tr><td><strong>大 Value</strong></td><td>单个 Key 50 MB，网络阻塞。→ <strong>拆 Key、压缩、分页</strong></td></tr><tr><td><strong>热 Key</strong></td><td>某爆款商品 Key 被 10w 并发读，单节点 CPU 100%。→ <strong>本地缓存 + 热 Key 拆分</strong></td></tr><tr><td><strong>缓存击穿</strong></td><td>热点 Key 失效瞬间流量打到 DB。→ <strong>互斥锁 + 永不过期 + 异步刷新</strong></td></tr><tr><td><strong>缓存雪崩</strong></td><td>大量 Key 同时过期。→ <strong>随机 TTL + 预热 + 降级</strong></td></tr><tr><td><strong>缓存穿透</strong></td><td>查询不存在的数据。→ <strong>布隆过滤器 + 空值缓存</strong></td></tr></tbody></table><p><strong>Redis 是“高速公路”，但限速、车祸、堵车一样会发生；高并发 &#x3D; 缓存策略 + 架构设计 + 容量规划 + 故障预案。</strong></p><h3 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h3><p>Spring Cache是一个框架，实现了<strong>基于注解</strong> 的缓存功能，<strong>只需要简单地加一个注解，就能实现缓存功能</strong>。简单易用</p><p>Spring Cache 提供了一层抽象，底层可以切换不同的缓存实现，例如：</p><ul><li>EHCache</li><li>Caffeine</li><li>Redis(如果配置了Redis,则使用其缓存) 企业常用</li></ul><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>在启动类加上@EnableCaching&#x2F;&#x2F;开启缓存注解功能</p><p>方法上加**@CachePut**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">作用: 将方法返回值，放入缓存</span><br><span class="line"></span><br><span class="line">value: 缓存的名称, 每个缓存名称下面可以有很多key</span><br><span class="line"></span><br><span class="line">key: 缓存的key </span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@CachePut(value = &quot;userCache&quot;, key = &quot;#user.id&quot;)</span><span class="comment">//key的生成：userCache::1</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key 的写法如下</span><br><span class="line"></span><br><span class="line">#user.id 常用: #user指的是方法形参的名称, id指的是user的id属性 , 也就是使用user的id属性作为key ;</span><br><span class="line">#result.id : #result代表方法返回值，该表达式 代表以返回对象的id属性作为key ；</span><br><span class="line">#p0.id：#p0指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ;</span><br><span class="line">#a0.id：#a0指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ;</span><br><span class="line">#root.args[<span class="number">0</span>].id:#root.args[<span class="number">0</span>]指的是方法中的第一个参数，id指的是第一个参数的id属性,也就是使用第一个参数的id属性作为key ; </span><br></pre></td></tr></table></figure><p><strong>@Cacheable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">作用: 在方法执行前，spring 先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中</span><br><span class="line"></span><br><span class="line">cacheNames: 缓存的名称，每个缓存名称下面可以有多个key</span><br><span class="line"></span><br><span class="line">key: 缓存的key</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Cacheable：在方法执行前spring先查看缓存中是否有数据，如果有数据，则直接返回缓存数据；若没有数据，  *调用方法并将方法返回值放到缓存中</span></span><br><span class="line"><span class="comment">* cacheNames：缓存的名称，每个缓存名称下面可以有多个key</span></span><br><span class="line"><span class="comment">* key：缓存的key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;userCache&quot;,key=&quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(id);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@CacheEvict</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">作用: 清理指定缓存</span><br><span class="line"></span><br><span class="line">cacheNames: 缓存的名称，每个缓存名称下面可以有多个key</span><br><span class="line"></span><br><span class="line">key: 缓存的key </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@DeleteMapping</span><br><span class="line">@CacheEvict(cacheNames = &quot;userCache&quot;,key = &quot;#id&quot;)//删除某个key对应的缓存数据</span><br><span class="line">public void deleteById(Long id)&#123;</span><br><span class="line">    userMapper.deleteById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@DeleteMapping(&quot;/delAll&quot;)</span><br><span class="line">@CacheEvict(cacheNames = &quot;userCache&quot;,allEntries = true)//删除userCache下所有的缓存数据</span><br><span class="line">public void deleteAll()&#123;</span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>@Cacheable 注解的作用</strong></p><p>把方法的<strong>返回结果</strong>放进缓存，后续用<strong>同样的参数</strong>再调用时，<strong>直接拿缓存，不再执行方法体</strong>。<br>典型场景：</p><ul><li>查询商品详情</li><li>查用户信息</li><li>查字典&#x2F;配置表</li></ul><table><thead><tr><th>操作类型</th><th>是否适合加 @Cacheable</th><th>举例</th></tr></thead><tbody><tr><td><strong>查询（SELECT）</strong></td><td>✅ 非常适合</td><td><code>getUserById(Long id)</code></td></tr><tr><td><strong>新增（INSERT）</strong></td><td>❌ 不适合</td><td><code>saveUser(User user)</code></td></tr><tr><td><strong>修改（UPDATE）</strong></td><td>❌ 不适合</td><td><code>updateUser(User user)</code></td></tr><tr><td><strong>删除（DELETE）</strong></td><td>❌ 不适合</td><td><code>deleteUser(Long id)</code></td></tr></tbody></table><p><strong>#result.id 与 #user.id 的区别</strong></p><table><thead><tr><th>表达式</th><th>来源</th><th>示例场景</th><th>备注</th></tr></thead><tbody><tr><td><code>#user.id</code></td><td><strong>方法形参</strong> <code>user</code> 的 <code>id</code> 属性</td><td><code>public User get(User user)</code></td><td>方法<strong>执行前</strong>就能拿到</td></tr><tr><td><code>#result.id</code></td><td><strong>方法返回值</strong> 的 <code>id</code> 属性</td><td><code>public User get(Long id)</code></td><td>方法<strong>执行后</strong>才出现；<strong>只能用于 <code>@CacheEvict</code>&#x2F;<code>@Cacheable</code> 的 <code>unless</code>&#x2F;<code>condition</code>，不能用于 <code>@CachePut</code> 的 <code>key</code></strong></td></tr></tbody></table><h3 id="套餐缓存"><a href="#套餐缓存" class="headerlink" title="套餐缓存"></a>套餐缓存</h3><ol><li>导入Spring Cache和Redis相关maven坐标</li><li>在启动类上加入<code>@EnableCaching</code>注解，开启缓存注解功能</li><li>在用户端接口<code>SetmealController</code>的 <code>list</code> 方法上加入<code>@Cacheable</code>注解</li><li>在管理端接口<code>SetmealController</code>的 save、delete、update、startOrStop等方法上加入<code>CacheEvict</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;  要用这个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;setmealCache&quot;,key = &quot;#categoryId&quot;)</span> <span class="comment">//key: setmealCache::100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span></span><br></pre></td></tr></table></figure><h3 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h3><p><img src="/../images/image-20250718091819227.png" alt="image-20250718091819227"></p><h3 id="其余购物车功能"><a href="#其余购物车功能" class="headerlink" title="其余购物车功能"></a>其余购物车功能</h3><h2 id="DAY-8"><a href="#DAY-8" class="headerlink" title="DAY-8"></a>DAY-8</h2><h3 id="导入地址簿功能"><a href="#导入地址簿功能" class="headerlink" title="导入地址簿功能"></a>导入地址簿功能</h3><h3 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">service:</span><br><span class="line"><span class="number">1.</span>异常情况的处理(收获地址为空，超出配送范围，购物车为空)</span><br><span class="line"><span class="number">2.</span>构造订单数据</span><br><span class="line"><span class="number">3.</span>向order插入一条数据 useGeneratedKeys=<span class="string">&quot;true&quot;</span> keyProperty=<span class="string">&quot;id&quot;</span></span><br><span class="line"><span class="number">4.</span>构造订单明细数据集合 setOrderId</span><br><span class="line"><span class="number">5.</span>向插入明细表插入n条数据</span><br><span class="line"><span class="number">6.</span>清空购物车数据</span><br><span class="line"><span class="number">7.</span>封装返回结果</span><br></pre></td></tr></table></figure><p>订单（orders）和订单详情（order_detail）是什么关系？</p><p><strong>“一对多”的主从关系。</strong></p><ul><li>一个订单对应多条订单详情。</li><li>订单详情只隶属于某一个订单，通过 <code>order_id</code> 外键关联。</li></ul><p>订单详情的数据从何而来？</p><p><strong>“复制购物车”而来。</strong></p><ul><li>用户点击“下单”时，系统先把当前购物车里所有商品记录<strong>逐条复制</strong>成订单详情。</li><li>复制时会带上：商品名称、单价、数量、口味、图片等，并回填刚生成的订单号 <code>order_id</code>。</li></ul><p>订单常见状态有哪些？（由简到繁）</p><ol><li><strong>待付款</strong></li><li><strong>待接单</strong></li><li><strong>已接单</strong></li><li><strong>派送中</strong></li><li><strong>已完成</strong></li><li><strong>已取消</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
